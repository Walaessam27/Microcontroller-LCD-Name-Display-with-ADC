

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Nov 28 12:47:11 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  003196                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _Line
    97  003196  0002               	dw	2
    98                           
    99                           ;initializer for _Column
   100  003198  0001               	dw	1
   101                           
   102                           	psect	idataBANK0
   103  00319A                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _LCD_INIT_STRING
   107  00319A  28                 	db	40
   108  00319B  0C                 	db	12
   109  00319C  01                 	db	1
   110  00319D  06                 	db	6
   111                           
   112                           	psect	smallconst
   113  001000                     __psmallconst:
   114                           	opt stack 0
   115  001000  00                 	db	0
   116  001001                     _dpowers:
   117                           	opt stack 0
   118  001001  0001               	dw	1
   119  001003  0000               	dw	0
   120  001005  000A               	dw	10
   121  001007  0000               	dw	0
   122  001009  0064               	dw	100
   123  00100B  0000               	dw	0
   124  00100D  03E8               	dw	1000
   125  00100F  0000               	dw	0
   126  001011  2710               	dw	10000
   127  001013  0000               	dw	0
   128  001015  86A0               	dw	34464
   129  001017  0001               	dw	1
   130  001019  4240               	dw	16960
   131  00101B  000F               	dw	15
   132  00101D  9680               	dw	38528
   133  00101F  0098               	dw	152
   134  001021  E100               	dw	57600
   135  001023  05F5               	dw	1525
   136  001025  CA00               	dw	51712
   137  001027  3B9A               	dw	15258
   138  001029                     __end_of_dpowers:
   139                           	opt stack 0
   140  001029                     __powers_:
   141                           	opt stack 0
   142  001029  00                 	db	0
   143  00102A  80                 	db	128
   144  00102B  3F                 	db	63
   145  00102C  00                 	db	0
   146  00102D  20                 	db	32
   147  00102E  41                 	db	65
   148  00102F  00                 	db	0
   149  001030  C8                 	db	200
   150  001031  42                 	db	66
   151  001032  00                 	db	0
   152  001033  7A                 	db	122
   153  001034  44                 	db	68
   154  001035  40                 	db	64
   155  001036  1C                 	db	28
   156  001037  46                 	db	70
   157  001038  50                 	db	80
   158  001039  C3                 	db	195
   159  00103A  47                 	db	71
   160  00103B  24                 	db	36
   161  00103C  74                 	db	116
   162  00103D  49                 	db	73
   163  00103E  97                 	db	151
   164  00103F  18                 	db	24
   165  001040  4B                 	db	75
   166  001041  BC                 	db	188
   167  001042  BE                 	db	190
   168  001043  4C                 	db	76
   169  001044  6B                 	db	107
   170  001045  6E                 	db	110
   171  001046  4E                 	db	78
   172  001047  03                 	db	3
   173  001048  15                 	db	21
   174  001049  50                 	db	80
   175  00104A  79                 	db	121
   176  00104B  AD                 	db	173
   177  00104C  60                 	db	96
   178  00104D  F3                 	db	243
   179  00104E  49                 	db	73
   180  00104F  71                 	db	113
   181  001050                     __end_of__powers_:
   182                           	opt stack 0
   183  001050                     __npowers_:
   184                           	opt stack 0
   185  001050  00                 	db	0
   186  001051  80                 	db	128
   187  001052  3F                 	db	63
   188  001053  CD                 	db	205
   189  001054  CC                 	db	204
   190  001055  3D                 	db	61
   191  001056  D7                 	db	215
   192  001057  23                 	db	35
   193  001058  3C                 	db	60
   194  001059  12                 	db	18
   195  00105A  83                 	db	131
   196  00105B  3A                 	db	58
   197  00105C  B7                 	db	183
   198  00105D  D1                 	db	209
   199  00105E  38                 	db	56
   200  00105F  C6                 	db	198
   201  001060  27                 	db	39
   202  001061  37                 	db	55
   203  001062  38                 	db	56
   204  001063  86                 	db	134
   205  001064  35                 	db	53
   206  001065  C0                 	db	192
   207  001066  D6                 	db	214
   208  001067  33                 	db	51
   209  001068  CC                 	db	204
   210  001069  2B                 	db	43
   211  00106A  32                 	db	50
   212  00106B  70                 	db	112
   213  00106C  89                 	db	137
   214  00106D  30                 	db	48
   215  00106E  E7                 	db	231
   216  00106F  DB                 	db	219
   217  001070  2E                 	db	46
   218  001071  E5                 	db	229
   219  001072  3C                 	db	60
   220  001073  1E                 	db	30
   221  001074  42                 	db	66
   222  001075  A2                 	db	162
   223  001076  0D                 	db	13
   224  001077                     __end_of__npowers_:
   225                           	opt stack 0
   226  0000                     _ADRESL	set	4035
   227  0000                     _ADRESH	set	4036
   228  0000                     _ADCON2	set	4032
   229  0000                     _ADCON0bits	set	4034
   230  0000                     _ADCON0	set	4034
   231  0000                     _TXREG	set	4013
   232  0000                     _PIR1bits	set	3998
   233  0000                     _RCREG	set	4014
   234  0000                     _RCSTAbits	set	4011
   235  0000                     _RCSTA	set	4011
   236  0000                     _TXSTAbits	set	4012
   237  0000                     _SPBRGH	set	4016
   238  0000                     _SPBRG	set	4015
   239  0000                     _TXSTA	set	4012
   240  0000                     _BAUDCONbits	set	4024
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISE	set	3990
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISB	set	3987
   245  0000                     _TRISA	set	3986
   246  0000                     _LATE	set	3981
   247  0000                     _LATD	set	3980
   248  0000                     _LATC	set	3979
   249  0000                     _LATB	set	3978
   250  0000                     _LATA	set	3977
   251  0000                     _ADCON1	set	4033
   252  0000                     _PORTDbits	set	3971
   253  0000                     _INTCON	set	4082
   254  001077                     STR_2:
   255  001077  57                 	db	87	;'W'
   256  001078  6F                 	db	111	;'o'
   257  001079  72                 	db	114	;'r'
   258  00107A  6F                 	db	111	;'o'
   259  00107B  75                 	db	117	;'u'
   260  00107C  64                 	db	100	;'d'
   261  00107D  20                 	db	32
   262  00107E  2D                 	db	45
   263  00107F  20                 	db	32
   264  001080  52                 	db	82	;'R'
   265  001081  61                 	db	97	;'a'
   266  001082  67                 	db	103	;'g'
   267  001083  68                 	db	104	;'h'
   268  001084  61                 	db	97	;'a'
   269  001085  64                 	db	100	;'d'
   270  001086  20                 	db	32
   271  001087  0D                 	db	13
   272  001088  0A                 	db	10
   273  001089  00                 	db	0
   274  00108A                     STR_3:
   275  00108A  56                 	db	86	;'V'
   276  00108B  30                 	db	48	;'0'
   277  00108C  3D                 	db	61	;'='
   278  00108D  25                 	db	37
   279  00108E  34                 	db	52	;'4'
   280  00108F  2E                 	db	46
   281  001090  32                 	db	50	;'2'
   282  001091  66                 	db	102	;'f'
   283  001092  2D                 	db	45
   284  001093  2D                 	db	45
   285  001094  54                 	db	84	;'T'
   286  001095  3D                 	db	61	;'='
   287  001096  25                 	db	37
   288  001097  34                 	db	52	;'4'
   289  001098  2E                 	db	46
   290  001099  32                 	db	50	;'2'
   291  00109A  66                 	db	102	;'f'
   292  00109B  00                 	db	0
   293  00109C                     STR_1:
   294  00109C  57                 	db	87	;'W'
   295  00109D  6F                 	db	111	;'o'
   296  00109E  72                 	db	114	;'r'
   297  00109F  6F                 	db	111	;'o'
   298  0010A0  75                 	db	117	;'u'
   299  0010A1  64                 	db	100	;'d'
   300  0010A2  20                 	db	32
   301  0010A3  2D                 	db	45
   302  0010A4  20                 	db	32
   303  0010A5  52                 	db	82	;'R'
   304  0010A6  61                 	db	97	;'a'
   305  0010A7  67                 	db	103	;'g'
   306  0010A8  68                 	db	104	;'h'
   307  0010A9  61                 	db	97	;'a'
   308  0010AA  64                 	db	100	;'d'
   309  0010AB  00                 	db	0
   310  0010AC                     STR_4:
   311  0010AC  25                 	db	37
   312  0010AD  63                 	db	99	;'c'
   313  0010AE  00                 	db	0
   314                           
   315                           ; #config settings
   316  0010AF  00                 	db	0	; dummy byte at the end
   317  0000                     
   318                           	psect	cinit
   319  002D20                     __pcinit:
   320                           	opt stack 0
   321  002D20                     start_initialization:
   322                           	opt stack 0
   323  002D20                     __initialization:
   324                           	opt stack 0
   325                           
   326                           ; Initialize objects allocated to BANK0 (4 bytes)
   327                           ; load TBLPTR registers with __pidataBANK0
   328  002D20  0E9A               	movlw	low __pidataBANK0
   329  002D22  6EF6               	movwf	tblptrl,c
   330  002D24  0E31               	movlw	high __pidataBANK0
   331  002D26  6EF7               	movwf	tblptrh,c
   332  002D28  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   333  002D2A  6EF8               	movwf	tblptru,c
   334  002D2C  EE00  F0A0         	lfsr	0,__pdataBANK0
   335  002D30  EE10 F004          	lfsr	1,4
   336  002D34                     copy_data0:
   337  002D34  0009               	tblrd		*+
   338  002D36  CFF5 FFEE          	movff	tablat,postinc0
   339  002D3A  50E5               	movf	postdec1,w,c
   340  002D3C  50E1               	movf	fsr1l,w,c
   341  002D3E  E1FA               	bnz	copy_data0
   342                           
   343                           ; Initialize objects allocated to COMRAM (4 bytes)
   344                           ; load TBLPTR registers with __pidataCOMRAM
   345  002D40  0E96               	movlw	low __pidataCOMRAM
   346  002D42  6EF6               	movwf	tblptrl,c
   347  002D44  0E31               	movlw	high __pidataCOMRAM
   348  002D46  6EF7               	movwf	tblptrh,c
   349  002D48  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   350  002D4A  6EF8               	movwf	tblptru,c
   351  002D4C  EE00  F07C         	lfsr	0,__pdataCOMRAM
   352  002D50  EE10 F004          	lfsr	1,4
   353  002D54                     copy_data1:
   354  002D54  0009               	tblrd		*+
   355  002D56  CFF5 FFEE          	movff	tablat,postinc0
   356  002D5A  50E5               	movf	postdec1,w,c
   357  002D5C  50E1               	movf	fsr1l,w,c
   358  002D5E  E1FA               	bnz	copy_data1
   359                           
   360                           ; Clear objects allocated to BANK0 (32 bytes)
   361  002D60  EE00  F080         	lfsr	0,__pbssBANK0
   362  002D64  0E20               	movlw	32
   363  002D66                     clear_0:
   364  002D66  6AEE               	clrf	postinc0,c
   365  002D68  06E8               	decf	wreg,f,c
   366  002D6A  E1FD               	bnz	clear_0
   367                           
   368                           ; Clear objects allocated to COMRAM (14 bytes)
   369  002D6C  EE00  F06E         	lfsr	0,__pbssCOMRAM
   370  002D70  0E0E               	movlw	14
   371  002D72                     clear_1:
   372  002D72  6AEE               	clrf	postinc0,c
   373  002D74  06E8               	decf	wreg,f,c
   374  002D76  E1FD               	bnz	clear_1
   375  002D78                     end_of_initialization:
   376                           	opt stack 0
   377  002D78                     __end_of__initialization:
   378                           	opt stack 0
   379  002D78  0E00               	movlw	low (__Lmediumconst shr (0+16))
   380  002D7A  6EF8               	movwf	tblptru,c
   381  002D7C  0100               	movlb	0
   382  002D7E  EF18  F010         	goto	_main	;jump to C main() function
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	bssCOMRAM
   393  00006E                     __pbssCOMRAM:
   394                           	opt stack 0
   395  00006E                     _AN:
   396                           	opt stack 0
   397  00006E                     	ds	9
   398  000077                     _voltage:
   399                           	opt stack 0
   400  000077                     	ds	3
   401  00007A                     _x:
   402                           	opt stack 0
   403  00007A                     	ds	1
   404  00007B                     _channelRead:
   405                           	opt stack 0
   406  00007B                     	ds	1
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	dataCOMRAM
   417  00007C                     __pdataCOMRAM:
   418                           	opt stack 0
   419  00007C                     _Line:
   420                           	opt stack 0
   421  00007C                     	ds	2
   422  00007E                     _Column:
   423                           	opt stack 0
   424  00007E                     	ds	2
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	bssBANK0
   435  000080                     __pbssBANK0:
   436                           	opt stack 0
   437  000080                     _buffer:
   438                           	opt stack 0
   439  000080                     	ds	32
   440                           tblptru	equ	0xFF8
   441                           tblptrh	equ	0xFF7
   442                           tblptrl	equ	0xFF6
   443                           tablat	equ	0xFF5
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           postdec1	equ	0xFE5
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	dataBANK0
   450  0000A0                     __pdataBANK0:
   451                           	opt stack 0
   452  0000A0                     _LCD_INIT_STRING:
   453                           	opt stack 0
   454  0000A0                     	ds	4
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	cstackCOMRAM
   465  000001                     __pcstackCOMRAM:
   466                           	opt stack 0
   467  000001                     ??_isdigit:
   468  000001                     ??_delay_cycles:
   469  000001                     ?_read_adc_raw_no_lib:
   470                           	opt stack 0
   471  000001                     ?___awmod:
   472                           	opt stack 0
   473  000001                     ?___ftpack:
   474                           	opt stack 0
   475  000001                     ?___ftneg:
   476                           	opt stack 0
   477  000001                     ?__tdiv_to_l_:
   478                           	opt stack 0
   479  000001                     ?__div_to_l_:
   480                           	opt stack 0
   481  000001                     ?___lldiv:
   482                           	opt stack 0
   483  000001                     ?___llmod:
   484                           	opt stack 0
   485  000001                     setupSerial@dummy:
   486                           	opt stack 0
   487  000001                     read_byte_no_lib@c:
   488                           	opt stack 0
   489  000001                     send_byte_no_lib@c:
   490                           	opt stack 0
   491  000001                     delay_ms@n:
   492                           	opt stack 0
   493  000001                     ___awmod@dividend:
   494                           	opt stack 0
   495  000001                     __div_to_l_@f1:
   496                           	opt stack 0
   497  000001                     ___ftpack@arg:
   498                           	opt stack 0
   499  000001                     __tdiv_to_l_@f1:
   500                           	opt stack 0
   501  000001                     ___ftge@ff1:
   502                           	opt stack 0
   503  000001                     ___ftneg@f1:
   504                           	opt stack 0
   505  000001                     ___lldiv@dividend:
   506                           	opt stack 0
   507  000001                     ___llmod@dividend:
   508                           	opt stack 0
   509                           
   510                           ; 4 bytes @ 0x0
   511  000001                     	ds	1
   512  000002                     _isdigit$827:
   513                           	opt stack 0
   514  000002                     send_string_no_lib@p:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x1
   518  000002                     	ds	1
   519  000003                     ??_read_adc_raw_no_lib:
   520  000003                     isdigit@c:
   521                           	opt stack 0
   522  000003                     delay_ms@i:
   523                           	opt stack 0
   524  000003                     ___awmod@divisor:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x2
   528  000003                     	ds	1
   529  000004                     delay_cycles@n:
   530                           	opt stack 0
   531  000004                     ___ftpack@exp:
   532                           	opt stack 0
   533  000004                     __div_to_l_@f2:
   534                           	opt stack 0
   535  000004                     __tdiv_to_l_@f2:
   536                           	opt stack 0
   537  000004                     ___ftge@ff2:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x3
   541  000004                     	ds	1
   542  000005                     ___awmod@counter:
   543                           	opt stack 0
   544  000005                     ___ftpack@sign:
   545                           	opt stack 0
   546  000005                     delay_cycles@x:
   547                           	opt stack 0
   548  000005                     read_adc_raw_no_lib@raw_value:
   549                           	opt stack 0
   550  000005                     ___lldiv@divisor:
   551                           	opt stack 0
   552  000005                     ___llmod@divisor:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x4
   556  000005                     	ds	1
   557  000006                     ??___ftpack:
   558  000006                     ___awmod@sign:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x5
   562  000006                     	ds	1
   563  000007                     ??__tdiv_to_l_:
   564  000007                     ??_lcd_send_nibble:
   565  000007                     ??___ftge:
   566  000007                     ?___awdiv:
   567                           	opt stack 0
   568  000007                     read_adc_raw_no_lib@channel:
   569                           	opt stack 0
   570  000007                     ___awdiv@dividend:
   571                           	opt stack 0
   572  000007                     __div_to_l_@quot:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x6
   576  000007                     	ds	1
   577  000008                     lcd_send_nibble@n:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x7
   581  000008                     	ds	1
   582  000009                     ?___lltoft:
   583                           	opt stack 0
   584  000009                     lcd_send_byte@n:
   585                           	opt stack 0
   586  000009                     ___llmod@counter:
   587                           	opt stack 0
   588  000009                     ___awdiv@divisor:
   589                           	opt stack 0
   590  000009                     ___lldiv@quotient:
   591                           	opt stack 0
   592  000009                     ___lltoft@c:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x8
   596  000009                     	ds	1
   597  00000A                     lcd_send_byte@cm_data:
   598                           	opt stack 0
   599  00000A                     __tdiv_to_l_@quot:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x9
   603  00000A                     	ds	1
   604  00000B                     lcd_init@i:
   605                           	opt stack 0
   606  00000B                     lcd_gotoxy@y:
   607                           	opt stack 0
   608  00000B                     ___awdiv@counter:
   609                           	opt stack 0
   610  00000B                     __div_to_l_@cntr:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0xA
   614  00000B                     	ds	1
   615  00000C                     lcd_gotoxy@x:
   616                           	opt stack 0
   617  00000C                     ___awdiv@sign:
   618                           	opt stack 0
   619  00000C                     __div_to_l_@exp1:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0xB
   623  00000C                     	ds	1
   624  00000D                     ??___lltoft:
   625  00000D                     lcd_gotoxy@address:
   626                           	opt stack 0
   627  00000D                     ___lldiv@counter:
   628                           	opt stack 0
   629  00000D                     ___awdiv@quotient:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0xC
   633  00000D                     	ds	1
   634  00000E                     lcd_putc@c:
   635                           	opt stack 0
   636  00000E                     __tdiv_to_l_@cntr:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0xD
   640  00000E                     	ds	1
   641  00000F                     ?___wmul:
   642                           	opt stack 0
   643  00000F                     __tdiv_to_l_@exp1:
   644                           	opt stack 0
   645  00000F                     lcd_puts@s:
   646                           	opt stack 0
   647  00000F                     ___wmul@multiplier:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0xE
   651  00000F                     	ds	2
   652  000011                     ___lltoft@exp:
   653                           	opt stack 0
   654  000011                     ___wmul@multiplicand:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x10
   658  000011                     	ds	2
   659  000013                     ___wmul@product:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x12
   663  000013                     	ds	2
   664  000015                     ?___ftmul:
   665                           	opt stack 0
   666  000015                     ?___awtoft:
   667                           	opt stack 0
   668  000015                     ___awtoft@c:
   669                           	opt stack 0
   670  000015                     ___ftmul@f1:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x14
   674  000015                     	ds	3
   675  000018                     ___awtoft@sign:
   676                           	opt stack 0
   677  000018                     ___ftmul@f2:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x17
   681  000018                     	ds	1
   682  000019                     ?___ftdiv:
   683                           	opt stack 0
   684  000019                     ___ftdiv@f1:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x18
   688  000019                     	ds	2
   689  00001B                     ??___ftmul:
   690                           
   691                           ; 1 bytes @ 0x1A
   692  00001B                     	ds	1
   693  00001C                     ___ftdiv@f2:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x1B
   697  00001C                     	ds	2
   698  00001E                     ___ftmul@exp:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x1D
   702  00001E                     	ds	1
   703  00001F                     ??___ftdiv:
   704  00001F                     ___ftmul@f3_as_product:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x1E
   708  00001F                     	ds	3
   709  000022                     ___ftdiv@cntr:
   710                           	opt stack 0
   711  000022                     ___ftmul@cntr:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x21
   715  000022                     	ds	1
   716  000023                     ___ftmul@sign:
   717                           	opt stack 0
   718  000023                     ___ftdiv@f3:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x22
   722  000023                     	ds	1
   723  000024                     ?_fround:
   724                           	opt stack 0
   725  000024                     ?_scale:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x23
   729  000024                     	ds	2
   730  000026                     ___ftdiv@exp:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x25
   734  000026                     	ds	1
   735  000027                     ___ftdiv@sign:
   736                           	opt stack 0
   737  000027                     _fround$1177:
   738                           	opt stack 0
   739  000027                     _scale$1178:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x26
   743  000027                     	ds	1
   744  000028                     ?_read_adc_temp:
   745                           	opt stack 0
   746  000028                     ?_read_adc_voltage:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x27
   750  000028                     	ds	2
   751  00002A                     scale@scl:
   752                           	opt stack 0
   753  00002A                     _fround$1176:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x29
   757  00002A                     	ds	1
   758  00002B                     ?___fttol:
   759                           	opt stack 0
   760  00002B                     read_adc_voltage@voltage:
   761                           	opt stack 0
   762  00002B                     read_adc_temp@voltage:
   763                           	opt stack 0
   764  00002B                     ___fttol@f1:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x2A
   768  00002B                     	ds	2
   769  00002D                     fround@prec:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x2C
   773  00002D                     	ds	1
   774  00002E                     ?___ftadd:
   775                           	opt stack 0
   776  00002E                     read_adc_voltage@raw_value:
   777                           	opt stack 0
   778  00002E                     read_adc_temp@temp:
   779                           	opt stack 0
   780  00002E                     ___ftadd@f1:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x2D
   784  00002E                     	ds	1
   785  00002F                     ??___fttol:
   786                           
   787                           ; 1 bytes @ 0x2E
   788  00002F                     	ds	1
   789  000030                     read_adc_voltage@channel:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x2F
   793  000030                     	ds	1
   794  000031                     read_adc_temp@raw_value:
   795                           	opt stack 0
   796  000031                     ___ftadd@f2:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x30
   800  000031                     	ds	2
   801  000033                     read_adc_temp@channel:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x32
   805  000033                     	ds	1
   806  000034                     ??___ftadd:
   807  000034                     ___fttol@sign1:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x33
   811  000034                     	ds	1
   812  000035                     ___fttol@lval:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x34
   816  000035                     	ds	2
   817  000037                     ___ftadd@sign:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x36
   821  000037                     	ds	1
   822  000038                     ___ftadd@exp2:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x37
   826  000038                     	ds	1
   827  000039                     ___ftadd@exp1:
   828                           	opt stack 0
   829  000039                     ___fttol@exp1:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x38
   833  000039                     	ds	1
   834  00003A                     ?___ftsub:
   835                           	opt stack 0
   836  00003A                     ___ftsub@f1:
   837                           	opt stack 0
   838                           
   839                           ; 3 bytes @ 0x39
   840  00003A                     	ds	3
   841  00003D                     ___ftsub@f2:
   842                           	opt stack 0
   843                           
   844                           ; 3 bytes @ 0x3C
   845  00003D                     	ds	3
   846  000040                     ?_sprintf:
   847                           	opt stack 0
   848  000040                     sprintf@sp:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x3F
   852  000040                     	ds	2
   853  000042                     sprintf@f:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x41
   857  000042                     	ds	8
   858  00004A                     ??_sprintf:
   859                           
   860                           ; 1 bytes @ 0x49
   861  00004A                     	ds	6
   862  000050                     _sprintf$1179:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x4F
   866  000050                     	ds	3
   867  000053                     sprintf@cp:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x52
   871  000053                     	ds	2
   872  000055                     sprintf@ap:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x54
   876  000055                     	ds	2
   877  000057                     sprintf@len:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x56
   881  000057                     	ds	2
   882  000059                     sprintf@val:
   883                           	opt stack 0
   884                           
   885                           ; 4 bytes @ 0x58
   886  000059                     	ds	4
   887  00005D                     sprintf@flag:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x5C
   891  00005D                     	ds	2
   892  00005F                     sprintf@tmpval:
   893                           	opt stack 0
   894                           
   895                           ; 4 bytes @ 0x5E
   896  00005F                     	ds	4
   897  000063                     sprintf@exp:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x62
   901  000063                     	ds	2
   902  000065                     sprintf@width:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x64
   906  000065                     	ds	2
   907  000067                     sprintf@fval:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x66
   911  000067                     	ds	3
   912  00006A                     sprintf@prec:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x69
   916  00006A                     	ds	2
   917  00006C                     sprintf@c:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x6B
   921  00006C                     	ds	1
   922  00006D                     ??_main:
   923                           
   924                           ; 1 bytes @ 0x6C
   925  00006D                     	ds	1
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           postinc0	equ	0xFEE
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           
   935 ;;
   936 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   937 ;;
   938 ;; *************** function _main *****************
   939 ;; Defined at:
   940 ;;		line 81 in file "mainBasicCircuit.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;		None
   943 ;; Auto vars:     Size  Location     Type
   944 ;;		None
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;Total ram usage:        1 bytes
   959 ;; Hardware stack levels required when called:    6
   960 ;; This function calls:
   961 ;;		_delay_ms
   962 ;;		_initPorts
   963 ;;		_init_adc_no_lib
   964 ;;		_is_byte_available
   965 ;;		_lcd_gotoxy
   966 ;;		_lcd_init
   967 ;;		_lcd_putc
   968 ;;		_lcd_puts
   969 ;;		_read_adc_temp
   970 ;;		_read_adc_voltage
   971 ;;		_read_byte_no_lib
   972 ;;		_send_string_no_lib
   973 ;;		_setupSerial
   974 ;;		_sprintf
   975 ;; This function is called by:
   976 ;;		Startup code after reset
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text0
   981  002030                     __ptext0:
   982                           	opt stack 0
   983  002030                     _main:
   984                           	opt stack 25
   985                           
   986                           ;mainBasicCircuit.c: 82: INTCON = 0;
   987                           
   988                           ;incstack = 0
   989  002030  0E00               	movlw	0
   990  002032  6EF2               	movwf	intcon,c	;volatile
   991                           
   992                           ;mainBasicCircuit.c: 83: initPorts();
   993  002034  EC00  F018         	call	_initPorts	;wreg free
   994                           
   995                           ;mainBasicCircuit.c: 84: setupSerial();
   996  002038  EC4D  F018         	call	_setupSerial	;wreg free
   997                           
   998                           ;mainBasicCircuit.c: 85: init_adc_no_lib();
   999  00203C  ECC5  F018         	call	_init_adc_no_lib	;wreg free
  1000                           
  1001                           ;mainBasicCircuit.c: 86: lcd_init();
  1002  002040  ECC1  F016         	call	_lcd_init	;wreg free
  1003                           
  1004                           ;mainBasicCircuit.c: 92: delay_ms(3000);
  1005  002044  0E0B               	movlw	11
  1006  002046  6E02               	movwf	delay_ms@n+1,c
  1007  002048  0EB8               	movlw	184
  1008  00204A  6E01               	movwf	delay_ms@n,c
  1009  00204C  EC28  F018         	call	_delay_ms	;wreg free
  1010                           
  1011                           ;mainBasicCircuit.c: 93: lcd_putc('\f');
  1012  002050  0E0C               	movlw	12
  1013  002052  EC20  F017         	call	_lcd_putc
  1014                           
  1015                           ;mainBasicCircuit.c: 94: sprintf(buffer, "Woroud - Raghad");
  1016  002056  0E80               	movlw	low _buffer
  1017  002058  6E40               	movwf	sprintf@sp,c
  1018  00205A  0E00               	movlw	high _buffer
  1019  00205C  6E41               	movwf	sprintf@sp+1,c
  1020  00205E  0E9C               	movlw	low STR_1
  1021  002060  6E42               	movwf	sprintf@f,c
  1022  002062  0E10               	movlw	high STR_1
  1023  002064  6E43               	movwf	sprintf@f+1,c
  1024  002066  EC58  F008         	call	_sprintf	;wreg free
  1025                           
  1026                           ;mainBasicCircuit.c: 95: lcd_gotoxy(1,1);
  1027  00206A  0E01               	movlw	1
  1028  00206C  6E0B               	movwf	lcd_gotoxy@y,c
  1029  00206E  0E01               	movlw	1
  1030  002070  EC6F  F017         	call	_lcd_gotoxy
  1031                           
  1032                           ;mainBasicCircuit.c: 96: lcd_puts(buffer);
  1033  002074  0E80               	movlw	low _buffer
  1034  002076  6E0F               	movwf	lcd_puts@s,c
  1035  002078  0E00               	movlw	high _buffer
  1036  00207A  6E10               	movwf	lcd_puts@s+1,c
  1037  00207C  EC71  F018         	call	_lcd_puts	;wreg free
  1038                           
  1039                           ;mainBasicCircuit.c: 97: delay_ms(2000);
  1040  002080  0E07               	movlw	7
  1041  002082  6E02               	movwf	delay_ms@n+1,c
  1042  002084  0ED0               	movlw	208
  1043  002086  6E01               	movwf	delay_ms@n,c
  1044  002088  EC28  F018         	call	_delay_ms	;wreg free
  1045                           
  1046                           ;mainBasicCircuit.c: 98: lcd_putc('\f');
  1047  00208C  0E0C               	movlw	12
  1048  00208E  EC20  F017         	call	_lcd_putc
  1049                           
  1050                           ;mainBasicCircuit.c: 100: delay_ms(1000);
  1051  002092  0E03               	movlw	3
  1052  002094  6E02               	movwf	delay_ms@n+1,c
  1053  002096  0EE8               	movlw	232
  1054  002098  6E01               	movwf	delay_ms@n,c
  1055  00209A  EC28  F018         	call	_delay_ms	;wreg free
  1056                           
  1057                           ;mainBasicCircuit.c: 102: sprintf(buffer, "Woroud - Raghad \r\n");
  1058  00209E  0E80               	movlw	low _buffer
  1059  0020A0  6E40               	movwf	sprintf@sp,c
  1060  0020A2  0E00               	movlw	high _buffer
  1061  0020A4  6E41               	movwf	sprintf@sp+1,c
  1062  0020A6  0E77               	movlw	low STR_2
  1063  0020A8  6E42               	movwf	sprintf@f,c
  1064  0020AA  0E10               	movlw	high STR_2
  1065  0020AC  6E43               	movwf	sprintf@f+1,c
  1066  0020AE  EC58  F008         	call	_sprintf	;wreg free
  1067                           
  1068                           ;mainBasicCircuit.c: 103: send_string_no_lib(buffer);
  1069  0020B2  0E80               	movlw	low _buffer
  1070  0020B4  6E02               	movwf	send_string_no_lib@p,c
  1071  0020B6  0E00               	movlw	high _buffer
  1072  0020B8  6E03               	movwf	send_string_no_lib@p+1,c
  1073  0020BA  EC5F  F018         	call	_send_string_no_lib	;wreg free
  1074                           
  1075                           ;mainBasicCircuit.c: 104: delay_ms(1000);
  1076  0020BE  0E03               	movlw	3
  1077  0020C0  6E02               	movwf	delay_ms@n+1,c
  1078  0020C2  0EE8               	movlw	232
  1079  0020C4  6E01               	movwf	delay_ms@n,c
  1080  0020C6  EC28  F018         	call	_delay_ms	;wreg free
  1081  0020CA                     l158:
  1082  0020CA  0004               	clrwdt		;# 
  1083                           
  1084                           ;mainBasicCircuit.c: 110: for (channelRead = 0; channelRead < 3; channelRead++) {
  1085  0020CC  0E00               	movlw	0
  1086  0020CE  6E7B               	movwf	_channelRead,c
  1087  0020D0                     l3377:
  1088  0020D0  0E02               	movlw	2
  1089  0020D2  647B               	cpfsgt	_channelRead,c
  1090  0020D4  D001               	goto	l159
  1091  0020D6  D02F               	goto	u3440
  1092  0020D8                     l159:
  1093                           
  1094                           ;mainBasicCircuit.c: 111: if(channelRead==2){
  1095  0020D8  0E02               	movlw	2
  1096  0020DA  187B               	xorwf	_channelRead,w,c
  1097  0020DC  A4D8               	btfss	status,2,c
  1098  0020DE  D012               	goto	l161
  1099                           
  1100                           ;mainBasicCircuit.c: 112: AN[channelRead] = read_adc_temp((unsigned char) channelRead);
  1101  0020E0  507B               	movf	_channelRead,w,c
  1102  0020E2  EC28  F015         	call	_read_adc_temp
  1103  0020E6  507B               	movf	_channelRead,w,c
  1104  0020E8  0D03               	mullw	3
  1105  0020EA  0E6E               	movlw	low _AN
  1106  0020EC  24F3               	addwf	prodl,w,c
  1107  0020EE  6ED9               	movwf	fsr2l,c
  1108  0020F0  0E00               	movlw	high _AN
  1109  0020F2  20F4               	addwfc	prodh,w,c
  1110  0020F4  6EDA               	movwf	fsr2h,c
  1111  0020F6  C028  FFDE         	movff	?_read_adc_temp,postinc2
  1112  0020FA  C029  FFDE         	movff	?_read_adc_temp+1,postinc2
  1113  0020FE  C02A  FFDE         	movff	?_read_adc_temp+2,postinc2
  1114                           
  1115                           ;mainBasicCircuit.c: 113: }
  1116  002102  D017               	goto	l162
  1117  002104                     l161:
  1118                           
  1119                           ;mainBasicCircuit.c: 114: else {
  1120                           ;mainBasicCircuit.c: 116: voltage = read_adc_voltage((unsigned char) channelRead);
  1121  002104  507B               	movf	_channelRead,w,c
  1122  002106  EC5D  F016         	call	_read_adc_voltage
  1123  00210A  C028  F077         	movff	?_read_adc_voltage,_voltage
  1124  00210E  C029  F078         	movff	?_read_adc_voltage+1,_voltage+1
  1125  002112  C02A  F079         	movff	?_read_adc_voltage+2,_voltage+2
  1126                           
  1127                           ;mainBasicCircuit.c: 117: AN[channelRead] = voltage;
  1128  002116  507B               	movf	_channelRead,w,c
  1129  002118  0D03               	mullw	3
  1130  00211A  0E6E               	movlw	low _AN
  1131  00211C  24F3               	addwf	prodl,w,c
  1132  00211E  6ED9               	movwf	fsr2l,c
  1133  002120  0E00               	movlw	high _AN
  1134  002122  20F4               	addwfc	prodh,w,c
  1135  002124  6EDA               	movwf	fsr2h,c
  1136  002126  C077  FFDE         	movff	_voltage,postinc2
  1137  00212A  C078  FFDE         	movff	_voltage+1,postinc2
  1138  00212E  C079  FFDE         	movff	_voltage+2,postinc2
  1139  002132                     l162:
  1140  002132  2A7B               	incf	_channelRead,f,c
  1141  002134  D7CD               	goto	l3377
  1142  002136                     u3440:
  1143                           
  1144                           ;mainBasicCircuit.c: 119: }
  1145                           ;mainBasicCircuit.c: 120: }
  1146                           ;mainBasicCircuit.c: 122: lcd_gotoxy(1, 1);
  1147  002136  0E01               	movlw	1
  1148  002138  6E0B               	movwf	lcd_gotoxy@y,c
  1149  00213A  0E01               	movlw	1
  1150  00213C  EC6F  F017         	call	_lcd_gotoxy
  1151                           
  1152                           ;mainBasicCircuit.c: 123: sprintf(buffer, "V0=%4.2f--T=%4.2f", AN[0], AN[2]);
  1153  002140  0E80               	movlw	low _buffer
  1154  002142  6E40               	movwf	sprintf@sp,c
  1155  002144  0E00               	movlw	high _buffer
  1156  002146  6E41               	movwf	sprintf@sp+1,c
  1157  002148  0E8A               	movlw	low STR_3
  1158  00214A  6E42               	movwf	sprintf@f,c
  1159  00214C  0E10               	movlw	high STR_3
  1160  00214E  6E43               	movwf	sprintf@f+1,c
  1161  002150  C06E  F044         	movff	_AN,?_sprintf+4
  1162  002154  C06F  F045         	movff	_AN+1,?_sprintf+5
  1163  002158  C070  F046         	movff	_AN+2,?_sprintf+6
  1164  00215C  C074  F047         	movff	_AN+6,?_sprintf+7
  1165  002160  C075  F048         	movff	_AN+7,?_sprintf+8
  1166  002164  C076  F049         	movff	_AN+8,?_sprintf+9
  1167  002168  EC58  F008         	call	_sprintf	;wreg free
  1168                           
  1169                           ;mainBasicCircuit.c: 124: lcd_puts(buffer);
  1170  00216C  0E80               	movlw	low _buffer
  1171  00216E  6E0F               	movwf	lcd_puts@s,c
  1172  002170  0E00               	movlw	high _buffer
  1173  002172  6E10               	movwf	lcd_puts@s+1,c
  1174  002174  EC71  F018         	call	_lcd_puts	;wreg free
  1175                           
  1176                           ;mainBasicCircuit.c: 127: if (is_byte_available()) {
  1177  002178  ECB1  F018         	call	_is_byte_available	;wreg free
  1178  00217C  0900               	iorlw	0
  1179  00217E  B4D8               	btfsc	status,2,c
  1180  002180  D7A4               	goto	l158
  1181                           
  1182                           ;mainBasicCircuit.c: 128: x = read_byte_no_lib();
  1183  002182  ECA3  F018         	call	_read_byte_no_lib	;wreg free
  1184  002186  6E7A               	movwf	_x,c
  1185                           
  1186                           ;mainBasicCircuit.c: 129: PORTDbits.RD7 = !PORTDbits.RD7;
  1187  002188  BE83               	btfsc	3971,7,c	;volatile
  1188  00218A  D003               	goto	u3460
  1189  00218C  6A6D               	clrf	??_main& (0+255),c
  1190  00218E  2A6D               	incf	??_main& (0+255),f,c
  1191  002190  D001               	goto	u3478
  1192  002192                     u3460:
  1193  002192  6A6D               	clrf	??_main& (0+255),c
  1194  002194                     u3478:
  1195  002194  326D               	rrcf	??_main,f,c
  1196  002196  326D               	rrcf	??_main,f,c
  1197  002198  5083               	movf	3971,w,c	;volatile
  1198  00219A  186D               	xorwf	??_main,w,c
  1199  00219C  0B7F               	andlw	-129
  1200  00219E  186D               	xorwf	??_main,w,c
  1201  0021A0  6E83               	movwf	3971,c	;volatile
  1202                           
  1203                           ;mainBasicCircuit.c: 130: sprintf(buffer, "%c", x);
  1204  0021A2  0E80               	movlw	low _buffer
  1205  0021A4  6E40               	movwf	sprintf@sp,c
  1206  0021A6  0E00               	movlw	high _buffer
  1207  0021A8  6E41               	movwf	sprintf@sp+1,c
  1208  0021AA  0EAC               	movlw	low STR_4
  1209  0021AC  6E42               	movwf	sprintf@f,c
  1210  0021AE  0E10               	movlw	high STR_4
  1211  0021B0  6E43               	movwf	sprintf@f+1,c
  1212  0021B2  C07A  F044         	movff	_x,?_sprintf+4
  1213  0021B6  6A45               	clrf	?_sprintf+5,c
  1214  0021B8  EC58  F008         	call	_sprintf	;wreg free
  1215                           
  1216                           ;mainBasicCircuit.c: 131: lcd_gotoxy(Column, Line);
  1217  0021BC  C07C  F00B         	movff	_Line,lcd_gotoxy@y
  1218  0021C0  507E               	movf	_Column,w,c
  1219  0021C2  EC6F  F017         	call	_lcd_gotoxy
  1220                           
  1221                           ;mainBasicCircuit.c: 132: lcd_puts(buffer);
  1222  0021C6  0E80               	movlw	low _buffer
  1223  0021C8  6E0F               	movwf	lcd_puts@s,c
  1224  0021CA  0E00               	movlw	high _buffer
  1225  0021CC  6E10               	movwf	lcd_puts@s+1,c
  1226  0021CE  EC71  F018         	call	_lcd_puts	;wreg free
  1227                           
  1228                           ;mainBasicCircuit.c: 133: send_string_no_lib(buffer);
  1229  0021D2  0E80               	movlw	low _buffer
  1230  0021D4  6E02               	movwf	send_string_no_lib@p,c
  1231  0021D6  0E00               	movlw	high _buffer
  1232  0021D8  6E03               	movwf	send_string_no_lib@p+1,c
  1233  0021DA  EC5F  F018         	call	_send_string_no_lib	;wreg free
  1234                           
  1235                           ;mainBasicCircuit.c: 135: if(Column==16 && Line==2)
  1236  0021DE  0E10               	movlw	16
  1237  0021E0  187E               	xorwf	_Column,w,c
  1238  0021E2  107F               	iorwf	_Column+1,w,c
  1239  0021E4  A4D8               	btfss	status,2,c
  1240  0021E6  D00E               	goto	l164
  1241  0021E8  0E02               	movlw	2
  1242  0021EA  187C               	xorwf	_Line,w,c
  1243  0021EC  107D               	iorwf	_Line+1,w,c
  1244  0021EE  A4D8               	btfss	status,2,c
  1245  0021F0  D009               	goto	l164
  1246                           
  1247                           ;mainBasicCircuit.c: 136: {
  1248                           ;mainBasicCircuit.c: 137: Column=1;
  1249  0021F2  0E00               	movlw	0
  1250  0021F4  6E7F               	movwf	_Column+1,c
  1251  0021F6  0E01               	movlw	1
  1252  0021F8  6E7E               	movwf	_Column,c
  1253                           
  1254                           ;mainBasicCircuit.c: 138: Line=2;
  1255  0021FA  0E00               	movlw	0
  1256  0021FC  6E7D               	movwf	_Line+1,c
  1257  0021FE  0E02               	movlw	2
  1258  002200  6E7C               	movwf	_Line,c
  1259                           
  1260                           ;mainBasicCircuit.c: 139: }
  1261  002202  D002               	goto	l165
  1262  002204                     l164:
  1263                           
  1264                           ;mainBasicCircuit.c: 140: else Column++;
  1265  002204  4A7E               	infsnz	_Column,f,c
  1266  002206  2A7F               	incf	_Column+1,f,c
  1267  002208                     l165:
  1268                           
  1269                           ;mainBasicCircuit.c: 148: if (x=='?'){
  1270  002208  0E3F               	movlw	63
  1271  00220A  187A               	xorwf	_x,w,c
  1272  00220C  A4D8               	btfss	status,2,c
  1273  00220E  D010               	goto	l166
  1274                           
  1275                           ;mainBasicCircuit.c: 149: lcd_putc('\f');
  1276  002210  0E0C               	movlw	12
  1277  002212  EC20  F017         	call	_lcd_putc
  1278                           
  1279                           ;mainBasicCircuit.c: 150: Column=1;
  1280  002216  0E00               	movlw	0
  1281  002218  6E7F               	movwf	_Column+1,c
  1282  00221A  0E01               	movlw	1
  1283  00221C  6E7E               	movwf	_Column,c
  1284                           
  1285                           ;mainBasicCircuit.c: 151: Line=2;
  1286  00221E  0E00               	movlw	0
  1287  002220  6E7D               	movwf	_Line+1,c
  1288  002222  0E02               	movlw	2
  1289  002224  6E7C               	movwf	_Line,c
  1290                           
  1291                           ;mainBasicCircuit.c: 152: lcd_gotoxy(Column, Line);
  1292  002226  C07C  F00B         	movff	_Line,lcd_gotoxy@y
  1293  00222A  507E               	movf	_Column,w,c
  1294  00222C  EC6F  F017         	call	_lcd_gotoxy
  1295  002230                     l166:
  1296                           
  1297                           ;mainBasicCircuit.c: 153: }
  1298                           ;mainBasicCircuit.c: 156: delay_ms(300);
  1299  002230  0E01               	movlw	1
  1300  002232  6E02               	movwf	delay_ms@n+1,c
  1301  002234  0E2C               	movlw	44
  1302  002236  6E01               	movwf	delay_ms@n,c
  1303  002238  EC28  F018         	call	_delay_ms	;wreg free
  1304  00223C  D746               	goto	l158
  1305  00223E                     __end_of_main:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           prodh	equ	0xFF4
  1312                           prodl	equ	0xFF3
  1313                           intcon	equ	0xFF2
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1l	equ	0xFE1
  1318                           postinc2	equ	0xFDE
  1319                           fsr2h	equ	0xFDA
  1320                           fsr2l	equ	0xFD9
  1321                           status	equ	0xFD8
  1322                           
  1323 ;; *************** function _sprintf *****************
  1324 ;; Defined at:
  1325 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1328 ;;		 -> buffer(32), 
  1329 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1330 ;;		 -> STR_4(3), STR_3(18), STR_2(19), STR_1(16), 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  tmpval          4   94[COMRAM] struct .
  1333 ;;  val             4   88[COMRAM] unsigned long 
  1334 ;;  fval            3  102[COMRAM] unsigned long 
  1335 ;;  prec            2  105[COMRAM] int 
  1336 ;;  width           2  100[COMRAM] int 
  1337 ;;  exp             2   98[COMRAM] int 
  1338 ;;  flag            2   92[COMRAM] unsigned short 
  1339 ;;  len             2   86[COMRAM] unsigned int 
  1340 ;;  ap              2   84[COMRAM] PTR void [1]
  1341 ;;		 -> ?_sprintf(2), 
  1342 ;;  cp              2   82[COMRAM] PTR const unsigned char 
  1343 ;;		 -> sprintf@c(1), 
  1344 ;;  c               1  107[COMRAM] char 
  1345 ;;  d               1    0        unsigned char 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  2   63[COMRAM] int 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1355 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Locals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;      Totals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;Total ram usage:       45 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    3
  1362 ;; This function calls:
  1363 ;;		___awdiv
  1364 ;;		___ftadd
  1365 ;;		___ftge
  1366 ;;		___ftmul
  1367 ;;		___ftneg
  1368 ;;		___ftsub
  1369 ;;		___fttol
  1370 ;;		___lldiv
  1371 ;;		___llmod
  1372 ;;		___lltoft
  1373 ;;		___wmul
  1374 ;;		__div_to_l_
  1375 ;;		__tdiv_to_l_
  1376 ;;		_fround
  1377 ;;		_isdigit
  1378 ;;		_scale
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text1
  1385  0010B0                     __ptext1:
  1386                           	opt stack 0
  1387  0010B0                     _sprintf:
  1388                           	opt stack 27
  1389                           
  1390                           ;doprnt.c: 494: va_list ap;
  1391                           ;doprnt.c: 499: signed char c;
  1392                           ;doprnt.c: 501: int width;
  1393                           ;doprnt.c: 504: int prec;
  1394                           ;doprnt.c: 508: unsigned short flag;
  1395                           ;doprnt.c: 515: char d;
  1396                           ;doprnt.c: 516: double fval;
  1397                           ;doprnt.c: 517: int exp;
  1398                           ;doprnt.c: 523: union {
  1399                           ;doprnt.c: 524: unsigned long vd;
  1400                           ;doprnt.c: 525: double integ;
  1401                           ;doprnt.c: 526: } tmpval;
  1402                           ;doprnt.c: 528: unsigned long val;
  1403                           ;doprnt.c: 529: unsigned len;
  1404                           ;doprnt.c: 530: const char * cp;
  1405                           ;doprnt.c: 533: *ap = __va_start();
  1406                           
  1407                           ;incstack = 0
  1408  0010B0  0E44               	movlw	low (?_sprintf+4)
  1409  0010B2  6E55               	movwf	sprintf@ap,c
  1410  0010B4  0E00               	movlw	high (?_sprintf+4)
  1411  0010B6  6E56               	movwf	sprintf@ap+1,c
  1412                           
  1413                           ;doprnt.c: 536: while(c = *f++) {
  1414  0010B8  EFD7  F00C         	goto	l354
  1415  0010BC                     
  1416                           ;doprnt.c: 538: if(c != '%')
  1417  0010BC  0E25               	movlw	37
  1418  0010BE  186C               	xorwf	sprintf@c,w,c
  1419  0010C0  B4D8               	btfsc	status,2,c
  1420  0010C2  D008               	goto	l272
  1421                           
  1422                           ;doprnt.c: 540: {
  1423                           ;doprnt.c: 541: ((*sp++ = (c)));
  1424  0010C4  C040  FFD9         	movff	sprintf@sp,fsr2l
  1425  0010C8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1426  0010CC  C06C  FFDF         	movff	sprintf@c,indf2
  1427  0010D0  EFD5  F00C         	goto	l3283
  1428  0010D4                     l272:
  1429                           
  1430                           ;doprnt.c: 543: }
  1431                           ;doprnt.c: 546: width = 0;
  1432  0010D4  0E00               	movlw	0
  1433  0010D6  6E66               	movwf	sprintf@width+1,c
  1434  0010D8  0E00               	movlw	0
  1435  0010DA  6E65               	movwf	sprintf@width,c
  1436                           
  1437                           ;doprnt.c: 548: flag = 0;
  1438  0010DC  0E00               	movlw	0
  1439  0010DE  6E5E               	movwf	sprintf@flag+1,c
  1440  0010E0  0E00               	movlw	0
  1441  0010E2  6E5D               	movwf	sprintf@flag,c
  1442                           
  1443                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1444  0010E4  C042  FFF6         	movff	sprintf@f,tblptrl
  1445  0010E8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1446  0010EC                     	if	0	;tblptru may be non-zero
  1447  0010EC                     	endif
  1448  0010EC                     	if	0	;tblptru may be non-zero
  1449  0010EC                     	endif
  1450  0010EC  0008               	tblrd		*
  1451  0010EE  50F5               	movf	tablat,w,c
  1452  0010F0  EC94  F018         	call	_isdigit
  1453  0010F4  A0D8               	btfss	status,0,c
  1454  0010F6  D032               	goto	u2870
  1455                           
  1456                           ;doprnt.c: 598: width = 0;
  1457  0010F8  0E00               	movlw	0
  1458  0010FA  6E66               	movwf	sprintf@width+1,c
  1459  0010FC  0E00               	movlw	0
  1460  0010FE  6E65               	movwf	sprintf@width,c
  1461  001100                     
  1462                           ;doprnt.c: 600: width *= 10;
  1463  001100  C065  F00F         	movff	sprintf@width,___wmul@multiplier
  1464  001104  C066  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1465  001108  0E00               	movlw	0
  1466  00110A  6E12               	movwf	___wmul@multiplicand+1,c
  1467  00110C  0E0A               	movlw	10
  1468  00110E  6E11               	movwf	___wmul@multiplicand,c
  1469  001110  EC15  F018         	call	___wmul	;wreg free
  1470  001114  C00F  F065         	movff	?___wmul,sprintf@width
  1471  001118  C010  F066         	movff	?___wmul+1,sprintf@width+1
  1472                           
  1473                           ;doprnt.c: 601: width += *f++ - '0';
  1474  00111C  0ED0               	movlw	208
  1475  00111E  6E4A               	movwf	??_sprintf& (0+255),c
  1476  001120  0EFF               	movlw	255
  1477  001122  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  1478  001124  C042  FFF6         	movff	sprintf@f,tblptrl
  1479  001128  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1480  00112C                     	if	0	;tblptru may be non-zero
  1481  00112C                     	endif
  1482  00112C                     	if	0	;tblptru may be non-zero
  1483  00112C                     	endif
  1484  00112C  0008               	tblrd		*
  1485  00112E  50F5               	movf	tablat,w,c
  1486  001130  6E4C               	movwf	(??_sprintf+2)& (0+255),c
  1487  001132  6A4D               	clrf	(??_sprintf+3)& (0+255),c
  1488  001134  504A               	movf	??_sprintf,w,c
  1489  001136  264C               	addwf	??_sprintf+2,f,c
  1490  001138  504B               	movf	??_sprintf+1,w,c
  1491  00113A  224D               	addwfc	??_sprintf+3,f,c
  1492  00113C  504C               	movf	??_sprintf+2,w,c
  1493  00113E  2665               	addwf	sprintf@width,f,c
  1494  001140  504D               	movf	??_sprintf+3,w,c
  1495  001142  2266               	addwfc	sprintf@width+1,f,c
  1496  001144  4A42               	infsnz	sprintf@f,f,c
  1497  001146  2A43               	incf	sprintf@f+1,f,c
  1498                           
  1499                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1500  001148  C042  FFF6         	movff	sprintf@f,tblptrl
  1501  00114C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1502  001150                     	if	0	;tblptru may be non-zero
  1503  001150                     	endif
  1504  001150                     	if	0	;tblptru may be non-zero
  1505  001150                     	endif
  1506  001150  0008               	tblrd		*
  1507  001152  50F5               	movf	tablat,w,c
  1508  001154  EC94  F018         	call	_isdigit
  1509  001158  B0D8               	btfsc	status,0,c
  1510  00115A  D7D2               	goto	l274
  1511  00115C                     u2870:
  1512                           
  1513                           ;doprnt.c: 608: }
  1514                           ;doprnt.c: 611: if(*f == '.') {
  1515  00115C  C042  FFF6         	movff	sprintf@f,tblptrl
  1516  001160  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1517  001164                     	if	0	;tblptru may be non-zero
  1518  001164                     	endif
  1519  001164                     	if	0	;tblptru may be non-zero
  1520  001164                     	endif
  1521  001164  0008               	tblrd		*
  1522  001166  50F5               	movf	tablat,w,c
  1523  001168  0A2E               	xorlw	46
  1524  00116A  A4D8               	btfss	status,2,c
  1525  00116C  D02E               	goto	l276
  1526                           
  1527                           ;doprnt.c: 612: flag |= 0x4000;
  1528  00116E  8C5E               	bsf	sprintf@flag+1,6,c
  1529                           
  1530                           ;doprnt.c: 613: f++;
  1531  001170  4A42               	infsnz	sprintf@f,f,c
  1532  001172  2A43               	incf	sprintf@f+1,f,c
  1533                           
  1534                           ;doprnt.c: 620: {
  1535                           ;doprnt.c: 621: prec = 0;
  1536  001174  0E00               	movlw	0
  1537  001176  6E6B               	movwf	sprintf@prec+1,c
  1538  001178  0E00               	movlw	0
  1539  00117A  6E6A               	movwf	sprintf@prec,c
  1540                           
  1541                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1542  00117C  D01B               	goto	l277
  1543  00117E                     
  1544                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1545  00117E  C06A  F00F         	movff	sprintf@prec,___wmul@multiplier
  1546  001182  C06B  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1547  001186  0E00               	movlw	0
  1548  001188  6E12               	movwf	___wmul@multiplicand+1,c
  1549  00118A  0E0A               	movlw	10
  1550  00118C  6E11               	movwf	___wmul@multiplicand,c
  1551  00118E  EC15  F018         	call	___wmul	;wreg free
  1552  001192  C042  FFF6         	movff	sprintf@f,tblptrl
  1553  001196  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1554  00119A                     	if	0	;tblptru may be non-zero
  1555  00119A                     	endif
  1556  00119A                     	if	0	;tblptru may be non-zero
  1557  00119A                     	endif
  1558  00119A  0008               	tblrd		*
  1559  00119C  50F5               	movf	tablat,w,c
  1560  00119E  260F               	addwf	?___wmul,f,c
  1561  0011A0  0E00               	movlw	0
  1562  0011A2  2210               	addwfc	?___wmul+1,f,c
  1563  0011A4  0ED0               	movlw	208
  1564  0011A6  240F               	addwf	?___wmul,w,c
  1565  0011A8  6E6A               	movwf	sprintf@prec,c
  1566  0011AA  0EFF               	movlw	255
  1567  0011AC  2010               	addwfc	?___wmul+1,w,c
  1568  0011AE  6E6B               	movwf	sprintf@prec+1,c
  1569  0011B0  4A42               	infsnz	sprintf@f,f,c
  1570  0011B2  2A43               	incf	sprintf@f+1,f,c
  1571  0011B4                     l277:
  1572  0011B4  C042  FFF6         	movff	sprintf@f,tblptrl
  1573  0011B8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1574  0011BC                     	if	0	;tblptru may be non-zero
  1575  0011BC                     	endif
  1576  0011BC                     	if	0	;tblptru may be non-zero
  1577  0011BC                     	endif
  1578  0011BC  0008               	tblrd		*
  1579  0011BE  50F5               	movf	tablat,w,c
  1580  0011C0  EC94  F018         	call	_isdigit
  1581  0011C4  A0D8               	btfss	status,0,c
  1582  0011C6  D062               	goto	l281
  1583  0011C8  D7DA               	goto	l278
  1584  0011CA                     l276:
  1585                           
  1586                           ;doprnt.c: 626: prec = 0;
  1587  0011CA  0E00               	movlw	0
  1588  0011CC  6E6B               	movwf	sprintf@prec+1,c
  1589  0011CE  0E00               	movlw	0
  1590  0011D0  6E6A               	movwf	sprintf@prec,c
  1591                           
  1592                           ;doprnt.c: 628: flag |= 0x1000;
  1593  0011D2  885E               	bsf	sprintf@flag+1,4,c
  1594                           
  1595                           ;doprnt.c: 630: }
  1596                           ;doprnt.c: 635: switch(c = *f++) {
  1597  0011D4  D05B               	goto	l281
  1598  0011D6                     
  1599                           ;doprnt.c: 663: flag |= 0x400;
  1600  0011D6  845E               	bsf	sprintf@flag+1,2,c
  1601                           
  1602                           ;doprnt.c: 664: break;
  1603  0011D8  D06D               	goto	l285
  1604  0011DA                     
  1605                           ;doprnt.c: 753: if(prec && prec < len)
  1606  0011DA  506A               	movf	sprintf@prec,w,c
  1607  0011DC  106B               	iorwf	sprintf@prec+1,w,c
  1608  0011DE  B4D8               	btfsc	status,2,c
  1609  0011E0  D00A               	goto	l287
  1610  0011E2  5057               	movf	sprintf@len,w,c
  1611  0011E4  5C6A               	subwf	sprintf@prec,w,c
  1612  0011E6  5058               	movf	sprintf@len+1,w,c
  1613  0011E8  586B               	subwfb	sprintf@prec+1,w,c
  1614  0011EA  B0D8               	btfsc	status,0,c
  1615  0011EC  D004               	goto	l287
  1616                           
  1617                           ;doprnt.c: 754: len = prec;
  1618  0011EE  C06A  F057         	movff	sprintf@prec,sprintf@len
  1619  0011F2  C06B  F058         	movff	sprintf@prec+1,sprintf@len+1
  1620  0011F6                     l287:
  1621                           
  1622                           ;doprnt.c: 757: if(width > len)
  1623  0011F6  5065               	movf	sprintf@width,w,c
  1624  0011F8  5C57               	subwf	sprintf@len,w,c
  1625  0011FA  5066               	movf	sprintf@width+1,w,c
  1626  0011FC  5858               	subwfb	sprintf@len+1,w,c
  1627  0011FE  B0D8               	btfsc	status,0,c
  1628  001200  D005               	goto	l288
  1629                           
  1630                           ;doprnt.c: 758: width -= len;
  1631  001202  5057               	movf	sprintf@len,w,c
  1632  001204  5E65               	subwf	sprintf@width,f,c
  1633  001206  5058               	movf	sprintf@len+1,w,c
  1634  001208  5A66               	subwfb	sprintf@width+1,f,c
  1635  00120A  D00D               	goto	l290
  1636  00120C                     l288:
  1637                           
  1638                           ;doprnt.c: 759: else
  1639                           ;doprnt.c: 760: width = 0;
  1640  00120C  0E00               	movlw	0
  1641  00120E  6E66               	movwf	sprintf@width+1,c
  1642  001210  0E00               	movlw	0
  1643  001212  6E65               	movwf	sprintf@width,c
  1644                           
  1645                           ;doprnt.c: 764: while(width--)
  1646  001214  D008               	goto	l290
  1647  001216                     l3047:
  1648                           
  1649                           ;doprnt.c: 765: ((*sp++ = (' ')));
  1650  001216  C040  FFD9         	movff	sprintf@sp,fsr2l
  1651  00121A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1652  00121E  0E20               	movlw	32
  1653  001220  6EDF               	movwf	indf2,c
  1654  001222  4A40               	infsnz	sprintf@sp,f,c
  1655  001224  2A41               	incf	sprintf@sp+1,f,c
  1656  001226                     l290:
  1657  001226  0665               	decf	sprintf@width,f,c
  1658  001228  A0D8               	btfss	status,0,c
  1659  00122A  0666               	decf	sprintf@width+1,f,c
  1660  00122C  2865               	incf	sprintf@width,w,c
  1661  00122E  E1F3               	bnz	l3047
  1662  001230  2866               	incf	sprintf@width+1,w,c
  1663  001232  B4D8               	btfsc	status,2,c
  1664  001234  D00F               	goto	l293
  1665  001236  D7EF               	goto	l291
  1666  001238                     l3053:
  1667                           
  1668                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  1669  001238  C053  FFD9         	movff	sprintf@cp,fsr2l
  1670  00123C  C054  FFDA         	movff	sprintf@cp+1,fsr2h
  1671  001240  C040  FFE1         	movff	sprintf@sp,fsr1l
  1672  001244  C041  FFE2         	movff	sprintf@sp+1,fsr1h
  1673  001248  CFDF FFE7          	movff	indf2,indf1
  1674  00124C  4A53               	infsnz	sprintf@cp,f,c
  1675  00124E  2A54               	incf	sprintf@cp+1,f,c
  1676  001250  4A40               	infsnz	sprintf@sp,f,c
  1677  001252  2A41               	incf	sprintf@sp+1,f,c
  1678  001254                     l293:
  1679  001254  0657               	decf	sprintf@len,f,c
  1680  001256  A0D8               	btfss	status,0,c
  1681  001258  0658               	decf	sprintf@len+1,f,c
  1682  00125A  2857               	incf	sprintf@len,w,c
  1683  00125C  E1ED               	bnz	l3053
  1684  00125E  2858               	incf	sprintf@len+1,w,c
  1685  001260  B4D8               	btfsc	status,2,c
  1686  001262  D3A5               	goto	l354
  1687  001264  D7E9               	goto	l294
  1688  001266                     
  1689                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1690  001266  C055  FFD9         	movff	sprintf@ap,fsr2l
  1691  00126A  C056  FFDA         	movff	sprintf@ap+1,fsr2h
  1692  00126E  50DF               	movf	indf2,w,c
  1693  001270  6E6C               	movwf	sprintf@c,c
  1694  001272  0E02               	movlw	2
  1695  001274  2655               	addwf	sprintf@ap,f,c
  1696  001276  0E00               	movlw	0
  1697  001278  2256               	addwfc	sprintf@ap+1,f,c
  1698  00127A                     
  1699                           ;doprnt.c: 805: cp = (char *)&c;
  1700  00127A  0E6C               	movlw	low sprintf@c
  1701  00127C  6E53               	movwf	sprintf@cp,c
  1702  00127E  0E00               	movlw	high sprintf@c
  1703  001280  6E54               	movwf	sprintf@cp+1,c
  1704                           
  1705                           ;doprnt.c: 806: len = 1;
  1706  001282  0E00               	movlw	0
  1707  001284  6E58               	movwf	sprintf@len+1,c
  1708  001286  0E01               	movlw	1
  1709  001288  6E57               	movwf	sprintf@len,c
  1710                           
  1711                           ;doprnt.c: 807: goto dostring;
  1712  00128A  D7A7               	goto	l286
  1713  00128C                     l281:
  1714  00128C  C042  FFF6         	movff	sprintf@f,tblptrl
  1715  001290  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1716  001294  4A42               	infsnz	sprintf@f,f,c
  1717  001296  2A43               	incf	sprintf@f+1,f,c
  1718  001298                     	if	0	;tblptru may be non-zero
  1719  001298                     	endif
  1720  001298                     	if	0	;tblptru may be non-zero
  1721  001298                     	endif
  1722  001298  0008               	tblrd		*
  1723  00129A  CFF5 F06C          	movff	tablat,sprintf@c
  1724  00129E  506C               	movf	sprintf@c,w,c
  1725                           
  1726                           ; Switch size 1, requested type "space"
  1727                           ; Number of cases is 3, Range of values is 0 to 102
  1728                           ; switch strategies available:
  1729                           ; Name         Instructions Cycles
  1730                           ; simple_byte           10     6 (average)
  1731                           ;	Chosen strategy is simple_byte
  1732  0012A0  0A00               	xorlw	0	; case 0
  1733  0012A2  B4D8               	btfsc	status,2,c
  1734  0012A4  D391               	goto	u3340
  1735  0012A6  0A63               	xorlw	99	; case 99
  1736  0012A8  B4D8               	btfsc	status,2,c
  1737  0012AA  D7DD               	goto	l296
  1738  0012AC  0A05               	xorlw	5	; case 102
  1739  0012AE  B4D8               	btfsc	status,2,c
  1740  0012B0  D792               	goto	l284
  1741  0012B2  D7E3               	goto	l297
  1742  0012B4                     l285:
  1743                           
  1744                           ;doprnt.c: 825: if(flag & (0x700)) {
  1745  0012B4  0E07               	movlw	7
  1746  0012B6  145E               	andwf	sprintf@flag+1,w,c
  1747  0012B8  B4D8               	btfsc	status,2,c
  1748  0012BA  D2EE               	goto	l298
  1749                           
  1750                           ;doprnt.c: 827: if(flag & 0x1000)
  1751  0012BC  A85E               	btfss	sprintf@flag+1,4,c
  1752  0012BE  D004               	goto	l299
  1753                           
  1754                           ;doprnt.c: 829: prec = 6;
  1755  0012C0  0E00               	movlw	0
  1756  0012C2  6E6B               	movwf	sprintf@prec+1,c
  1757  0012C4  0E06               	movlw	6
  1758  0012C6  6E6A               	movwf	sprintf@prec,c
  1759  0012C8                     l299:
  1760                           
  1761                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1762  0012C8  C055  FFD9         	movff	sprintf@ap,fsr2l
  1763  0012CC  C056  FFDA         	movff	sprintf@ap+1,fsr2h
  1764  0012D0  CFDE F067          	movff	postinc2,sprintf@fval
  1765  0012D4  CFDE F068          	movff	postinc2,sprintf@fval+1
  1766  0012D8  CFDD F069          	movff	postdec2,sprintf@fval+2
  1767  0012DC  0E03               	movlw	3
  1768  0012DE  2655               	addwf	sprintf@ap,f,c
  1769  0012E0  0E00               	movlw	0
  1770  0012E2  2256               	addwfc	sprintf@ap+1,f,c
  1771                           
  1772                           ;doprnt.c: 831: if(fval < 0.0) {
  1773  0012E4  AE69               	btfss	sprintf@fval+2,7,c
  1774  0012E6  D010               	goto	l300
  1775                           
  1776                           ;doprnt.c: 832: fval = -fval;
  1777  0012E8  C067  F001         	movff	sprintf@fval,___ftneg@f1
  1778  0012EC  C068  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1779  0012F0  C069  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1780  0012F4  EC3B  F018         	call	___ftneg	;wreg free
  1781  0012F8  C001  F067         	movff	?___ftneg,sprintf@fval
  1782  0012FC  C002  F068         	movff	?___ftneg+1,sprintf@fval+1
  1783  001300  C003  F069         	movff	?___ftneg+2,sprintf@fval+2
  1784                           
  1785                           ;doprnt.c: 833: flag |= 0x03;
  1786  001304  0E03               	movlw	3
  1787  001306  125D               	iorwf	sprintf@flag,f,c
  1788  001308                     l300:
  1789                           
  1790                           ;doprnt.c: 834: }
  1791                           ;doprnt.c: 835: exp = 0;
  1792  001308  0E00               	movlw	0
  1793  00130A  6E64               	movwf	sprintf@exp+1,c
  1794  00130C  0E00               	movlw	0
  1795  00130E  6E63               	movwf	sprintf@exp,c
  1796                           
  1797                           ;doprnt.c: 836: if( fval!=0) {
  1798  001310  5067               	movf	sprintf@fval,w,c
  1799  001312  1068               	iorwf	sprintf@fval+1,w,c
  1800  001314  1069               	iorwf	sprintf@fval+2,w,c
  1801  001316  B4D8               	btfsc	status,2,c
  1802  001318  D083               	goto	l305
  1803                           
  1804                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1805  00131A  0E82               	movlw	130
  1806  00131C  6E4A               	movwf	??_sprintf& (0+255),c
  1807  00131E  0EFF               	movlw	255
  1808  001320  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  1809  001322  C067  F04C         	movff	sprintf@fval,??_sprintf+2
  1810  001326  C068  F04D         	movff	sprintf@fval+1,??_sprintf+3
  1811  00132A  C069  F04E         	movff	sprintf@fval+2,??_sprintf+4
  1812  00132E  C06A  F04F         	movff	sprintf@fval+3,??_sprintf+5
  1813  001332  0E10               	movlw	16
  1814  001334  D005               	goto	u2990
  1815  001336                     u2995:
  1816  001336  90D8               	bcf	status,0,c
  1817  001338  324F               	rrcf	??_sprintf+5,f,c
  1818  00133A  324E               	rrcf	??_sprintf+4,f,c
  1819  00133C  324D               	rrcf	??_sprintf+3,f,c
  1820  00133E  324C               	rrcf	??_sprintf+2,f,c
  1821  001340                     u2990:
  1822  001340  2EE8               	decfsz	wreg,f,c
  1823  001342  D7F9               	goto	u2995
  1824  001344  504C               	movf	??_sprintf+2,w,c
  1825  001346  244A               	addwf	??_sprintf,w,c
  1826  001348  6E63               	movwf	sprintf@exp,c
  1827  00134A  0E00               	movlw	0
  1828  00134C  204B               	addwfc	??_sprintf+1,w,c
  1829  00134E  6E64               	movwf	sprintf@exp+1,c
  1830                           
  1831                           ;doprnt.c: 838: exp--;
  1832  001350  0663               	decf	sprintf@exp,f,c
  1833  001352  A0D8               	btfss	status,0,c
  1834  001354  0664               	decf	sprintf@exp+1,f,c
  1835                           
  1836                           ;doprnt.c: 839: exp *= 3;
  1837  001356  C063  F00F         	movff	sprintf@exp,___wmul@multiplier
  1838  00135A  C064  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1839  00135E  0E00               	movlw	0
  1840  001360  6E12               	movwf	___wmul@multiplicand+1,c
  1841  001362  0E03               	movlw	3
  1842  001364  6E11               	movwf	___wmul@multiplicand,c
  1843  001366  EC15  F018         	call	___wmul	;wreg free
  1844  00136A  C00F  F063         	movff	?___wmul,sprintf@exp
  1845  00136E  C010  F064         	movff	?___wmul+1,sprintf@exp+1
  1846                           
  1847                           ;doprnt.c: 840: exp /= 10;
  1848  001372  C063  F007         	movff	sprintf@exp,___awdiv@dividend
  1849  001376  C064  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1850  00137A  0E00               	movlw	0
  1851  00137C  6E0A               	movwf	___awdiv@divisor+1,c
  1852  00137E  0E0A               	movlw	10
  1853  001380  6E09               	movwf	___awdiv@divisor,c
  1854  001382  EC6F  F015         	call	___awdiv	;wreg free
  1855  001386  C007  F063         	movff	?___awdiv,sprintf@exp
  1856  00138A  C008  F064         	movff	?___awdiv+1,sprintf@exp+1
  1857                           
  1858                           ;doprnt.c: 841: if(exp < 0)
  1859  00138E  AE64               	btfss	sprintf@exp+1,7,c
  1860  001390  D003               	goto	l302
  1861                           
  1862                           ;doprnt.c: 842: exp--;
  1863  001392  0663               	decf	sprintf@exp,f,c
  1864  001394  A0D8               	btfss	status,0,c
  1865  001396  0664               	decf	sprintf@exp+1,f,c
  1866  001398                     l302:
  1867                           
  1868                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1869  001398  5063               	movf	sprintf@exp,w,c
  1870  00139A  0800               	sublw	0
  1871  00139C  ECEB  F00C         	call	_scale
  1872  0013A0  C024  F05F         	movff	?_scale,sprintf@tmpval
  1873  0013A4  C025  F060         	movff	?_scale+1,sprintf@tmpval+1
  1874  0013A8  C026  F061         	movff	?_scale+2,sprintf@tmpval+2
  1875                           
  1876                           ;doprnt.c: 847: tmpval.integ *= fval;
  1877  0013AC  C05F  F015         	movff	sprintf@tmpval,___ftmul@f1
  1878  0013B0  C060  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1879  0013B4  C061  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1880  0013B8  C067  F018         	movff	sprintf@fval,___ftmul@f2
  1881  0013BC  C068  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1882  0013C0  C069  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1883  0013C4  EC9C  F013         	call	___ftmul	;wreg free
  1884  0013C8  C015  F05F         	movff	?___ftmul,sprintf@tmpval
  1885  0013CC  C016  F060         	movff	?___ftmul+1,sprintf@tmpval+1
  1886  0013D0  C017  F061         	movff	?___ftmul+2,sprintf@tmpval+2
  1887                           
  1888                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1889  0013D4  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  1890  0013D8  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1891  0013DC  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1892  0013E0  0E00               	movlw	0
  1893  0013E2  6E04               	movwf	___ftge@ff2,c
  1894  0013E4  0E80               	movlw	128
  1895  0013E6  6E05               	movwf	___ftge@ff2+1,c
  1896  0013E8  0E3F               	movlw	63
  1897  0013EA  6E06               	movwf	___ftge@ff2+2,c
  1898  0013EC  ECE0  F014         	call	___ftge	;wreg free
  1899  0013F0  B0D8               	btfsc	status,0,c
  1900  0013F2  D004               	goto	l303
  1901                           
  1902                           ;doprnt.c: 849: exp--;
  1903  0013F4  0663               	decf	sprintf@exp,f,c
  1904  0013F6  A0D8               	btfss	status,0,c
  1905  0013F8  0664               	decf	sprintf@exp+1,f,c
  1906  0013FA  D012               	goto	l305
  1907  0013FC                     l303:
  1908                           
  1909                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1910  0013FC  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  1911  001400  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1912  001404  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1913  001408  0E00               	movlw	0
  1914  00140A  6E04               	movwf	___ftge@ff2,c
  1915  00140C  0E20               	movlw	32
  1916  00140E  6E05               	movwf	___ftge@ff2+1,c
  1917  001410  0E41               	movlw	65
  1918  001412  6E06               	movwf	___ftge@ff2+2,c
  1919  001414  ECE0  F014         	call	___ftge	;wreg free
  1920  001418  A0D8               	btfss	status,0,c
  1921  00141A  D002               	goto	l305
  1922                           
  1923                           ;doprnt.c: 851: exp++;
  1924  00141C  4A63               	infsnz	sprintf@exp,f,c
  1925  00141E  2A64               	incf	sprintf@exp+1,f,c
  1926  001420                     l305:
  1927                           
  1928                           ;doprnt.c: 852: }
  1929                           ;doprnt.c: 1112: if(prec <= 12)
  1930  001420  BE6B               	btfsc	sprintf@prec+1,7,c
  1931  001422  D006               	goto	u3030
  1932  001424  506B               	movf	sprintf@prec+1,w,c
  1933  001426  E11B               	bnz	l3121
  1934  001428  0E0D               	movlw	13
  1935  00142A  5C6A               	subwf	sprintf@prec,w,c
  1936  00142C  B0D8               	btfsc	status,0,c
  1937  00142E  D017               	goto	l306
  1938  001430                     u3030:
  1939                           
  1940                           ;doprnt.c: 1113: fval += fround(prec);
  1941  001430  C067  F02E         	movff	sprintf@fval,___ftadd@f1
  1942  001434  C068  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1943  001438  C069  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1944  00143C  506A               	movf	sprintf@prec,w,c
  1945  00143E  ECEF  F00E         	call	_fround
  1946  001442  C024  F031         	movff	?_fround,___ftadd@f2
  1947  001446  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1948  00144A  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1949  00144E  EC1F  F011         	call	___ftadd	;wreg free
  1950  001452  C02E  F067         	movff	?___ftadd,sprintf@fval
  1951  001456  C02F  F068         	movff	?___ftadd+1,sprintf@fval+1
  1952  00145A  C030  F069         	movff	?___ftadd+2,sprintf@fval+2
  1953  00145E                     l306:
  1954  00145E                     l3121:
  1955                           
  1956                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1957  00145E  BE64               	btfsc	sprintf@exp+1,7,c
  1958  001460  D006               	goto	u3040
  1959  001462  5064               	movf	sprintf@exp+1,w,c
  1960  001464  E11E               	bnz	l3129
  1961  001466  0E0A               	movlw	10
  1962  001468  5C63               	subwf	sprintf@exp,w,c
  1963  00146A  B0D8               	btfsc	status,0,c
  1964  00146C  D01A               	goto	u3070
  1965  00146E                     u3040:
  1966  00146E  5067               	movf	sprintf@fval,w,c
  1967  001470  1068               	iorwf	sprintf@fval+1,w,c
  1968  001472  1069               	iorwf	sprintf@fval+2,w,c
  1969  001474  B4D8               	btfsc	status,2,c
  1970  001476  D051               	goto	l307
  1971  001478  C067  F02B         	movff	sprintf@fval,___fttol@f1
  1972  00147C  C068  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1973  001480  C069  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1974  001484  EC22  F013         	call	___fttol	;wreg free
  1975  001488  502B               	movf	?___fttol,w,c
  1976  00148A  102C               	iorwf	?___fttol+1,w,c
  1977  00148C  102D               	iorwf	?___fttol+2,w,c
  1978  00148E  102E               	iorwf	?___fttol+3,w,c
  1979  001490  B4D8               	btfsc	status,2,c
  1980  001492  BE64               	btfsc	sprintf@exp+1,7,c
  1981  001494  D042               	goto	l307
  1982  001496  5064               	movf	sprintf@exp+1,w,c
  1983  001498  E104               	bnz	l3129
  1984  00149A  0E02               	movlw	2
  1985  00149C  5C63               	subwf	sprintf@exp,w,c
  1986  00149E  A0D8               	btfss	status,0,c
  1987  0014A0  D03C               	goto	l307
  1988  0014A2                     u3070:
  1989  0014A2                     l3129:
  1990                           
  1991                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1992  0014A2  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  1993  0014A6  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1994  0014AA  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1995  0014AE  0E70               	movlw	112
  1996  0014B0  6E04               	movwf	___ftge@ff2,c
  1997  0014B2  0E89               	movlw	137
  1998  0014B4  6E05               	movwf	___ftge@ff2+1,c
  1999  0014B6  0E40               	movlw	64
  2000  0014B8  6E06               	movwf	___ftge@ff2+2,c
  2001  0014BA  ECE0  F014         	call	___ftge	;wreg free
  2002  0014BE  B0D8               	btfsc	status,0,c
  2003  0014C0  D002               	goto	l310
  2004                           
  2005                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2006  0014C2  0EF7               	movlw	247
  2007  0014C4  D001               	goto	L1
  2008  0014C6                     l310:
  2009                           
  2010                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2011  0014C6  0EF8               	movlw	248
  2012  0014C8                     L1:
  2013  0014C8  2663               	addwf	sprintf@exp,f,c
  2014  0014CA  0EFF               	movlw	255
  2015  0014CC  2264               	addwfc	sprintf@exp+1,f,c
  2016                           
  2017                           ;doprnt.c: 1124: }
  2018                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2019  0014CE  5063               	movf	sprintf@exp,w,c
  2020  0014D0  ECEB  F00C         	call	_scale
  2021  0014D4  C024  F05F         	movff	?_scale,sprintf@tmpval
  2022  0014D8  C025  F060         	movff	?_scale+1,sprintf@tmpval+1
  2023  0014DC  C026  F061         	movff	?_scale+2,sprintf@tmpval+2
  2024                           
  2025                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2026  0014E0  C067  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2027  0014E4  C068  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2028  0014E8  C069  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2029  0014EC  C05F  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2030  0014F0  C060  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2031  0014F4  C061  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2032  0014F8  ECF5  F011         	call	__tdiv_to_l_	;wreg free
  2033  0014FC  C001  F059         	movff	?__tdiv_to_l_,sprintf@val
  2034  001500  C002  F05A         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2035  001504  C003  F05B         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2036  001508  C004  F05C         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2037                           
  2038                           ;doprnt.c: 1129: fval = 0.0;
  2039  00150C  0E00               	movlw	0
  2040  00150E  6E67               	movwf	sprintf@fval,c
  2041  001510  0E00               	movlw	0
  2042  001512  6E68               	movwf	sprintf@fval+1,c
  2043  001514  0E00               	movlw	0
  2044  001516  6E69               	movwf	sprintf@fval+2,c
  2045                           
  2046                           ;doprnt.c: 1130: } else {
  2047  001518  D032               	goto	l316
  2048  00151A                     l307:
  2049                           
  2050                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2051  00151A  C067  F02B         	movff	sprintf@fval,___fttol@f1
  2052  00151E  C068  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2053  001522  C069  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2054  001526  EC22  F013         	call	___fttol	;wreg free
  2055  00152A  C02B  F059         	movff	?___fttol,sprintf@val
  2056  00152E  C02C  F05A         	movff	?___fttol+1,sprintf@val+1
  2057  001532  C02D  F05B         	movff	?___fttol+2,sprintf@val+2
  2058  001536  C02E  F05C         	movff	?___fttol+3,sprintf@val+3
  2059                           
  2060                           ;doprnt.c: 1132: fval -= (double)val;
  2061  00153A  C067  F03A         	movff	sprintf@fval,___ftsub@f1
  2062  00153E  C068  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2063  001542  C069  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2064  001546  C059  F009         	movff	sprintf@val,___lltoft@c
  2065  00154A  C05A  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2066  00154E  C05B  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2067  001552  C05C  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2068  001556  ECF2  F016         	call	___lltoft	;wreg free
  2069  00155A  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2070  00155E  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2071  001562  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2072  001566  EC90  F017         	call	___ftsub	;wreg free
  2073  00156A  C03A  F067         	movff	?___ftsub,sprintf@fval
  2074  00156E  C03B  F068         	movff	?___ftsub+1,sprintf@fval+1
  2075  001572  C03C  F069         	movff	?___ftsub+2,sprintf@fval+2
  2076                           
  2077                           ;doprnt.c: 1133: exp = 0;
  2078  001576  0E00               	movlw	0
  2079  001578  6E64               	movwf	sprintf@exp+1,c
  2080  00157A  0E00               	movlw	0
  2081  00157C  6E63               	movwf	sprintf@exp,c
  2082  00157E                     l316:
  2083                           
  2084                           ;doprnt.c: 1134: }
  2085                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2086  00157E  0E01               	movlw	1
  2087  001580  6E6C               	movwf	sprintf@c,c
  2088  001582                     l3149:
  2089  001582  0E0A               	movlw	10
  2090  001584  186C               	xorwf	sprintf@c,w,c
  2091  001586  B4D8               	btfsc	status,2,c
  2092  001588  D018               	goto	u3110
  2093                           
  2094                           ;doprnt.c: 1137: if(val < dpowers[c])
  2095  00158A  506C               	movf	sprintf@c,w,c
  2096  00158C  0D04               	mullw	4
  2097  00158E  0E01               	movlw	low _dpowers
  2098  001590  24F3               	addwf	prodl,w,c
  2099  001592  6EF6               	movwf	tblptrl,c
  2100  001594  0E10               	movlw	high _dpowers
  2101  001596  20F4               	addwfc	prodh,w,c
  2102  001598  6EF7               	movwf	tblptrh,c
  2103  00159A                     	if	0	;There are less than 3 active tblptr bytes
  2104  00159A                     	endif
  2105  00159A  0009               	tblrd		*+
  2106  00159C  50F5               	movf	tablat,w,c
  2107  00159E  5C59               	subwf	sprintf@val,w,c
  2108  0015A0  0009               	tblrd		*+
  2109  0015A2  50F5               	movf	tablat,w,c
  2110  0015A4  585A               	subwfb	sprintf@val+1,w,c
  2111  0015A6  0009               	tblrd		*+
  2112  0015A8  50F5               	movf	tablat,w,c
  2113  0015AA  585B               	subwfb	sprintf@val+2,w,c
  2114  0015AC  0009               	tblrd		*+
  2115  0015AE  50F5               	movf	tablat,w,c
  2116  0015B0  585C               	subwfb	sprintf@val+3,w,c
  2117  0015B2  A0D8               	btfss	status,0,c
  2118  0015B4  D002               	goto	u3110
  2119                           
  2120                           ;doprnt.c: 1138: break;
  2121  0015B6  2A6C               	incf	sprintf@c,f,c
  2122  0015B8  D7E4               	goto	l3149
  2123  0015BA                     u3110:
  2124                           
  2125                           ;doprnt.c: 1142: width -= prec + c + exp;
  2126  0015BA  C06C  F04A         	movff	sprintf@c,??_sprintf
  2127  0015BE  6A4B               	clrf	(??_sprintf+1)& (0+255),c
  2128  0015C0  BE4A               	btfsc	??_sprintf& (0+255),7,c
  2129  0015C2  064B               	decf	(??_sprintf+1)& (0+255),f,c
  2130  0015C4  506A               	movf	sprintf@prec,w,c
  2131  0015C6  264A               	addwf	??_sprintf,f,c
  2132  0015C8  506B               	movf	sprintf@prec+1,w,c
  2133  0015CA  224B               	addwfc	??_sprintf+1,f,c
  2134  0015CC  5063               	movf	sprintf@exp,w,c
  2135  0015CE  264A               	addwf	??_sprintf,f,c
  2136  0015D0  5064               	movf	sprintf@exp+1,w,c
  2137  0015D2  224B               	addwfc	??_sprintf+1,f,c
  2138  0015D4  504A               	movf	??_sprintf,w,c
  2139  0015D6  5E65               	subwf	sprintf@width,f,c
  2140  0015D8  504B               	movf	??_sprintf+1,w,c
  2141  0015DA  5A66               	subwfb	sprintf@width+1,f,c
  2142                           
  2143                           ;doprnt.c: 1143: if(
  2144                           ;doprnt.c: 1147: prec)
  2145  0015DC  506A               	movf	sprintf@prec,w,c
  2146  0015DE  106B               	iorwf	sprintf@prec+1,w,c
  2147  0015E0  B4D8               	btfsc	status,2,c
  2148  0015E2  D003               	goto	l320
  2149                           
  2150                           ;doprnt.c: 1148: width--;
  2151  0015E4  0665               	decf	sprintf@width,f,c
  2152  0015E6  A0D8               	btfss	status,0,c
  2153  0015E8  0666               	decf	sprintf@width+1,f,c
  2154  0015EA                     l320:
  2155                           
  2156                           ;doprnt.c: 1149: if(flag & 0x03)
  2157  0015EA  0E03               	movlw	3
  2158  0015EC  145D               	andwf	sprintf@flag,w,c
  2159  0015EE  6E4A               	movwf	??_sprintf& (0+255),c
  2160  0015F0  0E00               	movlw	0
  2161  0015F2  145E               	andwf	sprintf@flag+1,w,c
  2162  0015F4  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  2163  0015F6  504A               	movf	??_sprintf,w,c
  2164  0015F8  104B               	iorwf	??_sprintf+1,w,c
  2165  0015FA  B4D8               	btfsc	status,2,c
  2166  0015FC  D00C               	goto	l322
  2167  0015FE  D008               	goto	l3173
  2168  001600                     l3169:
  2169                           
  2170                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2171  001600  C040  FFD9         	movff	sprintf@sp,fsr2l
  2172  001604  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2173  001608  0E20               	movlw	32
  2174  00160A  6EDF               	movwf	indf2,c
  2175  00160C  4A40               	infsnz	sprintf@sp,f,c
  2176  00160E  2A41               	incf	sprintf@sp+1,f,c
  2177  001610                     l3173:
  2178                           
  2179                           ;doprnt.c: 1182: width--;
  2180  001610  0665               	decf	sprintf@width,f,c
  2181  001612  A0D8               	btfss	status,0,c
  2182  001614  0666               	decf	sprintf@width+1,f,c
  2183  001616                     l322:
  2184  001616  BE66               	btfsc	sprintf@width+1,7,c
  2185  001618  D005               	goto	u3140
  2186  00161A  5066               	movf	sprintf@width+1,w,c
  2187  00161C  E1F1               	bnz	l3169
  2188  00161E  0465               	decf	sprintf@width,w,c
  2189  001620  B0D8               	btfsc	status,0,c
  2190  001622  D7EE               	goto	l323
  2191  001624                     u3140:
  2192                           
  2193                           ;doprnt.c: 1183: }
  2194                           ;doprnt.c: 1188: if(flag & 0x03)
  2195  001624  0E03               	movlw	3
  2196  001626  145D               	andwf	sprintf@flag,w,c
  2197  001628  6E4A               	movwf	??_sprintf& (0+255),c
  2198  00162A  0E00               	movlw	0
  2199  00162C  145E               	andwf	sprintf@flag+1,w,c
  2200  00162E  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  2201  001630  504A               	movf	??_sprintf,w,c
  2202  001632  104B               	iorwf	??_sprintf+1,w,c
  2203  001634  B4D8               	btfsc	status,2,c
  2204  001636  D04F               	goto	l326
  2205                           
  2206                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2207  001638  C040  FFD9         	movff	sprintf@sp,fsr2l
  2208  00163C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2209  001640  0E2D               	movlw	45
  2210  001642  D046               	goto	L2
  2211  001644                     
  2212                           ;doprnt.c: 1200: {
  2213                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2214  001644  C059  F001         	movff	sprintf@val,___lldiv@dividend
  2215  001648  C05A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2216  00164C  C05B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2217  001650  C05C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2218  001654  506C               	movf	sprintf@c,w,c
  2219  001656  0D04               	mullw	4
  2220  001658  0E01               	movlw	low _dpowers
  2221  00165A  24F3               	addwf	prodl,w,c
  2222  00165C  6EF6               	movwf	tblptrl,c
  2223  00165E  0E10               	movlw	high _dpowers
  2224  001660  20F4               	addwfc	prodh,w,c
  2225  001662  6EF7               	movwf	tblptrh,c
  2226  001664                     	if	0	;There are less than 3 active tblptr bytes
  2227  001664                     	endif
  2228  001664  0009               	tblrd		*+
  2229  001666  CFF5 F005          	movff	tablat,___lldiv@divisor
  2230  00166A  0009               	tblrd		*+
  2231  00166C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2232  001670  0009               	tblrd		*+
  2233  001672  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2234  001676  000A               	tblrd		*-
  2235  001678  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2236  00167C  ECB1  F015         	call	___lldiv	;wreg free
  2237  001680  C001  F05F         	movff	?___lldiv,sprintf@tmpval
  2238  001684  C002  F060         	movff	?___lldiv+1,sprintf@tmpval+1
  2239  001688  C003  F061         	movff	?___lldiv+2,sprintf@tmpval+2
  2240  00168C  C004  F062         	movff	?___lldiv+3,sprintf@tmpval+3
  2241                           
  2242                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2243  001690  C05F  F001         	movff	sprintf@tmpval,___llmod@dividend
  2244  001694  C060  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2245  001698  C061  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2246  00169C  C062  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2247  0016A0  0E0A               	movlw	10
  2248  0016A2  6E05               	movwf	___llmod@divisor,c
  2249  0016A4  0E00               	movlw	0
  2250  0016A6  6E06               	movwf	___llmod@divisor+1,c
  2251  0016A8  0E00               	movlw	0
  2252  0016AA  6E07               	movwf	___llmod@divisor+2,c
  2253  0016AC  0E00               	movlw	0
  2254  0016AE  6E08               	movwf	___llmod@divisor+3,c
  2255  0016B0  EC2A  F016         	call	___llmod	;wreg free
  2256  0016B4  C001  F05F         	movff	?___llmod,sprintf@tmpval
  2257  0016B8  C002  F060         	movff	?___llmod+1,sprintf@tmpval+1
  2258  0016BC  C003  F061         	movff	?___llmod+2,sprintf@tmpval+2
  2259  0016C0  C004  F062         	movff	?___llmod+3,sprintf@tmpval+3
  2260                           
  2261                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2262  0016C4  505F               	movf	sprintf@tmpval,w,c
  2263  0016C6  0F30               	addlw	48
  2264  0016C8  C040  FFD9         	movff	sprintf@sp,fsr2l
  2265  0016CC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2266  0016D0                     L2:
  2267  0016D0  6EDF               	movwf	indf2,c
  2268  0016D2  4A40               	infsnz	sprintf@sp,f,c
  2269  0016D4  2A41               	incf	sprintf@sp+1,f,c
  2270  0016D6                     l326:
  2271  0016D6  066C               	decf	sprintf@c,f,c
  2272  0016D8  286C               	incf	sprintf@c,w,c
  2273  0016DA  B4D8               	btfsc	status,2,c
  2274  0016DC  D00C               	goto	l329
  2275  0016DE  D7B2               	goto	l327
  2276  0016E0                     l3193:
  2277                           
  2278                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2279  0016E0  C040  FFD9         	movff	sprintf@sp,fsr2l
  2280  0016E4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2281  0016E8  0E30               	movlw	48
  2282  0016EA  6EDF               	movwf	indf2,c
  2283  0016EC  4A40               	infsnz	sprintf@sp,f,c
  2284  0016EE  2A41               	incf	sprintf@sp+1,f,c
  2285                           
  2286                           ;doprnt.c: 1209: exp--;
  2287  0016F0  0663               	decf	sprintf@exp,f,c
  2288  0016F2  A0D8               	btfss	status,0,c
  2289  0016F4  0664               	decf	sprintf@exp+1,f,c
  2290  0016F6                     l329:
  2291  0016F6  BE64               	btfsc	sprintf@exp+1,7,c
  2292  0016F8  D005               	goto	u3170
  2293  0016FA  5064               	movf	sprintf@exp+1,w,c
  2294  0016FC  E1F1               	bnz	l3193
  2295  0016FE  0463               	decf	sprintf@exp,w,c
  2296  001700  B0D8               	btfsc	status,0,c
  2297  001702  D7EE               	goto	l330
  2298  001704                     u3170:
  2299                           
  2300                           ;doprnt.c: 1210: }
  2301                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2302  001704  BE6B               	btfsc	sprintf@prec+1,7,c
  2303  001706  D009               	goto	l332
  2304  001708  506B               	movf	sprintf@prec+1,w,c
  2305  00170A  E104               	bnz	u3180
  2306  00170C  0E09               	movlw	9
  2307  00170E  5C6A               	subwf	sprintf@prec,w,c
  2308  001710  A0D8               	btfss	status,0,c
  2309  001712  D003               	goto	l332
  2310  001714                     u3180:
  2311                           
  2312                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2313  001714  0E08               	movlw	8
  2314  001716  6E6C               	movwf	sprintf@c,c
  2315  001718  D002               	goto	l333
  2316  00171A                     l332:
  2317                           
  2318                           ;doprnt.c: 1213: else
  2319                           ;doprnt.c: 1214: c = prec;
  2320  00171A  C06A  F06C         	movff	sprintf@prec,sprintf@c
  2321  00171E                     l333:
  2322                           
  2323                           ;doprnt.c: 1215: prec -= c;
  2324  00171E  506C               	movf	sprintf@c,w,c
  2325  001720  5E6A               	subwf	sprintf@prec,f,c
  2326  001722  0E00               	movlw	0
  2327  001724  BE6C               	btfsc	sprintf@c,7,c
  2328  001726  0EFF               	movlw	255
  2329  001728  5A6B               	subwfb	sprintf@prec+1,f,c
  2330                           
  2331                           ;doprnt.c: 1219: if(c)
  2332  00172A  506C               	movf	sprintf@c,w,c
  2333  00172C  B4D8               	btfsc	status,2,c
  2334  00172E  D008               	goto	l334
  2335                           
  2336                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2337  001730  C040  FFD9         	movff	sprintf@sp,fsr2l
  2338  001734  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2339  001738  0E2E               	movlw	46
  2340  00173A  6EDF               	movwf	indf2,c
  2341  00173C  4A40               	infsnz	sprintf@sp,f,c
  2342  00173E  2A41               	incf	sprintf@sp+1,f,c
  2343  001740                     l334:
  2344                           
  2345                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2346  001740  506C               	movf	sprintf@c,w,c
  2347  001742  ECEB  F00C         	call	_scale
  2348  001746  C024  F050         	movff	?_scale,_sprintf$1179
  2349  00174A  C025  F051         	movff	?_scale+1,_sprintf$1179+1
  2350  00174E  C026  F052         	movff	?_scale+2,_sprintf$1179+2
  2351                           
  2352                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2353  001752  C067  F018         	movff	sprintf@fval,___ftmul@f2
  2354  001756  C068  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2355  00175A  C069  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2356  00175E  C050  F015         	movff	_sprintf$1179,___ftmul@f1
  2357  001762  C051  F016         	movff	_sprintf$1179+1,___ftmul@f1+1
  2358  001766  C052  F017         	movff	_sprintf$1179+2,___ftmul@f1+2
  2359  00176A  EC9C  F013         	call	___ftmul	;wreg free
  2360  00176E  C015  F02B         	movff	?___ftmul,___fttol@f1
  2361  001772  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2362  001776  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2363  00177A  EC22  F013         	call	___fttol	;wreg free
  2364  00177E  C02B  F059         	movff	?___fttol,sprintf@val
  2365  001782  C02C  F05A         	movff	?___fttol+1,sprintf@val+1
  2366  001786  C02D  F05B         	movff	?___fttol+2,sprintf@val+2
  2367  00178A  C02E  F05C         	movff	?___fttol+3,sprintf@val+3
  2368                           
  2369                           ;doprnt.c: 1228: while(c--) {
  2370  00178E  D06F               	goto	l335
  2371  001790                     
  2372                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2373  001790  C059  F001         	movff	sprintf@val,___lldiv@dividend
  2374  001794  C05A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2375  001798  C05B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2376  00179C  C05C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2377  0017A0  506C               	movf	sprintf@c,w,c
  2378  0017A2  0D04               	mullw	4
  2379  0017A4  0E01               	movlw	low _dpowers
  2380  0017A6  24F3               	addwf	prodl,w,c
  2381  0017A8  6EF6               	movwf	tblptrl,c
  2382  0017AA  0E10               	movlw	high _dpowers
  2383  0017AC  20F4               	addwfc	prodh,w,c
  2384  0017AE  6EF7               	movwf	tblptrh,c
  2385  0017B0                     	if	0	;There are less than 3 active tblptr bytes
  2386  0017B0                     	endif
  2387  0017B0  0009               	tblrd		*+
  2388  0017B2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2389  0017B6  0009               	tblrd		*+
  2390  0017B8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2391  0017BC  0009               	tblrd		*+
  2392  0017BE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2393  0017C2  000A               	tblrd		*-
  2394  0017C4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2395  0017C8  ECB1  F015         	call	___lldiv	;wreg free
  2396  0017CC  C001  F05F         	movff	?___lldiv,sprintf@tmpval
  2397  0017D0  C002  F060         	movff	?___lldiv+1,sprintf@tmpval+1
  2398  0017D4  C003  F061         	movff	?___lldiv+2,sprintf@tmpval+2
  2399  0017D8  C004  F062         	movff	?___lldiv+3,sprintf@tmpval+3
  2400                           
  2401                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2402  0017DC  C05F  F001         	movff	sprintf@tmpval,___llmod@dividend
  2403  0017E0  C060  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2404  0017E4  C061  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2405  0017E8  C062  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2406  0017EC  0E0A               	movlw	10
  2407  0017EE  6E05               	movwf	___llmod@divisor,c
  2408  0017F0  0E00               	movlw	0
  2409  0017F2  6E06               	movwf	___llmod@divisor+1,c
  2410  0017F4  0E00               	movlw	0
  2411  0017F6  6E07               	movwf	___llmod@divisor+2,c
  2412  0017F8  0E00               	movlw	0
  2413  0017FA  6E08               	movwf	___llmod@divisor+3,c
  2414  0017FC  EC2A  F016         	call	___llmod	;wreg free
  2415  001800  C001  F05F         	movff	?___llmod,sprintf@tmpval
  2416  001804  C002  F060         	movff	?___llmod+1,sprintf@tmpval+1
  2417  001808  C003  F061         	movff	?___llmod+2,sprintf@tmpval+2
  2418  00180C  C004  F062         	movff	?___llmod+3,sprintf@tmpval+3
  2419                           
  2420                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2421  001810  505F               	movf	sprintf@tmpval,w,c
  2422  001812  0F30               	addlw	48
  2423  001814  C040  FFD9         	movff	sprintf@sp,fsr2l
  2424  001818  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2425  00181C  6EDF               	movwf	indf2,c
  2426  00181E  4A40               	infsnz	sprintf@sp,f,c
  2427  001820  2A41               	incf	sprintf@sp+1,f,c
  2428                           
  2429                           ;doprnt.c: 1232: val %= dpowers[c];
  2430  001822  C059  F001         	movff	sprintf@val,___llmod@dividend
  2431  001826  C05A  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2432  00182A  C05B  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2433  00182E  C05C  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2434  001832  506C               	movf	sprintf@c,w,c
  2435  001834  0D04               	mullw	4
  2436  001836  0E01               	movlw	low _dpowers
  2437  001838  24F3               	addwf	prodl,w,c
  2438  00183A  6EF6               	movwf	tblptrl,c
  2439  00183C  0E10               	movlw	high _dpowers
  2440  00183E  20F4               	addwfc	prodh,w,c
  2441  001840  6EF7               	movwf	tblptrh,c
  2442  001842                     	if	0	;There are less than 3 active tblptr bytes
  2443  001842                     	endif
  2444  001842  0009               	tblrd		*+
  2445  001844  CFF5 F005          	movff	tablat,___llmod@divisor
  2446  001848  0009               	tblrd		*+
  2447  00184A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2448  00184E  0009               	tblrd		*+
  2449  001850  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2450  001854  000A               	tblrd		*-
  2451  001856  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2452  00185A  EC2A  F016         	call	___llmod	;wreg free
  2453  00185E  C001  F059         	movff	?___llmod,sprintf@val
  2454  001862  C002  F05A         	movff	?___llmod+1,sprintf@val+1
  2455  001866  C003  F05B         	movff	?___llmod+2,sprintf@val+2
  2456  00186A  C004  F05C         	movff	?___llmod+3,sprintf@val+3
  2457  00186E                     l335:
  2458  00186E  066C               	decf	sprintf@c,f,c
  2459  001870  286C               	incf	sprintf@c,w,c
  2460  001872  B4D8               	btfsc	status,2,c
  2461  001874  D00C               	goto	l338
  2462  001876  D78C               	goto	l336
  2463  001878                     
  2464                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2465  001878  C040  FFD9         	movff	sprintf@sp,fsr2l
  2466  00187C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2467  001880  0E30               	movlw	48
  2468  001882  6EDF               	movwf	indf2,c
  2469  001884  4A40               	infsnz	sprintf@sp,f,c
  2470  001886  2A41               	incf	sprintf@sp+1,f,c
  2471                           
  2472                           ;doprnt.c: 1237: prec--;
  2473  001888  066A               	decf	sprintf@prec,f,c
  2474  00188A  A0D8               	btfss	status,0,c
  2475  00188C  066B               	decf	sprintf@prec+1,f,c
  2476  00188E                     l338:
  2477  00188E  506A               	movf	sprintf@prec,w,c
  2478  001890  106B               	iorwf	sprintf@prec+1,w,c
  2479  001892  B4D8               	btfsc	status,2,c
  2480  001894  D08C               	goto	l354
  2481  001896  D7F0               	goto	l339
  2482  001898                     l298:
  2483                           
  2484                           ;doprnt.c: 1246: }
  2485                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2486  001898  506A               	movf	sprintf@prec,w,c
  2487  00189A  106B               	iorwf	sprintf@prec+1,w,c
  2488  00189C  A4D8               	btfss	status,2,c
  2489  00189E  D008               	goto	l341
  2490  0018A0  5059               	movf	sprintf@val,w,c
  2491  0018A2  105A               	iorwf	sprintf@val+1,w,c
  2492  0018A4  105B               	iorwf	sprintf@val+2,w,c
  2493  0018A6  105C               	iorwf	sprintf@val+3,w,c
  2494  0018A8  A4D8               	btfss	status,2,c
  2495  0018AA  D002               	goto	l341
  2496                           
  2497                           ;doprnt.c: 1291: prec++;
  2498  0018AC  4A6A               	infsnz	sprintf@prec,f,c
  2499  0018AE  2A6B               	incf	sprintf@prec+1,f,c
  2500  0018B0                     l341:
  2501                           
  2502                           ;doprnt.c: 1339: if(c < prec)
  2503  0018B0  0E80               	movlw	128
  2504  0018B2  BE6C               	btfsc	sprintf@c,7,c
  2505  0018B4  0E7F               	movlw	127
  2506  0018B6  6E4A               	movwf	??_sprintf& (0+255),c
  2507  0018B8  506A               	movf	sprintf@prec,w,c
  2508  0018BA  5C6C               	subwf	sprintf@c,w,c
  2509  0018BC  506B               	movf	sprintf@prec+1,w,c
  2510  0018BE  0A80               	xorlw	128
  2511  0018C0  584A               	subwfb	??_sprintf& (0+255),w,c
  2512  0018C2  B0D8               	btfsc	status,0,c
  2513  0018C4  D003               	goto	l342
  2514                           
  2515                           ;doprnt.c: 1340: c = prec;
  2516  0018C6  C06A  F06C         	movff	sprintf@prec,sprintf@c
  2517  0018CA  D010               	goto	l344
  2518  0018CC                     l342:
  2519                           
  2520                           ;doprnt.c: 1341: else if(prec < c)
  2521  0018CC  506B               	movf	sprintf@prec+1,w,c
  2522  0018CE  0A80               	xorlw	128
  2523  0018D0  6E4A               	movwf	??_sprintf& (0+255),c
  2524  0018D2  506C               	movf	sprintf@c,w,c
  2525  0018D4  5C6A               	subwf	sprintf@prec,w,c
  2526  0018D6  0E80               	movlw	128
  2527  0018D8  BE6C               	btfsc	sprintf@c,7,c
  2528  0018DA  0E7F               	movlw	127
  2529  0018DC  584A               	subwfb	??_sprintf& (0+255),w,c
  2530  0018DE  B0D8               	btfsc	status,0,c
  2531  0018E0  D005               	goto	l344
  2532                           
  2533                           ;doprnt.c: 1342: prec = c;
  2534  0018E2  506C               	movf	sprintf@c,w,c
  2535  0018E4  6E6A               	movwf	sprintf@prec,c
  2536  0018E6  6A6B               	clrf	sprintf@prec+1,c
  2537  0018E8  BE6A               	btfsc	sprintf@prec,7,c
  2538  0018EA  066B               	decf	sprintf@prec+1,f,c
  2539  0018EC                     l344:
  2540                           
  2541                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2542  0018EC  5065               	movf	sprintf@width,w,c
  2543  0018EE  1066               	iorwf	sprintf@width+1,w,c
  2544  0018F0  B4D8               	btfsc	status,2,c
  2545  0018F2  D00D               	goto	l345
  2546  0018F4  0E03               	movlw	3
  2547  0018F6  145D               	andwf	sprintf@flag,w,c
  2548  0018F8  6E4A               	movwf	??_sprintf& (0+255),c
  2549  0018FA  0E00               	movlw	0
  2550  0018FC  145E               	andwf	sprintf@flag+1,w,c
  2551  0018FE  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  2552  001900  504A               	movf	??_sprintf,w,c
  2553  001902  104B               	iorwf	??_sprintf+1,w,c
  2554  001904  B4D8               	btfsc	status,2,c
  2555  001906  D003               	goto	l345
  2556                           
  2557                           ;doprnt.c: 1346: width--;
  2558  001908  0665               	decf	sprintf@width,f,c
  2559  00190A  A0D8               	btfss	status,0,c
  2560  00190C  0666               	decf	sprintf@width+1,f,c
  2561  00190E                     l345:
  2562                           
  2563                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2564  00190E  AC5E               	btfss	sprintf@flag+1,6,c
  2565  001910  D013               	goto	l348
  2566                           
  2567                           ;doprnt.c: 1349: if(width > prec)
  2568  001912  5065               	movf	sprintf@width,w,c
  2569  001914  5C6A               	subwf	sprintf@prec,w,c
  2570  001916  506B               	movf	sprintf@prec+1,w,c
  2571  001918  0A80               	xorlw	128
  2572  00191A  6E4A               	movwf	??_sprintf& (0+255),c
  2573  00191C  5066               	movf	sprintf@width+1,w,c
  2574  00191E  0A80               	xorlw	128
  2575  001920  584A               	subwfb	??_sprintf& (0+255),w,c
  2576  001922  B0D8               	btfsc	status,0,c
  2577  001924  D005               	goto	l347
  2578                           
  2579                           ;doprnt.c: 1350: width -= prec;
  2580  001926  506A               	movf	sprintf@prec,w,c
  2581  001928  5E65               	subwf	sprintf@width,f,c
  2582  00192A  506B               	movf	sprintf@prec+1,w,c
  2583  00192C  5A66               	subwfb	sprintf@width+1,f,c
  2584  00192E  D004               	goto	l348
  2585  001930                     l347:
  2586                           
  2587                           ;doprnt.c: 1351: else
  2588                           ;doprnt.c: 1352: width = 0;
  2589  001930  0E00               	movlw	0
  2590  001932  6E66               	movwf	sprintf@width+1,c
  2591  001934  0E00               	movlw	0
  2592  001936  6E65               	movwf	sprintf@width,c
  2593  001938                     l348:
  2594                           
  2595                           ;doprnt.c: 1353: }
  2596                           ;doprnt.c: 1381: if(width > c)
  2597  001938  0E80               	movlw	128
  2598  00193A  BE6C               	btfsc	sprintf@c,7,c
  2599  00193C  0E7F               	movlw	127
  2600  00193E  6E4A               	movwf	??_sprintf& (0+255),c
  2601  001940  5065               	movf	sprintf@width,w,c
  2602  001942  5C6C               	subwf	sprintf@c,w,c
  2603  001944  5066               	movf	sprintf@width+1,w,c
  2604  001946  0A80               	xorlw	128
  2605  001948  584A               	subwfb	??_sprintf& (0+255),w,c
  2606  00194A  B0D8               	btfsc	status,0,c
  2607  00194C  D007               	goto	l349
  2608                           
  2609                           ;doprnt.c: 1382: width -= c;
  2610  00194E  506C               	movf	sprintf@c,w,c
  2611  001950  5E65               	subwf	sprintf@width,f,c
  2612  001952  0E00               	movlw	0
  2613  001954  BE6C               	btfsc	sprintf@c,7,c
  2614  001956  0EFF               	movlw	255
  2615  001958  5A66               	subwfb	sprintf@width+1,f,c
  2616  00195A  D004               	goto	l350
  2617  00195C                     l349:
  2618                           
  2619                           ;doprnt.c: 1383: else
  2620                           ;doprnt.c: 1384: width = 0;
  2621  00195C  0E00               	movlw	0
  2622  00195E  6E66               	movwf	sprintf@width+1,c
  2623  001960  0E00               	movlw	0
  2624  001962  6E65               	movwf	sprintf@width,c
  2625  001964                     l350:
  2626                           
  2627                           ;doprnt.c: 1422: {
  2628                           ;doprnt.c: 1424: if(width
  2629                           ;doprnt.c: 1428: )
  2630  001964  5065               	movf	sprintf@width,w,c
  2631  001966  1066               	iorwf	sprintf@width+1,w,c
  2632  001968  B4D8               	btfsc	status,2,c
  2633  00196A  D00F               	goto	u3320
  2634  00196C                     u3310:
  2635                           
  2636                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2637                           
  2638                           ;doprnt.c: 1429: do
  2639  00196C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2640  001970  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2641  001974  0E20               	movlw	32
  2642  001976  6EDF               	movwf	indf2,c
  2643  001978  4A40               	infsnz	sprintf@sp,f,c
  2644  00197A  2A41               	incf	sprintf@sp+1,f,c
  2645                           
  2646                           ;doprnt.c: 1431: while(--width);
  2647  00197C  0665               	decf	sprintf@width,f,c
  2648  00197E  A0D8               	btfss	status,0,c
  2649  001980  0666               	decf	sprintf@width+1,f,c
  2650  001982  5065               	movf	sprintf@width,w,c
  2651  001984  1066               	iorwf	sprintf@width+1,w,c
  2652  001986  A4D8               	btfss	status,2,c
  2653  001988  D7F1               	goto	u3310
  2654  00198A                     u3320:
  2655                           
  2656                           ;doprnt.c: 1438: if(flag & 0x03)
  2657  00198A  0E03               	movlw	3
  2658  00198C  145D               	andwf	sprintf@flag,w,c
  2659  00198E  6E4A               	movwf	??_sprintf& (0+255),c
  2660  001990  0E00               	movlw	0
  2661  001992  145E               	andwf	sprintf@flag+1,w,c
  2662  001994  6E4B               	movwf	(??_sprintf+1)& (0+255),c
  2663  001996  504A               	movf	??_sprintf,w,c
  2664  001998  104B               	iorwf	??_sprintf+1,w,c
  2665  00199A  B4D8               	btfsc	status,2,c
  2666  00199C  D008               	goto	l354
  2667                           
  2668                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2669  00199E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2670  0019A2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2671  0019A6  0E2D               	movlw	45
  2672  0019A8  6EDF               	movwf	indf2,c
  2673  0019AA                     l3283:
  2674  0019AA  4A40               	infsnz	sprintf@sp,f,c
  2675  0019AC  2A41               	incf	sprintf@sp+1,f,c
  2676  0019AE                     l354:
  2677  0019AE  C042  FFF6         	movff	sprintf@f,tblptrl
  2678  0019B2  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2679  0019B6  4A42               	infsnz	sprintf@f,f,c
  2680  0019B8  2A43               	incf	sprintf@f+1,f,c
  2681  0019BA                     	if	0	;tblptru may be non-zero
  2682  0019BA                     	endif
  2683  0019BA                     	if	0	;tblptru may be non-zero
  2684  0019BA                     	endif
  2685  0019BA  0008               	tblrd		*
  2686  0019BC  CFF5 F06C          	movff	tablat,sprintf@c
  2687  0019C0  506C               	movf	sprintf@c,w,c
  2688  0019C2  A4D8               	btfss	status,2,c
  2689  0019C4  EF5E  F008         	goto	l271
  2690  0019C8                     u3340:
  2691                           
  2692                           ;doprnt.c: 1538: *sp = 0;
  2693                           
  2694                           ;doprnt.c: 1469: }
  2695                           ;doprnt.c: 1533: }
  2696                           ;doprnt.c: 1535: alldone:
  2697  0019C8  C040  FFD9         	movff	sprintf@sp,fsr2l
  2698  0019CC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2699  0019D0  0E00               	movlw	0
  2700  0019D2  6EDF               	movwf	indf2,c
  2701  0019D4  0012               	return	
  2702  0019D6                     __end_of_sprintf:
  2703                           	opt stack 0
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           intcon	equ	0xFF2
  2711                           postinc0	equ	0xFEE
  2712                           wreg	equ	0xFE8
  2713                           indf1	equ	0xFE7
  2714                           postdec1	equ	0xFE5
  2715                           fsr1h	equ	0xFE2
  2716                           fsr1l	equ	0xFE1
  2717                           indf2	equ	0xFDF
  2718                           postinc2	equ	0xFDE
  2719                           postdec2	equ	0xFDD
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _scale *****************
  2725 ;; Defined at:
  2726 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  scl             1    wreg     char 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  scl             1   41[COMRAM] char 
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  3   35[COMRAM] char 
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2740 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;Total ram usage:        7 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    2
  2747 ;; This function calls:
  2748 ;;		___awdiv
  2749 ;;		___awmod
  2750 ;;		___ftmul
  2751 ;;		___wmul
  2752 ;; This function is called by:
  2753 ;;		_sprintf
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text2
  2758  0019D6                     __ptext2:
  2759                           	opt stack 0
  2760  0019D6                     _scale:
  2761                           	opt stack 27
  2762                           
  2763                           ;incstack = 0
  2764                           ;scale@scl stored from wreg
  2765  0019D6  6E2A               	movwf	scale@scl,c
  2766                           
  2767                           ;doprnt.c: 428: if(scl < 0) {
  2768  0019D8  AE2A               	btfss	scale@scl,7,c
  2769  0019DA  D101               	goto	l260
  2770                           
  2771                           ;doprnt.c: 429: scl = -scl;
  2772  0019DC  6C2A               	negf	scale@scl,c
  2773                           
  2774                           ;doprnt.c: 430: if(scl>=110)
  2775  0019DE  502A               	movf	scale@scl,w,c
  2776  0019E0  0A80               	xorlw	128
  2777  0019E2  0F12               	addlw	-238
  2778  0019E4  A0D8               	btfss	status,0,c
  2779  0019E6  D091               	goto	l261
  2780                           
  2781                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2782  0019E8  0E00               	movlw	0
  2783  0019EA  6E12               	movwf	___wmul@multiplicand+1,c
  2784  0019EC  0E03               	movlw	3
  2785  0019EE  6E11               	movwf	___wmul@multiplicand,c
  2786  0019F0  0E00               	movlw	0
  2787  0019F2  6E0A               	movwf	___awdiv@divisor+1,c
  2788  0019F4  0E0A               	movlw	10
  2789  0019F6  6E09               	movwf	___awdiv@divisor,c
  2790  0019F8  0E00               	movlw	0
  2791  0019FA  6E04               	movwf	___awmod@divisor+1,c
  2792  0019FC  0E64               	movlw	100
  2793  0019FE  6E03               	movwf	___awmod@divisor,c
  2794  001A00  502A               	movf	scale@scl,w,c
  2795  001A02  6E01               	movwf	___awmod@dividend,c
  2796  001A04  6A02               	clrf	___awmod@dividend+1,c
  2797  001A06  BE01               	btfsc	___awmod@dividend,7,c
  2798  001A08  0602               	decf	___awmod@dividend+1,f,c
  2799  001A0A  ECF2  F015         	call	___awmod	;wreg free
  2800  001A0E  C001  F007         	movff	?___awmod,___awdiv@dividend
  2801  001A12  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2802  001A16  EC6F  F015         	call	___awdiv	;wreg free
  2803  001A1A  0E09               	movlw	9
  2804  001A1C  2407               	addwf	?___awdiv,w,c
  2805  001A1E  6E0F               	movwf	___wmul@multiplier,c
  2806  001A20  0E00               	movlw	0
  2807  001A22  2008               	addwfc	?___awdiv+1,w,c
  2808  001A24  6E10               	movwf	___wmul@multiplier+1,c
  2809  001A26  EC15  F018         	call	___wmul	;wreg free
  2810  001A2A  0E50               	movlw	low __npowers_
  2811  001A2C  240F               	addwf	?___wmul,w,c
  2812  001A2E  6EF6               	movwf	tblptrl,c
  2813  001A30  0E10               	movlw	high __npowers_
  2814  001A32  2010               	addwfc	?___wmul+1,w,c
  2815  001A34  6EF7               	movwf	tblptrh,c
  2816  001A36                     	if	0	;There are less than 3 active tblptr bytes
  2817  001A36                     	endif
  2818  001A36  0009               	tblrd		*+
  2819  001A38  CFF5 F018          	movff	tablat,___ftmul@f2
  2820  001A3C  0009               	tblrd		*+
  2821  001A3E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2822  001A42  000A               	tblrd		*-
  2823  001A44  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2824  001A48  0E00               	movlw	0
  2825  001A4A  6E0A               	movwf	___awdiv@divisor+1,c
  2826  001A4C  0E64               	movlw	100
  2827  001A4E  6E09               	movwf	___awdiv@divisor,c
  2828  001A50  502A               	movf	scale@scl,w,c
  2829  001A52  6E07               	movwf	___awdiv@dividend,c
  2830  001A54  6A08               	clrf	___awdiv@dividend+1,c
  2831  001A56  BE07               	btfsc	___awdiv@dividend,7,c
  2832  001A58  0608               	decf	___awdiv@dividend+1,f,c
  2833  001A5A  EC6F  F015         	call	___awdiv	;wreg free
  2834  001A5E  0E12               	movlw	18
  2835  001A60  2407               	addwf	?___awdiv,w,c
  2836  001A62  6E0F               	movwf	___wmul@multiplier,c
  2837  001A64  0E00               	movlw	0
  2838  001A66  2008               	addwfc	?___awdiv+1,w,c
  2839  001A68  6E10               	movwf	___wmul@multiplier+1,c
  2840  001A6A  0E00               	movlw	0
  2841  001A6C  6E12               	movwf	___wmul@multiplicand+1,c
  2842  001A6E  0E03               	movlw	3
  2843  001A70  6E11               	movwf	___wmul@multiplicand,c
  2844  001A72  EC15  F018         	call	___wmul	;wreg free
  2845  001A76  0E50               	movlw	low __npowers_
  2846  001A78  240F               	addwf	?___wmul,w,c
  2847  001A7A  6EF6               	movwf	tblptrl,c
  2848  001A7C  0E10               	movlw	high __npowers_
  2849  001A7E  2010               	addwfc	?___wmul+1,w,c
  2850  001A80  6EF7               	movwf	tblptrh,c
  2851  001A82                     	if	0	;There are less than 3 active tblptr bytes
  2852  001A82                     	endif
  2853  001A82  0009               	tblrd		*+
  2854  001A84  CFF5 F015          	movff	tablat,___ftmul@f1
  2855  001A88  0009               	tblrd		*+
  2856  001A8A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2857  001A8E  000A               	tblrd		*-
  2858  001A90  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2859  001A94  EC9C  F013         	call	___ftmul	;wreg free
  2860  001A98  C015  F027         	movff	?___ftmul,_scale$1178
  2861  001A9C  C016  F028         	movff	?___ftmul+1,_scale$1178+1
  2862  001AA0  C017  F029         	movff	?___ftmul+2,_scale$1178+2
  2863                           
  2864                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2865  001AA4  C027  F015         	movff	_scale$1178,___ftmul@f1
  2866  001AA8  C028  F016         	movff	_scale$1178+1,___ftmul@f1+1
  2867  001AAC  C029  F017         	movff	_scale$1178+2,___ftmul@f1+2
  2868  001AB0  0E00               	movlw	0
  2869  001AB2  6E12               	movwf	___wmul@multiplicand+1,c
  2870  001AB4  0E03               	movlw	3
  2871  001AB6  6E11               	movwf	___wmul@multiplicand,c
  2872  001AB8  0E00               	movlw	0
  2873  001ABA  6E04               	movwf	___awmod@divisor+1,c
  2874  001ABC  0E0A               	movlw	10
  2875  001ABE  6E03               	movwf	___awmod@divisor,c
  2876  001AC0  502A               	movf	scale@scl,w,c
  2877  001AC2  6E01               	movwf	___awmod@dividend,c
  2878  001AC4  6A02               	clrf	___awmod@dividend+1,c
  2879  001AC6  BE01               	btfsc	___awmod@dividend,7,c
  2880  001AC8  0602               	decf	___awmod@dividend+1,f,c
  2881  001ACA  ECF2  F015         	call	___awmod	;wreg free
  2882  001ACE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2883  001AD2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2884  001AD6  EC15  F018         	call	___wmul	;wreg free
  2885  001ADA  0E50               	movlw	low __npowers_
  2886  001ADC  240F               	addwf	?___wmul,w,c
  2887  001ADE  6EF6               	movwf	tblptrl,c
  2888  001AE0  0E10               	movlw	high __npowers_
  2889  001AE2  2010               	addwfc	?___wmul+1,w,c
  2890  001AE4  6EF7               	movwf	tblptrh,c
  2891  001AE6                     	if	0	;There are less than 3 active tblptr bytes
  2892  001AE6                     	endif
  2893  001AE6  0009               	tblrd		*+
  2894  001AE8  CFF5 F018          	movff	tablat,___ftmul@f2
  2895  001AEC  0009               	tblrd		*+
  2896  001AEE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2897  001AF2  000A               	tblrd		*-
  2898  001AF4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2899  001AF8  EC9C  F013         	call	___ftmul	;wreg free
  2900  001AFC  C015  F024         	movff	?___ftmul,?_scale
  2901  001B00  C016  F025         	movff	?___ftmul+1,?_scale+1
  2902  001B04  C017  F026         	movff	?___ftmul+2,?_scale+2
  2903  001B08  0012               	return	
  2904  001B0A                     l261:
  2905                           
  2906                           ;doprnt.c: 432: else if(scl > 10)
  2907  001B0A  502A               	movf	scale@scl,w,c
  2908  001B0C  0A80               	xorlw	128
  2909  001B0E  0F75               	addlw	-139
  2910  001B10  A0D8               	btfss	status,0,c
  2911  001B12  D053               	goto	l264
  2912                           
  2913                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2914  001B14  0E00               	movlw	0
  2915  001B16  6E0A               	movwf	___awdiv@divisor+1,c
  2916  001B18  0E0A               	movlw	10
  2917  001B1A  6E09               	movwf	___awdiv@divisor,c
  2918  001B1C  502A               	movf	scale@scl,w,c
  2919  001B1E  6E07               	movwf	___awdiv@dividend,c
  2920  001B20  6A08               	clrf	___awdiv@dividend+1,c
  2921  001B22  BE07               	btfsc	___awdiv@dividend,7,c
  2922  001B24  0608               	decf	___awdiv@dividend+1,f,c
  2923  001B26  EC6F  F015         	call	___awdiv	;wreg free
  2924  001B2A  0E09               	movlw	9
  2925  001B2C  2407               	addwf	?___awdiv,w,c
  2926  001B2E  6E0F               	movwf	___wmul@multiplier,c
  2927  001B30  0E00               	movlw	0
  2928  001B32  2008               	addwfc	?___awdiv+1,w,c
  2929  001B34  6E10               	movwf	___wmul@multiplier+1,c
  2930  001B36  0E00               	movlw	0
  2931  001B38  6E12               	movwf	___wmul@multiplicand+1,c
  2932  001B3A  0E03               	movlw	3
  2933  001B3C  6E11               	movwf	___wmul@multiplicand,c
  2934  001B3E  EC15  F018         	call	___wmul	;wreg free
  2935  001B42  0E50               	movlw	low __npowers_
  2936  001B44  240F               	addwf	?___wmul,w,c
  2937  001B46  6EF6               	movwf	tblptrl,c
  2938  001B48  0E10               	movlw	high __npowers_
  2939  001B4A  2010               	addwfc	?___wmul+1,w,c
  2940  001B4C  6EF7               	movwf	tblptrh,c
  2941  001B4E                     	if	0	;There are less than 3 active tblptr bytes
  2942  001B4E                     	endif
  2943  001B4E  0009               	tblrd		*+
  2944  001B50  CFF5 F015          	movff	tablat,___ftmul@f1
  2945  001B54  0009               	tblrd		*+
  2946  001B56  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2947  001B5A  000A               	tblrd		*-
  2948  001B5C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2949  001B60  0E00               	movlw	0
  2950  001B62  6E12               	movwf	___wmul@multiplicand+1,c
  2951  001B64  0E03               	movlw	3
  2952  001B66  6E11               	movwf	___wmul@multiplicand,c
  2953  001B68  0E00               	movlw	0
  2954  001B6A  6E04               	movwf	___awmod@divisor+1,c
  2955  001B6C  0E0A               	movlw	10
  2956  001B6E  6E03               	movwf	___awmod@divisor,c
  2957  001B70  502A               	movf	scale@scl,w,c
  2958  001B72  6E01               	movwf	___awmod@dividend,c
  2959  001B74  6A02               	clrf	___awmod@dividend+1,c
  2960  001B76  BE01               	btfsc	___awmod@dividend,7,c
  2961  001B78  0602               	decf	___awmod@dividend+1,f,c
  2962  001B7A  ECF2  F015         	call	___awmod	;wreg free
  2963  001B7E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2964  001B82  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2965  001B86  EC15  F018         	call	___wmul	;wreg free
  2966  001B8A  0E50               	movlw	low __npowers_
  2967  001B8C  240F               	addwf	?___wmul,w,c
  2968  001B8E  6EF6               	movwf	tblptrl,c
  2969  001B90  0E10               	movlw	high __npowers_
  2970  001B92  2010               	addwfc	?___wmul+1,w,c
  2971  001B94  6EF7               	movwf	tblptrh,c
  2972  001B96                     	if	0	;There are less than 3 active tblptr bytes
  2973  001B96                     	endif
  2974  001B96  0009               	tblrd		*+
  2975  001B98  CFF5 F018          	movff	tablat,___ftmul@f2
  2976  001B9C  0009               	tblrd		*+
  2977  001B9E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2978  001BA2  000A               	tblrd		*-
  2979  001BA4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2980  001BA8  EC9C  F013         	call	___ftmul	;wreg free
  2981  001BAC  C015  F024         	movff	?___ftmul,?_scale
  2982  001BB0  C016  F025         	movff	?___ftmul+1,?_scale+1
  2983  001BB4  C017  F026         	movff	?___ftmul+2,?_scale+2
  2984  001BB8  0012               	return	
  2985  001BBA                     l264:
  2986                           
  2987                           ;doprnt.c: 434: return _npowers_[scl];
  2988  001BBA  502A               	movf	scale@scl,w,c
  2989  001BBC  0D03               	mullw	3
  2990  001BBE  0E50               	movlw	low __npowers_
  2991  001BC0  24F3               	addwf	prodl,w,c
  2992  001BC2  6EF6               	movwf	tblptrl,c
  2993  001BC4  0E10               	movlw	high __npowers_
  2994  001BC6  20F4               	addwfc	prodh,w,c
  2995  001BC8  6EF7               	movwf	tblptrh,c
  2996  001BCA                     	if	0	;There are less than 3 active tblptr bytes
  2997  001BCA                     	endif
  2998  001BCA  0009               	tblrd		*+
  2999  001BCC  CFF5 F024          	movff	tablat,?_scale
  3000  001BD0  0009               	tblrd		*+
  3001  001BD2  CFF5 F025          	movff	tablat,?_scale+1
  3002  001BD6  000A               	tblrd		*-
  3003  001BD8  CFF5 F026          	movff	tablat,?_scale+2
  3004  001BDC  0012               	return	
  3005  001BDE                     l260:
  3006                           
  3007                           ;doprnt.c: 435: }
  3008                           ;doprnt.c: 436: if(scl>=110)
  3009  001BDE  502A               	movf	scale@scl,w,c
  3010  001BE0  0A80               	xorlw	128
  3011  001BE2  0F12               	addlw	-238
  3012  001BE4  A0D8               	btfss	status,0,c
  3013  001BE6  D091               	goto	l265
  3014                           
  3015                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3016  001BE8  0E00               	movlw	0
  3017  001BEA  6E12               	movwf	___wmul@multiplicand+1,c
  3018  001BEC  0E03               	movlw	3
  3019  001BEE  6E11               	movwf	___wmul@multiplicand,c
  3020  001BF0  0E00               	movlw	0
  3021  001BF2  6E0A               	movwf	___awdiv@divisor+1,c
  3022  001BF4  0E0A               	movlw	10
  3023  001BF6  6E09               	movwf	___awdiv@divisor,c
  3024  001BF8  0E00               	movlw	0
  3025  001BFA  6E04               	movwf	___awmod@divisor+1,c
  3026  001BFC  0E64               	movlw	100
  3027  001BFE  6E03               	movwf	___awmod@divisor,c
  3028  001C00  502A               	movf	scale@scl,w,c
  3029  001C02  6E01               	movwf	___awmod@dividend,c
  3030  001C04  6A02               	clrf	___awmod@dividend+1,c
  3031  001C06  BE01               	btfsc	___awmod@dividend,7,c
  3032  001C08  0602               	decf	___awmod@dividend+1,f,c
  3033  001C0A  ECF2  F015         	call	___awmod	;wreg free
  3034  001C0E  C001  F007         	movff	?___awmod,___awdiv@dividend
  3035  001C12  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3036  001C16  EC6F  F015         	call	___awdiv	;wreg free
  3037  001C1A  0E09               	movlw	9
  3038  001C1C  2407               	addwf	?___awdiv,w,c
  3039  001C1E  6E0F               	movwf	___wmul@multiplier,c
  3040  001C20  0E00               	movlw	0
  3041  001C22  2008               	addwfc	?___awdiv+1,w,c
  3042  001C24  6E10               	movwf	___wmul@multiplier+1,c
  3043  001C26  EC15  F018         	call	___wmul	;wreg free
  3044  001C2A  0E29               	movlw	low __powers_
  3045  001C2C  240F               	addwf	?___wmul,w,c
  3046  001C2E  6EF6               	movwf	tblptrl,c
  3047  001C30  0E10               	movlw	high __powers_
  3048  001C32  2010               	addwfc	?___wmul+1,w,c
  3049  001C34  6EF7               	movwf	tblptrh,c
  3050  001C36                     	if	0	;There are less than 3 active tblptr bytes
  3051  001C36                     	endif
  3052  001C36  0009               	tblrd		*+
  3053  001C38  CFF5 F018          	movff	tablat,___ftmul@f2
  3054  001C3C  0009               	tblrd		*+
  3055  001C3E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3056  001C42  000A               	tblrd		*-
  3057  001C44  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3058  001C48  0E00               	movlw	0
  3059  001C4A  6E0A               	movwf	___awdiv@divisor+1,c
  3060  001C4C  0E64               	movlw	100
  3061  001C4E  6E09               	movwf	___awdiv@divisor,c
  3062  001C50  502A               	movf	scale@scl,w,c
  3063  001C52  6E07               	movwf	___awdiv@dividend,c
  3064  001C54  6A08               	clrf	___awdiv@dividend+1,c
  3065  001C56  BE07               	btfsc	___awdiv@dividend,7,c
  3066  001C58  0608               	decf	___awdiv@dividend+1,f,c
  3067  001C5A  EC6F  F015         	call	___awdiv	;wreg free
  3068  001C5E  0E12               	movlw	18
  3069  001C60  2407               	addwf	?___awdiv,w,c
  3070  001C62  6E0F               	movwf	___wmul@multiplier,c
  3071  001C64  0E00               	movlw	0
  3072  001C66  2008               	addwfc	?___awdiv+1,w,c
  3073  001C68  6E10               	movwf	___wmul@multiplier+1,c
  3074  001C6A  0E00               	movlw	0
  3075  001C6C  6E12               	movwf	___wmul@multiplicand+1,c
  3076  001C6E  0E03               	movlw	3
  3077  001C70  6E11               	movwf	___wmul@multiplicand,c
  3078  001C72  EC15  F018         	call	___wmul	;wreg free
  3079  001C76  0E29               	movlw	low __powers_
  3080  001C78  240F               	addwf	?___wmul,w,c
  3081  001C7A  6EF6               	movwf	tblptrl,c
  3082  001C7C  0E10               	movlw	high __powers_
  3083  001C7E  2010               	addwfc	?___wmul+1,w,c
  3084  001C80  6EF7               	movwf	tblptrh,c
  3085  001C82                     	if	0	;There are less than 3 active tblptr bytes
  3086  001C82                     	endif
  3087  001C82  0009               	tblrd		*+
  3088  001C84  CFF5 F015          	movff	tablat,___ftmul@f1
  3089  001C88  0009               	tblrd		*+
  3090  001C8A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3091  001C8E  000A               	tblrd		*-
  3092  001C90  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3093  001C94  EC9C  F013         	call	___ftmul	;wreg free
  3094  001C98  C015  F027         	movff	?___ftmul,_scale$1178
  3095  001C9C  C016  F028         	movff	?___ftmul+1,_scale$1178+1
  3096  001CA0  C017  F029         	movff	?___ftmul+2,_scale$1178+2
  3097                           
  3098                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3099  001CA4  C027  F015         	movff	_scale$1178,___ftmul@f1
  3100  001CA8  C028  F016         	movff	_scale$1178+1,___ftmul@f1+1
  3101  001CAC  C029  F017         	movff	_scale$1178+2,___ftmul@f1+2
  3102  001CB0  0E00               	movlw	0
  3103  001CB2  6E12               	movwf	___wmul@multiplicand+1,c
  3104  001CB4  0E03               	movlw	3
  3105  001CB6  6E11               	movwf	___wmul@multiplicand,c
  3106  001CB8  0E00               	movlw	0
  3107  001CBA  6E04               	movwf	___awmod@divisor+1,c
  3108  001CBC  0E0A               	movlw	10
  3109  001CBE  6E03               	movwf	___awmod@divisor,c
  3110  001CC0  502A               	movf	scale@scl,w,c
  3111  001CC2  6E01               	movwf	___awmod@dividend,c
  3112  001CC4  6A02               	clrf	___awmod@dividend+1,c
  3113  001CC6  BE01               	btfsc	___awmod@dividend,7,c
  3114  001CC8  0602               	decf	___awmod@dividend+1,f,c
  3115  001CCA  ECF2  F015         	call	___awmod	;wreg free
  3116  001CCE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3117  001CD2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3118  001CD6  EC15  F018         	call	___wmul	;wreg free
  3119  001CDA  0E29               	movlw	low __powers_
  3120  001CDC  240F               	addwf	?___wmul,w,c
  3121  001CDE  6EF6               	movwf	tblptrl,c
  3122  001CE0  0E10               	movlw	high __powers_
  3123  001CE2  2010               	addwfc	?___wmul+1,w,c
  3124  001CE4  6EF7               	movwf	tblptrh,c
  3125  001CE6                     	if	0	;There are less than 3 active tblptr bytes
  3126  001CE6                     	endif
  3127  001CE6  0009               	tblrd		*+
  3128  001CE8  CFF5 F018          	movff	tablat,___ftmul@f2
  3129  001CEC  0009               	tblrd		*+
  3130  001CEE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3131  001CF2  000A               	tblrd		*-
  3132  001CF4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3133  001CF8  EC9C  F013         	call	___ftmul	;wreg free
  3134  001CFC  C015  F024         	movff	?___ftmul,?_scale
  3135  001D00  C016  F025         	movff	?___ftmul+1,?_scale+1
  3136  001D04  C017  F026         	movff	?___ftmul+2,?_scale+2
  3137  001D08  0012               	return	
  3138  001D0A                     l265:
  3139                           
  3140                           ;doprnt.c: 438: else if(scl > 10)
  3141  001D0A  502A               	movf	scale@scl,w,c
  3142  001D0C  0A80               	xorlw	128
  3143  001D0E  0F75               	addlw	-139
  3144  001D10  A0D8               	btfss	status,0,c
  3145  001D12  D053               	goto	l267
  3146                           
  3147                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3148  001D14  0E00               	movlw	0
  3149  001D16  6E0A               	movwf	___awdiv@divisor+1,c
  3150  001D18  0E0A               	movlw	10
  3151  001D1A  6E09               	movwf	___awdiv@divisor,c
  3152  001D1C  502A               	movf	scale@scl,w,c
  3153  001D1E  6E07               	movwf	___awdiv@dividend,c
  3154  001D20  6A08               	clrf	___awdiv@dividend+1,c
  3155  001D22  BE07               	btfsc	___awdiv@dividend,7,c
  3156  001D24  0608               	decf	___awdiv@dividend+1,f,c
  3157  001D26  EC6F  F015         	call	___awdiv	;wreg free
  3158  001D2A  0E09               	movlw	9
  3159  001D2C  2407               	addwf	?___awdiv,w,c
  3160  001D2E  6E0F               	movwf	___wmul@multiplier,c
  3161  001D30  0E00               	movlw	0
  3162  001D32  2008               	addwfc	?___awdiv+1,w,c
  3163  001D34  6E10               	movwf	___wmul@multiplier+1,c
  3164  001D36  0E00               	movlw	0
  3165  001D38  6E12               	movwf	___wmul@multiplicand+1,c
  3166  001D3A  0E03               	movlw	3
  3167  001D3C  6E11               	movwf	___wmul@multiplicand,c
  3168  001D3E  EC15  F018         	call	___wmul	;wreg free
  3169  001D42  0E29               	movlw	low __powers_
  3170  001D44  240F               	addwf	?___wmul,w,c
  3171  001D46  6EF6               	movwf	tblptrl,c
  3172  001D48  0E10               	movlw	high __powers_
  3173  001D4A  2010               	addwfc	?___wmul+1,w,c
  3174  001D4C  6EF7               	movwf	tblptrh,c
  3175  001D4E                     	if	0	;There are less than 3 active tblptr bytes
  3176  001D4E                     	endif
  3177  001D4E  0009               	tblrd		*+
  3178  001D50  CFF5 F015          	movff	tablat,___ftmul@f1
  3179  001D54  0009               	tblrd		*+
  3180  001D56  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3181  001D5A  000A               	tblrd		*-
  3182  001D5C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3183  001D60  0E00               	movlw	0
  3184  001D62  6E12               	movwf	___wmul@multiplicand+1,c
  3185  001D64  0E03               	movlw	3
  3186  001D66  6E11               	movwf	___wmul@multiplicand,c
  3187  001D68  0E00               	movlw	0
  3188  001D6A  6E04               	movwf	___awmod@divisor+1,c
  3189  001D6C  0E0A               	movlw	10
  3190  001D6E  6E03               	movwf	___awmod@divisor,c
  3191  001D70  502A               	movf	scale@scl,w,c
  3192  001D72  6E01               	movwf	___awmod@dividend,c
  3193  001D74  6A02               	clrf	___awmod@dividend+1,c
  3194  001D76  BE01               	btfsc	___awmod@dividend,7,c
  3195  001D78  0602               	decf	___awmod@dividend+1,f,c
  3196  001D7A  ECF2  F015         	call	___awmod	;wreg free
  3197  001D7E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3198  001D82  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3199  001D86  EC15  F018         	call	___wmul	;wreg free
  3200  001D8A  0E29               	movlw	low __powers_
  3201  001D8C  240F               	addwf	?___wmul,w,c
  3202  001D8E  6EF6               	movwf	tblptrl,c
  3203  001D90  0E10               	movlw	high __powers_
  3204  001D92  2010               	addwfc	?___wmul+1,w,c
  3205  001D94  6EF7               	movwf	tblptrh,c
  3206  001D96                     	if	0	;There are less than 3 active tblptr bytes
  3207  001D96                     	endif
  3208  001D96  0009               	tblrd		*+
  3209  001D98  CFF5 F018          	movff	tablat,___ftmul@f2
  3210  001D9C  0009               	tblrd		*+
  3211  001D9E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3212  001DA2  000A               	tblrd		*-
  3213  001DA4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3214  001DA8  EC9C  F013         	call	___ftmul	;wreg free
  3215  001DAC  C015  F024         	movff	?___ftmul,?_scale
  3216  001DB0  C016  F025         	movff	?___ftmul+1,?_scale+1
  3217  001DB4  C017  F026         	movff	?___ftmul+2,?_scale+2
  3218  001DB8  0012               	return	
  3219  001DBA                     l267:
  3220                           
  3221                           ;doprnt.c: 440: return _powers_[scl];
  3222  001DBA  502A               	movf	scale@scl,w,c
  3223  001DBC  0D03               	mullw	3
  3224  001DBE  0E29               	movlw	low __powers_
  3225  001DC0  24F3               	addwf	prodl,w,c
  3226  001DC2  6EF6               	movwf	tblptrl,c
  3227  001DC4  0E10               	movlw	high __powers_
  3228  001DC6  20F4               	addwfc	prodh,w,c
  3229  001DC8  6EF7               	movwf	tblptrh,c
  3230  001DCA                     	if	0	;There are less than 3 active tblptr bytes
  3231  001DCA                     	endif
  3232  001DCA  0009               	tblrd		*+
  3233  001DCC  CFF5 F024          	movff	tablat,?_scale
  3234  001DD0  0009               	tblrd		*+
  3235  001DD2  CFF5 F025          	movff	tablat,?_scale+1
  3236  001DD6  000A               	tblrd		*-
  3237  001DD8  CFF5 F026          	movff	tablat,?_scale+2
  3238  001DDC  0012               	return	
  3239  001DDE                     __end_of_scale:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           indf1	equ	0xFE7
  3251                           postdec1	equ	0xFE5
  3252                           fsr1h	equ	0xFE2
  3253                           fsr1l	equ	0xFE1
  3254                           indf2	equ	0xFDF
  3255                           postinc2	equ	0xFDE
  3256                           postdec2	equ	0xFDD
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261 ;; *************** function _isdigit *****************
  3262 ;; Defined at:
  3263 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  c               1    wreg     unsigned char 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;  c               1    2[COMRAM] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;		None               void
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        3 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_sprintf
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text3
  3291  003128                     __ptext3:
  3292                           	opt stack 0
  3293  003128                     _isdigit:
  3294                           	opt stack 29
  3295                           
  3296                           ;incstack = 0
  3297                           ;isdigit@c stored from wreg
  3298  003128  6E03               	movwf	isdigit@c,c
  3299  00312A  0E00               	movlw	0
  3300  00312C  6E02               	movwf	_isdigit$827,c
  3301  00312E  0E3A               	movlw	58
  3302  003130  6003               	cpfslt	isdigit@c,c
  3303  003132  D005               	goto	l720
  3304  003134  0E2F               	movlw	47
  3305  003136  6403               	cpfsgt	isdigit@c,c
  3306  003138  D002               	goto	l720
  3307  00313A  0E01               	movlw	1
  3308  00313C  6E02               	movwf	_isdigit$827,c
  3309  00313E                     l720:
  3310  00313E  C002  F001         	movff	_isdigit$827,??_isdigit
  3311  003142  3001               	rrcf	??_isdigit,w,c
  3312  003144  0012               	return	
  3313  003146                     __end_of_isdigit:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           indf1	equ	0xFE7
  3325                           postdec1	equ	0xFE5
  3326                           fsr1h	equ	0xFE2
  3327                           fsr1l	equ	0xFE1
  3328                           indf2	equ	0xFDF
  3329                           postinc2	equ	0xFDE
  3330                           postdec2	equ	0xFDD
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _fround *****************
  3336 ;; Defined at:
  3337 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  prec            1    wreg     unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  prec            1   44[COMRAM] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  3   35[COMRAM] unsigned char 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3351 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;Total ram usage:       10 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    2
  3358 ;; This function calls:
  3359 ;;		___awdiv
  3360 ;;		___awmod
  3361 ;;		___ftmul
  3362 ;;		___wmul
  3363 ;; This function is called by:
  3364 ;;		_sprintf
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text4
  3369  001DDE                     __ptext4:
  3370                           	opt stack 0
  3371  001DDE                     _fround:
  3372                           	opt stack 27
  3373                           
  3374                           ;incstack = 0
  3375                           ;fround@prec stored from wreg
  3376  001DDE  6E2D               	movwf	fround@prec,c
  3377                           
  3378                           ;doprnt.c: 413: if(prec>=110)
  3379  001DE0  0E6D               	movlw	109
  3380  001DE2  642D               	cpfsgt	fround@prec,c
  3381  001DE4  D09F               	goto	l254
  3382                           
  3383                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3384  001DE6  0E00               	movlw	0
  3385  001DE8  6E12               	movwf	___wmul@multiplicand+1,c
  3386  001DEA  0E03               	movlw	3
  3387  001DEC  6E11               	movwf	___wmul@multiplicand,c
  3388  001DEE  0E00               	movlw	0
  3389  001DF0  6E0A               	movwf	___awdiv@divisor+1,c
  3390  001DF2  0E0A               	movlw	10
  3391  001DF4  6E09               	movwf	___awdiv@divisor,c
  3392  001DF6  0E00               	movlw	0
  3393  001DF8  6E04               	movwf	___awmod@divisor+1,c
  3394  001DFA  0E64               	movlw	100
  3395  001DFC  6E03               	movwf	___awmod@divisor,c
  3396  001DFE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3397  001E02  6A02               	clrf	___awmod@dividend+1,c
  3398  001E04  ECF2  F015         	call	___awmod	;wreg free
  3399  001E08  C001  F007         	movff	?___awmod,___awdiv@dividend
  3400  001E0C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3401  001E10  EC6F  F015         	call	___awdiv	;wreg free
  3402  001E14  0E09               	movlw	9
  3403  001E16  2407               	addwf	?___awdiv,w,c
  3404  001E18  6E0F               	movwf	___wmul@multiplier,c
  3405  001E1A  0E00               	movlw	0
  3406  001E1C  2008               	addwfc	?___awdiv+1,w,c
  3407  001E1E  6E10               	movwf	___wmul@multiplier+1,c
  3408  001E20  EC15  F018         	call	___wmul	;wreg free
  3409  001E24  0E50               	movlw	low __npowers_
  3410  001E26  240F               	addwf	?___wmul,w,c
  3411  001E28  6EF6               	movwf	tblptrl,c
  3412  001E2A  0E10               	movlw	high __npowers_
  3413  001E2C  2010               	addwfc	?___wmul+1,w,c
  3414  001E2E  6EF7               	movwf	tblptrh,c
  3415  001E30                     	if	0	;There are less than 3 active tblptr bytes
  3416  001E30                     	endif
  3417  001E30  0009               	tblrd		*+
  3418  001E32  CFF5 F018          	movff	tablat,___ftmul@f2
  3419  001E36  0009               	tblrd		*+
  3420  001E38  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3421  001E3C  000A               	tblrd		*-
  3422  001E3E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3423  001E42  0E00               	movlw	0
  3424  001E44  6E0A               	movwf	___awdiv@divisor+1,c
  3425  001E46  0E64               	movlw	100
  3426  001E48  6E09               	movwf	___awdiv@divisor,c
  3427  001E4A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3428  001E4E  6A08               	clrf	___awdiv@dividend+1,c
  3429  001E50  EC6F  F015         	call	___awdiv	;wreg free
  3430  001E54  0E12               	movlw	18
  3431  001E56  2407               	addwf	?___awdiv,w,c
  3432  001E58  6E0F               	movwf	___wmul@multiplier,c
  3433  001E5A  0E00               	movlw	0
  3434  001E5C  2008               	addwfc	?___awdiv+1,w,c
  3435  001E5E  6E10               	movwf	___wmul@multiplier+1,c
  3436  001E60  0E00               	movlw	0
  3437  001E62  6E12               	movwf	___wmul@multiplicand+1,c
  3438  001E64  0E03               	movlw	3
  3439  001E66  6E11               	movwf	___wmul@multiplicand,c
  3440  001E68  EC15  F018         	call	___wmul	;wreg free
  3441  001E6C  0E50               	movlw	low __npowers_
  3442  001E6E  240F               	addwf	?___wmul,w,c
  3443  001E70  6EF6               	movwf	tblptrl,c
  3444  001E72  0E10               	movlw	high __npowers_
  3445  001E74  2010               	addwfc	?___wmul+1,w,c
  3446  001E76  6EF7               	movwf	tblptrh,c
  3447  001E78                     	if	0	;There are less than 3 active tblptr bytes
  3448  001E78                     	endif
  3449  001E78  0009               	tblrd		*+
  3450  001E7A  CFF5 F015          	movff	tablat,___ftmul@f1
  3451  001E7E  0009               	tblrd		*+
  3452  001E80  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3453  001E84  000A               	tblrd		*-
  3454  001E86  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3455  001E8A  EC9C  F013         	call	___ftmul	;wreg free
  3456  001E8E  C015  F02A         	movff	?___ftmul,_fround$1176
  3457  001E92  C016  F02B         	movff	?___ftmul+1,_fround$1176+1
  3458  001E96  C017  F02C         	movff	?___ftmul+2,_fround$1176+2
  3459                           
  3460                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3461  001E9A  0E00               	movlw	0
  3462  001E9C  6E12               	movwf	___wmul@multiplicand+1,c
  3463  001E9E  0E03               	movlw	3
  3464  001EA0  6E11               	movwf	___wmul@multiplicand,c
  3465  001EA2  0E00               	movlw	0
  3466  001EA4  6E04               	movwf	___awmod@divisor+1,c
  3467  001EA6  0E0A               	movlw	10
  3468  001EA8  6E03               	movwf	___awmod@divisor,c
  3469  001EAA  C02D  F001         	movff	fround@prec,___awmod@dividend
  3470  001EAE  6A02               	clrf	___awmod@dividend+1,c
  3471  001EB0  ECF2  F015         	call	___awmod	;wreg free
  3472  001EB4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3473  001EB8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3474  001EBC  EC15  F018         	call	___wmul	;wreg free
  3475  001EC0  0E50               	movlw	low __npowers_
  3476  001EC2  240F               	addwf	?___wmul,w,c
  3477  001EC4  6EF6               	movwf	tblptrl,c
  3478  001EC6  0E10               	movlw	high __npowers_
  3479  001EC8  2010               	addwfc	?___wmul+1,w,c
  3480  001ECA  6EF7               	movwf	tblptrh,c
  3481  001ECC                     	if	0	;There are less than 3 active tblptr bytes
  3482  001ECC                     	endif
  3483  001ECC  0009               	tblrd		*+
  3484  001ECE  CFF5 F018          	movff	tablat,___ftmul@f2
  3485  001ED2  0009               	tblrd		*+
  3486  001ED4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3487  001ED8  000A               	tblrd		*-
  3488  001EDA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3489  001EDE  C02A  F015         	movff	_fround$1176,___ftmul@f1
  3490  001EE2  C02B  F016         	movff	_fround$1176+1,___ftmul@f1+1
  3491  001EE6  C02C  F017         	movff	_fround$1176+2,___ftmul@f1+2
  3492  001EEA  EC9C  F013         	call	___ftmul	;wreg free
  3493  001EEE  C015  F027         	movff	?___ftmul,_fround$1177
  3494  001EF2  C016  F028         	movff	?___ftmul+1,_fround$1177+1
  3495  001EF6  C017  F029         	movff	?___ftmul+2,_fround$1177+2
  3496                           
  3497                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3498  001EFA  C027  F015         	movff	_fround$1177,___ftmul@f1
  3499  001EFE  C028  F016         	movff	_fround$1177+1,___ftmul@f1+1
  3500  001F02  C029  F017         	movff	_fround$1177+2,___ftmul@f1+2
  3501  001F06  0E00               	movlw	0
  3502  001F08  6E18               	movwf	___ftmul@f2,c
  3503  001F0A  0E00               	movlw	0
  3504  001F0C  6E19               	movwf	___ftmul@f2+1,c
  3505  001F0E  0E3F               	movlw	63
  3506  001F10  6E1A               	movwf	___ftmul@f2+2,c
  3507  001F12  EC9C  F013         	call	___ftmul	;wreg free
  3508  001F16  C015  F024         	movff	?___ftmul,?_fround
  3509  001F1A  C016  F025         	movff	?___ftmul+1,?_fround+1
  3510  001F1E  C017  F026         	movff	?___ftmul+2,?_fround+2
  3511  001F22  0012               	return	
  3512  001F24                     l254:
  3513                           
  3514                           ;doprnt.c: 415: else if(prec > 10)
  3515  001F24  0E0A               	movlw	10
  3516  001F26  642D               	cpfsgt	fround@prec,c
  3517  001F28  D063               	goto	l257
  3518                           
  3519                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3520  001F2A  0E00               	movlw	0
  3521  001F2C  6E12               	movwf	___wmul@multiplicand+1,c
  3522  001F2E  0E03               	movlw	3
  3523  001F30  6E11               	movwf	___wmul@multiplicand,c
  3524  001F32  0E00               	movlw	0
  3525  001F34  6E04               	movwf	___awmod@divisor+1,c
  3526  001F36  0E0A               	movlw	10
  3527  001F38  6E03               	movwf	___awmod@divisor,c
  3528  001F3A  C02D  F001         	movff	fround@prec,___awmod@dividend
  3529  001F3E  6A02               	clrf	___awmod@dividend+1,c
  3530  001F40  ECF2  F015         	call	___awmod	;wreg free
  3531  001F44  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3532  001F48  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3533  001F4C  EC15  F018         	call	___wmul	;wreg free
  3534  001F50  0E50               	movlw	low __npowers_
  3535  001F52  240F               	addwf	?___wmul,w,c
  3536  001F54  6EF6               	movwf	tblptrl,c
  3537  001F56  0E10               	movlw	high __npowers_
  3538  001F58  2010               	addwfc	?___wmul+1,w,c
  3539  001F5A  6EF7               	movwf	tblptrh,c
  3540  001F5C                     	if	0	;There are less than 3 active tblptr bytes
  3541  001F5C                     	endif
  3542  001F5C  0009               	tblrd		*+
  3543  001F5E  CFF5 F018          	movff	tablat,___ftmul@f2
  3544  001F62  0009               	tblrd		*+
  3545  001F64  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3546  001F68  000A               	tblrd		*-
  3547  001F6A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3548  001F6E  0E00               	movlw	0
  3549  001F70  6E0A               	movwf	___awdiv@divisor+1,c
  3550  001F72  0E0A               	movlw	10
  3551  001F74  6E09               	movwf	___awdiv@divisor,c
  3552  001F76  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3553  001F7A  6A08               	clrf	___awdiv@dividend+1,c
  3554  001F7C  EC6F  F015         	call	___awdiv	;wreg free
  3555  001F80  0E09               	movlw	9
  3556  001F82  2407               	addwf	?___awdiv,w,c
  3557  001F84  6E0F               	movwf	___wmul@multiplier,c
  3558  001F86  0E00               	movlw	0
  3559  001F88  2008               	addwfc	?___awdiv+1,w,c
  3560  001F8A  6E10               	movwf	___wmul@multiplier+1,c
  3561  001F8C  0E00               	movlw	0
  3562  001F8E  6E12               	movwf	___wmul@multiplicand+1,c
  3563  001F90  0E03               	movlw	3
  3564  001F92  6E11               	movwf	___wmul@multiplicand,c
  3565  001F94  EC15  F018         	call	___wmul	;wreg free
  3566  001F98  0E50               	movlw	low __npowers_
  3567  001F9A  240F               	addwf	?___wmul,w,c
  3568  001F9C  6EF6               	movwf	tblptrl,c
  3569  001F9E  0E10               	movlw	high __npowers_
  3570  001FA0  2010               	addwfc	?___wmul+1,w,c
  3571  001FA2  6EF7               	movwf	tblptrh,c
  3572  001FA4                     	if	0	;There are less than 3 active tblptr bytes
  3573  001FA4                     	endif
  3574  001FA4  0009               	tblrd		*+
  3575  001FA6  CFF5 F015          	movff	tablat,___ftmul@f1
  3576  001FAA  0009               	tblrd		*+
  3577  001FAC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3578  001FB0  000A               	tblrd		*-
  3579  001FB2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3580  001FB6  EC9C  F013         	call	___ftmul	;wreg free
  3581  001FBA  C015  F02A         	movff	?___ftmul,_fround$1176
  3582  001FBE  C016  F02B         	movff	?___ftmul+1,_fround$1176+1
  3583  001FC2  C017  F02C         	movff	?___ftmul+2,_fround$1176+2
  3584                           
  3585                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3586  001FC6  C02A  F015         	movff	_fround$1176,___ftmul@f1
  3587  001FCA  C02B  F016         	movff	_fround$1176+1,___ftmul@f1+1
  3588  001FCE  C02C  F017         	movff	_fround$1176+2,___ftmul@f1+2
  3589  001FD2  0E00               	movlw	0
  3590  001FD4  6E18               	movwf	___ftmul@f2,c
  3591  001FD6  0E00               	movlw	0
  3592  001FD8  6E19               	movwf	___ftmul@f2+1,c
  3593  001FDA  0E3F               	movlw	63
  3594  001FDC  6E1A               	movwf	___ftmul@f2+2,c
  3595  001FDE  EC9C  F013         	call	___ftmul	;wreg free
  3596  001FE2  C015  F024         	movff	?___ftmul,?_fround
  3597  001FE6  C016  F025         	movff	?___ftmul+1,?_fround+1
  3598  001FEA  C017  F026         	movff	?___ftmul+2,?_fround+2
  3599  001FEE  0012               	return	
  3600  001FF0                     l257:
  3601                           
  3602                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3603  001FF0  502D               	movf	fround@prec,w,c
  3604  001FF2  0D03               	mullw	3
  3605  001FF4  0E50               	movlw	low __npowers_
  3606  001FF6  24F3               	addwf	prodl,w,c
  3607  001FF8  6EF6               	movwf	tblptrl,c
  3608  001FFA  0E10               	movlw	high __npowers_
  3609  001FFC  20F4               	addwfc	prodh,w,c
  3610  001FFE  6EF7               	movwf	tblptrh,c
  3611  002000                     	if	0	;There are less than 3 active tblptr bytes
  3612  002000                     	endif
  3613  002000  0009               	tblrd		*+
  3614  002002  CFF5 F015          	movff	tablat,___ftmul@f1
  3615  002006  0009               	tblrd		*+
  3616  002008  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3617  00200C  000A               	tblrd		*-
  3618  00200E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3619  002012  0E00               	movlw	0
  3620  002014  6E18               	movwf	___ftmul@f2,c
  3621  002016  0E00               	movlw	0
  3622  002018  6E19               	movwf	___ftmul@f2+1,c
  3623  00201A  0E3F               	movlw	63
  3624  00201C  6E1A               	movwf	___ftmul@f2+2,c
  3625  00201E  EC9C  F013         	call	___ftmul	;wreg free
  3626  002022  C015  F024         	movff	?___ftmul,?_fround
  3627  002026  C016  F025         	movff	?___ftmul+1,?_fround+1
  3628  00202A  C017  F026         	movff	?___ftmul+2,?_fround+2
  3629  00202E  0012               	return	
  3630  002030                     __end_of_fround:
  3631                           	opt stack 0
  3632                           tblptru	equ	0xFF8
  3633                           tblptrh	equ	0xFF7
  3634                           tblptrl	equ	0xFF6
  3635                           tablat	equ	0xFF5
  3636                           prodh	equ	0xFF4
  3637                           prodl	equ	0xFF3
  3638                           intcon	equ	0xFF2
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           indf1	equ	0xFE7
  3642                           postdec1	equ	0xFE5
  3643                           fsr1h	equ	0xFE2
  3644                           fsr1l	equ	0xFE1
  3645                           indf2	equ	0xFDF
  3646                           postinc2	equ	0xFDE
  3647                           postdec2	equ	0xFDD
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function ___awmod *****************
  3653 ;; Defined at:
  3654 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  dividend        2    0[COMRAM] int 
  3657 ;;  divisor         2    2[COMRAM] int 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  sign            1    5[COMRAM] unsigned char 
  3660 ;;  counter         1    4[COMRAM] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    0[COMRAM] int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;Total ram usage:        6 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_fround
  3680 ;;		_scale
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text5
  3685  002BE4                     __ptext5:
  3686                           	opt stack 0
  3687  002BE4                     ___awmod:
  3688                           	opt stack 28
  3689                           
  3690                           ;incstack = 0
  3691  002BE4  0E00               	movlw	0
  3692  002BE6  6E06               	movwf	___awmod@sign,c
  3693  002BE8  AE02               	btfss	___awmod@dividend+1,7,c
  3694  002BEA  D006               	goto	l537
  3695  002BEC  6C01               	negf	___awmod@dividend,c
  3696  002BEE  1E02               	comf	___awmod@dividend+1,f,c
  3697  002BF0  B0D8               	btfsc	status,0,c
  3698  002BF2  2A02               	incf	___awmod@dividend+1,f,c
  3699  002BF4  0E01               	movlw	1
  3700  002BF6  6E06               	movwf	___awmod@sign,c
  3701  002BF8                     l537:
  3702  002BF8  AE04               	btfss	___awmod@divisor+1,7,c
  3703  002BFA  D004               	goto	l538
  3704  002BFC  6C03               	negf	___awmod@divisor,c
  3705  002BFE  1E04               	comf	___awmod@divisor+1,f,c
  3706  002C00  B0D8               	btfsc	status,0,c
  3707  002C02  2A04               	incf	___awmod@divisor+1,f,c
  3708  002C04                     l538:
  3709  002C04  5003               	movf	___awmod@divisor,w,c
  3710  002C06  1004               	iorwf	___awmod@divisor+1,w,c
  3711  002C08  B4D8               	btfsc	status,2,c
  3712  002C0A  D018               	goto	l545
  3713  002C0C  0E01               	movlw	1
  3714  002C0E  6E05               	movwf	___awmod@counter,c
  3715  002C10  D004               	goto	l540
  3716  002C12  90D8               	bcf	status,0,c
  3717  002C14  3603               	rlcf	___awmod@divisor,f,c
  3718  002C16  3604               	rlcf	___awmod@divisor+1,f,c
  3719  002C18  2A05               	incf	___awmod@counter,f,c
  3720  002C1A                     l540:
  3721  002C1A  AE04               	btfss	___awmod@divisor+1,7,c
  3722  002C1C  D7FA               	goto	l541
  3723  002C1E                     u2240:
  3724  002C1E  5003               	movf	___awmod@divisor,w,c
  3725  002C20  5C01               	subwf	___awmod@dividend,w,c
  3726  002C22  5004               	movf	___awmod@divisor+1,w,c
  3727  002C24  5802               	subwfb	___awmod@dividend+1,w,c
  3728  002C26  A0D8               	btfss	status,0,c
  3729  002C28  D004               	goto	l544
  3730  002C2A  5003               	movf	___awmod@divisor,w,c
  3731  002C2C  5E01               	subwf	___awmod@dividend,f,c
  3732  002C2E  5004               	movf	___awmod@divisor+1,w,c
  3733  002C30  5A02               	subwfb	___awmod@dividend+1,f,c
  3734  002C32                     l544:
  3735  002C32  90D8               	bcf	status,0,c
  3736  002C34  3204               	rrcf	___awmod@divisor+1,f,c
  3737  002C36  3203               	rrcf	___awmod@divisor,f,c
  3738  002C38  2E05               	decfsz	___awmod@counter,f,c
  3739  002C3A  D7F1               	goto	u2240
  3740  002C3C                     l545:
  3741  002C3C  5006               	movf	___awmod@sign,w,c
  3742  002C3E  B4D8               	btfsc	status,2,c
  3743  002C40  D004               	goto	l546
  3744  002C42  6C01               	negf	___awmod@dividend,c
  3745  002C44  1E02               	comf	___awmod@dividend+1,f,c
  3746  002C46  B0D8               	btfsc	status,0,c
  3747  002C48  2A02               	incf	___awmod@dividend+1,f,c
  3748  002C4A                     l546:
  3749  002C4A  C001  F001         	movff	___awmod@dividend,?___awmod
  3750  002C4E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3751  002C52  0012               	return	
  3752  002C54                     __end_of___awmod:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           indf1	equ	0xFE7
  3764                           postdec1	equ	0xFE5
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           fsr2h	equ	0xFDA
  3771                           fsr2l	equ	0xFD9
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function ___awdiv *****************
  3775 ;; Defined at:
  3776 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;  dividend        2    6[COMRAM] int 
  3779 ;;  divisor         2    8[COMRAM] int 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  quotient        2   12[COMRAM] int 
  3782 ;;  sign            1   11[COMRAM] unsigned char 
  3783 ;;  counter         1   10[COMRAM] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  2    6[COMRAM] int 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3793 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;Total ram usage:        8 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_fround
  3803 ;;		_scale
  3804 ;;		_sprintf
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text6
  3809  002ADE                     __ptext6:
  3810                           	opt stack 0
  3811  002ADE                     ___awdiv:
  3812                           	opt stack 28
  3813                           
  3814                           ;incstack = 0
  3815  002ADE  0E00               	movlw	0
  3816  002AE0  6E0C               	movwf	___awdiv@sign,c
  3817  002AE2  AE0A               	btfss	___awdiv@divisor+1,7,c
  3818  002AE4  D006               	goto	l524
  3819  002AE6  6C09               	negf	___awdiv@divisor,c
  3820  002AE8  1E0A               	comf	___awdiv@divisor+1,f,c
  3821  002AEA  B0D8               	btfsc	status,0,c
  3822  002AEC  2A0A               	incf	___awdiv@divisor+1,f,c
  3823  002AEE  0E01               	movlw	1
  3824  002AF0  6E0C               	movwf	___awdiv@sign,c
  3825  002AF2                     l524:
  3826  002AF2  AE08               	btfss	___awdiv@dividend+1,7,c
  3827  002AF4  D006               	goto	l525
  3828  002AF6  6C07               	negf	___awdiv@dividend,c
  3829  002AF8  1E08               	comf	___awdiv@dividend+1,f,c
  3830  002AFA  B0D8               	btfsc	status,0,c
  3831  002AFC  2A08               	incf	___awdiv@dividend+1,f,c
  3832  002AFE  0E01               	movlw	1
  3833  002B00  1A0C               	xorwf	___awdiv@sign,f,c
  3834  002B02                     l525:
  3835  002B02  0E00               	movlw	0
  3836  002B04  6E0E               	movwf	___awdiv@quotient+1,c
  3837  002B06  0E00               	movlw	0
  3838  002B08  6E0D               	movwf	___awdiv@quotient,c
  3839  002B0A  5009               	movf	___awdiv@divisor,w,c
  3840  002B0C  100A               	iorwf	___awdiv@divisor+1,w,c
  3841  002B0E  B4D8               	btfsc	status,2,c
  3842  002B10  D01C               	goto	l532
  3843  002B12  0E01               	movlw	1
  3844  002B14  6E0B               	movwf	___awdiv@counter,c
  3845  002B16  D004               	goto	l527
  3846  002B18  90D8               	bcf	status,0,c
  3847  002B1A  3609               	rlcf	___awdiv@divisor,f,c
  3848  002B1C  360A               	rlcf	___awdiv@divisor+1,f,c
  3849  002B1E  2A0B               	incf	___awdiv@counter,f,c
  3850  002B20                     l527:
  3851  002B20  AE0A               	btfss	___awdiv@divisor+1,7,c
  3852  002B22  D7FA               	goto	l528
  3853  002B24                     u2180:
  3854  002B24  90D8               	bcf	status,0,c
  3855  002B26  360D               	rlcf	___awdiv@quotient,f,c
  3856  002B28  360E               	rlcf	___awdiv@quotient+1,f,c
  3857  002B2A  5009               	movf	___awdiv@divisor,w,c
  3858  002B2C  5C07               	subwf	___awdiv@dividend,w,c
  3859  002B2E  500A               	movf	___awdiv@divisor+1,w,c
  3860  002B30  5808               	subwfb	___awdiv@dividend+1,w,c
  3861  002B32  A0D8               	btfss	status,0,c
  3862  002B34  D005               	goto	l531
  3863  002B36  5009               	movf	___awdiv@divisor,w,c
  3864  002B38  5E07               	subwf	___awdiv@dividend,f,c
  3865  002B3A  500A               	movf	___awdiv@divisor+1,w,c
  3866  002B3C  5A08               	subwfb	___awdiv@dividend+1,f,c
  3867  002B3E  800D               	bsf	___awdiv@quotient,0,c
  3868  002B40                     l531:
  3869  002B40  90D8               	bcf	status,0,c
  3870  002B42  320A               	rrcf	___awdiv@divisor+1,f,c
  3871  002B44  3209               	rrcf	___awdiv@divisor,f,c
  3872  002B46  2E0B               	decfsz	___awdiv@counter,f,c
  3873  002B48  D7ED               	goto	u2180
  3874  002B4A                     l532:
  3875  002B4A  500C               	movf	___awdiv@sign,w,c
  3876  002B4C  B4D8               	btfsc	status,2,c
  3877  002B4E  D004               	goto	l533
  3878  002B50  6C0D               	negf	___awdiv@quotient,c
  3879  002B52  1E0E               	comf	___awdiv@quotient+1,f,c
  3880  002B54  B0D8               	btfsc	status,0,c
  3881  002B56  2A0E               	incf	___awdiv@quotient+1,f,c
  3882  002B58                     l533:
  3883  002B58  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3884  002B5C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3885  002B60  0012               	return	
  3886  002B62                     __end_of___awdiv:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           indf1	equ	0xFE7
  3898                           postdec1	equ	0xFE5
  3899                           fsr1h	equ	0xFE2
  3900                           fsr1l	equ	0xFE1
  3901                           indf2	equ	0xFDF
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           status	equ	0xFD8
  3907                           
  3908 ;; *************** function __tdiv_to_l_ *****************
  3909 ;; Defined at:
  3910 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  f1              3    0[COMRAM] float 
  3913 ;;  f2              3    3[COMRAM] float 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  quot            4    9[COMRAM] unsigned long 
  3916 ;;  exp1            1   14[COMRAM] unsigned char 
  3917 ;;  cntr            1   13[COMRAM] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  4    0[COMRAM] unsigned long 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3927 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;Total ram usage:       15 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_sprintf
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text7
  3941  0023EA                     __ptext7:
  3942                           	opt stack 0
  3943  0023EA                     __tdiv_to_l_:
  3944                           	opt stack 29
  3945                           
  3946                           ;incstack = 0
  3947  0023EA  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3948  0023EE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3949  0023F0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3950  0023F2  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3951  0023F4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3952  0023F6  E301               	bnc	u2381
  3953  0023F8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3954  0023FA                     u2381:
  3955  0023FA  5007               	movf	??__tdiv_to_l_,w,c
  3956  0023FC  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3957  0023FE  500F               	movf	__tdiv_to_l_@exp1,w,c
  3958  002400  A4D8               	btfss	status,2,c
  3959  002402  D009               	goto	l660
  3960  002404  0E00               	movlw	0
  3961  002406  6E01               	movwf	?__tdiv_to_l_,c
  3962  002408  0E00               	movlw	0
  3963  00240A  6E02               	movwf	?__tdiv_to_l_+1,c
  3964  00240C  0E00               	movlw	0
  3965  00240E  6E03               	movwf	?__tdiv_to_l_+2,c
  3966  002410  0E00               	movlw	0
  3967  002412  6E04               	movwf	?__tdiv_to_l_+3,c
  3968  002414  0012               	return	
  3969  002416                     l660:
  3970  002416  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3971  00241A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3972  00241C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3973  00241E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3974  002420  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3975  002422  E301               	bnc	u2401
  3976  002424  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3977  002426                     u2401:
  3978  002426  5007               	movf	??__tdiv_to_l_,w,c
  3979  002428  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3980  00242A  500E               	movf	__tdiv_to_l_@cntr,w,c
  3981  00242C  A4D8               	btfss	status,2,c
  3982  00242E  D009               	goto	l662
  3983  002430  0E00               	movlw	0
  3984  002432  6E01               	movwf	?__tdiv_to_l_,c
  3985  002434  0E00               	movlw	0
  3986  002436  6E02               	movwf	?__tdiv_to_l_+1,c
  3987  002438  0E00               	movlw	0
  3988  00243A  6E03               	movwf	?__tdiv_to_l_+2,c
  3989  00243C  0E00               	movlw	0
  3990  00243E  6E04               	movwf	?__tdiv_to_l_+3,c
  3991  002440  0012               	return	
  3992  002442                     l662:
  3993  002442  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3994  002444  0EFF               	movlw	255
  3995  002446  1601               	andwf	__tdiv_to_l_@f1,f,c
  3996  002448  0EFF               	movlw	255
  3997  00244A  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3998  00244C  0E00               	movlw	0
  3999  00244E  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4000  002450  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4001  002452  0EFF               	movlw	255
  4002  002454  1604               	andwf	__tdiv_to_l_@f2,f,c
  4003  002456  0EFF               	movlw	255
  4004  002458  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4005  00245A  0E00               	movlw	0
  4006  00245C  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4007  00245E  0E00               	movlw	0
  4008  002460  6E0A               	movwf	__tdiv_to_l_@quot,c
  4009  002462  0E00               	movlw	0
  4010  002464  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4011  002466  0E00               	movlw	0
  4012  002468  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4013  00246A  0E00               	movlw	0
  4014  00246C  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4015  00246E  0E7F               	movlw	127
  4016  002470  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4017  002472  500E               	movf	__tdiv_to_l_@cntr,w,c
  4018  002474  0F98               	addlw	152
  4019  002476  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4020  002478  0E18               	movlw	24
  4021  00247A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4022  00247C                     l663:
  4023  00247C  90D8               	bcf	status,0,c
  4024  00247E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4025  002480  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4026  002482  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4027  002484  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4028  002486  5004               	movf	__tdiv_to_l_@f2,w,c
  4029  002488  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4030  00248A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4031  00248C  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4032  00248E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4033  002490  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4034  002492  A0D8               	btfss	status,0,c
  4035  002494  D007               	goto	l664
  4036  002496  5004               	movf	__tdiv_to_l_@f2,w,c
  4037  002498  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4038  00249A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4039  00249C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4040  00249E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4041  0024A0  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4042  0024A2  800A               	bsf	__tdiv_to_l_@quot,0,c
  4043  0024A4                     l664:
  4044  0024A4  90D8               	bcf	status,0,c
  4045  0024A6  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4046  0024A8  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4047  0024AA  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4048  0024AC  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4049  0024AE  D7E6               	goto	l663
  4050  0024B0  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4051  0024B2  D016               	goto	l666
  4052  0024B4  500F               	movf	__tdiv_to_l_@exp1,w,c
  4053  0024B6  0A80               	xorlw	128
  4054  0024B8  0F97               	addlw	151
  4055  0024BA  B0D8               	btfsc	status,0,c
  4056  0024BC  D009               	goto	l667
  4057  0024BE  0E00               	movlw	0
  4058  0024C0  6E01               	movwf	?__tdiv_to_l_,c
  4059  0024C2  0E00               	movlw	0
  4060  0024C4  6E02               	movwf	?__tdiv_to_l_+1,c
  4061  0024C6  0E00               	movlw	0
  4062  0024C8  6E03               	movwf	?__tdiv_to_l_+2,c
  4063  0024CA  0E00               	movlw	0
  4064  0024CC  6E04               	movwf	?__tdiv_to_l_+3,c
  4065  0024CE  0012               	return	
  4066  0024D0                     l667:
  4067  0024D0  90D8               	bcf	status,0,c
  4068  0024D2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4069  0024D4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4070  0024D6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4071  0024D8  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4072  0024DA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4073  0024DC  D7F9               	goto	l667
  4074  0024DE  D015               	goto	u2460
  4075  0024E0                     l666:
  4076  0024E0  0E17               	movlw	23
  4077  0024E2  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4078  0024E4  D00F               	goto	l672
  4079  0024E6  0E00               	movlw	0
  4080  0024E8  6E01               	movwf	?__tdiv_to_l_,c
  4081  0024EA  0E00               	movlw	0
  4082  0024EC  6E02               	movwf	?__tdiv_to_l_+1,c
  4083  0024EE  0E00               	movlw	0
  4084  0024F0  6E03               	movwf	?__tdiv_to_l_+2,c
  4085  0024F2  0E00               	movlw	0
  4086  0024F4  6E04               	movwf	?__tdiv_to_l_+3,c
  4087  0024F6  0012               	return	
  4088  0024F8  90D8               	bcf	status,0,c
  4089  0024FA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4090  0024FC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4091  0024FE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4092  002500  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4093  002502  060F               	decf	__tdiv_to_l_@exp1,f,c
  4094  002504                     l672:
  4095  002504  500F               	movf	__tdiv_to_l_@exp1,w,c
  4096  002506  A4D8               	btfss	status,2,c
  4097  002508  D7F7               	goto	l673
  4098  00250A                     u2460:
  4099  00250A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4100  00250E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4101  002512  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4102  002516  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4103  00251A  0012               	return		;funcret
  4104  00251C                     __end_of__tdiv_to_l_:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           postinc0	equ	0xFEE
  4114                           wreg	equ	0xFE8
  4115                           indf1	equ	0xFE7
  4116                           postdec1	equ	0xFE5
  4117                           fsr1h	equ	0xFE2
  4118                           fsr1l	equ	0xFE1
  4119                           indf2	equ	0xFDF
  4120                           postinc2	equ	0xFDE
  4121                           postdec2	equ	0xFDD
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function __div_to_l_ *****************
  4127 ;; Defined at:
  4128 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  f1              3    0[COMRAM] unsigned long 
  4131 ;;  f2              3    3[COMRAM] unsigned long 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  quot            4    6[COMRAM] unsigned long 
  4134 ;;  exp1            1   11[COMRAM] unsigned char 
  4135 ;;  cntr            1   10[COMRAM] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  4    0[COMRAM] unsigned long 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4145 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;Total ram usage:       12 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_sprintf
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text8
  4159  00251C                     __ptext8:
  4160                           	opt stack 0
  4161  00251C                     __div_to_l_:
  4162                           	opt stack 29
  4163                           
  4164                           ;incstack = 0
  4165  00251C  3403               	rlcf	__div_to_l_@f1+2,w,c
  4166  00251E  3404               	rlcf	__div_to_l_@f1+3,w,c
  4167  002520  6E0C               	movwf	__div_to_l_@exp1,c
  4168  002522  500C               	movf	__div_to_l_@exp1,w,c
  4169  002524  A4D8               	btfss	status,2,c
  4170  002526  D009               	goto	l556
  4171  002528  0E00               	movlw	0
  4172  00252A  6E01               	movwf	?__div_to_l_,c
  4173  00252C  0E00               	movlw	0
  4174  00252E  6E02               	movwf	?__div_to_l_+1,c
  4175  002530  0E00               	movlw	0
  4176  002532  6E03               	movwf	?__div_to_l_+2,c
  4177  002534  0E00               	movlw	0
  4178  002536  6E04               	movwf	?__div_to_l_+3,c
  4179  002538  0012               	return	
  4180  00253A                     l556:
  4181  00253A  3406               	rlcf	__div_to_l_@f2+2,w,c
  4182  00253C  3407               	rlcf	__div_to_l_@f2+3,w,c
  4183  00253E  6E0B               	movwf	__div_to_l_@cntr,c
  4184  002540  500B               	movf	__div_to_l_@cntr,w,c
  4185  002542  A4D8               	btfss	status,2,c
  4186  002544  D009               	goto	l558
  4187  002546  0E00               	movlw	0
  4188  002548  6E01               	movwf	?__div_to_l_,c
  4189  00254A  0E00               	movlw	0
  4190  00254C  6E02               	movwf	?__div_to_l_+1,c
  4191  00254E  0E00               	movlw	0
  4192  002550  6E03               	movwf	?__div_to_l_+2,c
  4193  002552  0E00               	movlw	0
  4194  002554  6E04               	movwf	?__div_to_l_+3,c
  4195  002556  0012               	return	
  4196  002558                     l558:
  4197  002558  8E03               	bsf	__div_to_l_@f1+2,7,c
  4198  00255A  0EFF               	movlw	255
  4199  00255C  1601               	andwf	__div_to_l_@f1,f,c
  4200  00255E  0EFF               	movlw	255
  4201  002560  1602               	andwf	__div_to_l_@f1+1,f,c
  4202  002562  0EFF               	movlw	255
  4203  002564  1603               	andwf	__div_to_l_@f1+2,f,c
  4204  002566  0E00               	movlw	0
  4205  002568  1604               	andwf	__div_to_l_@f1+3,f,c
  4206  00256A  8E06               	bsf	__div_to_l_@f2+2,7,c
  4207  00256C  0EFF               	movlw	255
  4208  00256E  1604               	andwf	__div_to_l_@f2,f,c
  4209  002570  0EFF               	movlw	255
  4210  002572  1605               	andwf	__div_to_l_@f2+1,f,c
  4211  002574  0EFF               	movlw	255
  4212  002576  1606               	andwf	__div_to_l_@f2+2,f,c
  4213  002578  0E00               	movlw	0
  4214  00257A  1607               	andwf	__div_to_l_@f2+3,f,c
  4215  00257C  0E00               	movlw	0
  4216  00257E  6E07               	movwf	__div_to_l_@quot,c
  4217  002580  0E00               	movlw	0
  4218  002582  6E08               	movwf	__div_to_l_@quot+1,c
  4219  002584  0E00               	movlw	0
  4220  002586  6E09               	movwf	__div_to_l_@quot+2,c
  4221  002588  0E00               	movlw	0
  4222  00258A  6E0A               	movwf	__div_to_l_@quot+3,c
  4223  00258C  0E7F               	movlw	127
  4224  00258E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4225  002590  500B               	movf	__div_to_l_@cntr,w,c
  4226  002592  0FA0               	addlw	160
  4227  002594  5E0C               	subwf	__div_to_l_@exp1,f,c
  4228  002596  0E20               	movlw	32
  4229  002598  6E0B               	movwf	__div_to_l_@cntr,c
  4230  00259A  90D8               	bcf	status,0,c
  4231  00259C  3607               	rlcf	__div_to_l_@quot,f,c
  4232  00259E  3608               	rlcf	__div_to_l_@quot+1,f,c
  4233  0025A0  3609               	rlcf	__div_to_l_@quot+2,f,c
  4234  0025A2  360A               	rlcf	__div_to_l_@quot+3,f,c
  4235  0025A4  5004               	movf	__div_to_l_@f2,w,c
  4236  0025A6  5C01               	subwf	__div_to_l_@f1,w,c
  4237  0025A8  5005               	movf	__div_to_l_@f2+1,w,c
  4238  0025AA  5802               	subwfb	__div_to_l_@f1+1,w,c
  4239  0025AC  5006               	movf	__div_to_l_@f2+2,w,c
  4240  0025AE  5803               	subwfb	__div_to_l_@f1+2,w,c
  4241  0025B0  5007               	movf	__div_to_l_@f2+3,w,c
  4242  0025B2  5804               	subwfb	__div_to_l_@f1+3,w,c
  4243  0025B4  A0D8               	btfss	status,0,c
  4244  0025B6  D009               	goto	l560
  4245  0025B8  5004               	movf	__div_to_l_@f2,w,c
  4246  0025BA  5E01               	subwf	__div_to_l_@f1,f,c
  4247  0025BC  5005               	movf	__div_to_l_@f2+1,w,c
  4248  0025BE  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4249  0025C0  5006               	movf	__div_to_l_@f2+2,w,c
  4250  0025C2  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4251  0025C4  5007               	movf	__div_to_l_@f2+3,w,c
  4252  0025C6  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4253  0025C8  8007               	bsf	__div_to_l_@quot,0,c
  4254  0025CA                     l560:
  4255  0025CA  90D8               	bcf	status,0,c
  4256  0025CC  3601               	rlcf	__div_to_l_@f1,f,c
  4257  0025CE  3602               	rlcf	__div_to_l_@f1+1,f,c
  4258  0025D0  3603               	rlcf	__div_to_l_@f1+2,f,c
  4259  0025D2  3604               	rlcf	__div_to_l_@f1+3,f,c
  4260  0025D4  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4261  0025D6  D7E1               	goto	l559
  4262  0025D8  AE0C               	btfss	__div_to_l_@exp1,7,c
  4263  0025DA  D016               	goto	l562
  4264  0025DC  500C               	movf	__div_to_l_@exp1,w,c
  4265  0025DE  0A80               	xorlw	128
  4266  0025E0  0F9F               	addlw	159
  4267  0025E2  B0D8               	btfsc	status,0,c
  4268  0025E4  D009               	goto	l563
  4269  0025E6  0E00               	movlw	0
  4270  0025E8  6E01               	movwf	?__div_to_l_,c
  4271  0025EA  0E00               	movlw	0
  4272  0025EC  6E02               	movwf	?__div_to_l_+1,c
  4273  0025EE  0E00               	movlw	0
  4274  0025F0  6E03               	movwf	?__div_to_l_+2,c
  4275  0025F2  0E00               	movlw	0
  4276  0025F4  6E04               	movwf	?__div_to_l_+3,c
  4277  0025F6  0012               	return	
  4278  0025F8                     l563:
  4279  0025F8  90D8               	bcf	status,0,c
  4280  0025FA  320A               	rrcf	__div_to_l_@quot+3,f,c
  4281  0025FC  3209               	rrcf	__div_to_l_@quot+2,f,c
  4282  0025FE  3208               	rrcf	__div_to_l_@quot+1,f,c
  4283  002600  3207               	rrcf	__div_to_l_@quot,f,c
  4284  002602  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4285  002604  D7F9               	goto	l563
  4286  002606  D015               	goto	u2530
  4287  002608                     l562:
  4288  002608  0E1F               	movlw	31
  4289  00260A  640C               	cpfsgt	__div_to_l_@exp1,c
  4290  00260C  D00F               	goto	l568
  4291  00260E  0E00               	movlw	0
  4292  002610  6E01               	movwf	?__div_to_l_,c
  4293  002612  0E00               	movlw	0
  4294  002614  6E02               	movwf	?__div_to_l_+1,c
  4295  002616  0E00               	movlw	0
  4296  002618  6E03               	movwf	?__div_to_l_+2,c
  4297  00261A  0E00               	movlw	0
  4298  00261C  6E04               	movwf	?__div_to_l_+3,c
  4299  00261E  0012               	return	
  4300  002620  90D8               	bcf	status,0,c
  4301  002622  3607               	rlcf	__div_to_l_@quot,f,c
  4302  002624  3608               	rlcf	__div_to_l_@quot+1,f,c
  4303  002626  3609               	rlcf	__div_to_l_@quot+2,f,c
  4304  002628  360A               	rlcf	__div_to_l_@quot+3,f,c
  4305  00262A  060C               	decf	__div_to_l_@exp1,f,c
  4306  00262C                     l568:
  4307  00262C  500C               	movf	__div_to_l_@exp1,w,c
  4308  00262E  A4D8               	btfss	status,2,c
  4309  002630  D7F7               	goto	l569
  4310  002632                     u2530:
  4311  002632  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4312  002636  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4313  00263A  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4314  00263E  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4315  002642  0012               	return		;funcret
  4316  002644                     __end_of__div_to_l_:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           indf1	equ	0xFE7
  4328                           postdec1	equ	0xFE5
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function ___lltoft *****************
  4339 ;; Defined at:
  4340 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  c               4    8[COMRAM] unsigned long 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  exp             1   16[COMRAM] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  3    8[COMRAM] float 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        9 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    1
  4361 ;; This function calls:
  4362 ;;		___ftpack
  4363 ;; This function is called by:
  4364 ;;		_sprintf
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text9
  4369  002DE4                     __ptext9:
  4370                           	opt stack 0
  4371  002DE4                     ___lltoft:
  4372                           	opt stack 28
  4373                           
  4374                           ;incstack = 0
  4375  002DE4  0E8E               	movlw	142
  4376  002DE6  6E11               	movwf	___lltoft@exp,c
  4377  002DE8  D006               	goto	l767
  4378  002DEA  90D8               	bcf	status,0,c
  4379  002DEC  320C               	rrcf	___lltoft@c+3,f,c
  4380  002DEE  320B               	rrcf	___lltoft@c+2,f,c
  4381  002DF0  320A               	rrcf	___lltoft@c+1,f,c
  4382  002DF2  3209               	rrcf	___lltoft@c,f,c
  4383  002DF4  2A11               	incf	___lltoft@exp,f,c
  4384  002DF6                     l767:
  4385  002DF6  0E00               	movlw	0
  4386  002DF8  1409               	andwf	___lltoft@c,w,c
  4387  002DFA  6E0D               	movwf	??___lltoft& (0+255),c
  4388  002DFC  0E00               	movlw	0
  4389  002DFE  140A               	andwf	___lltoft@c+1,w,c
  4390  002E00  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4391  002E02  0E00               	movlw	0
  4392  002E04  140B               	andwf	___lltoft@c+2,w,c
  4393  002E06  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4394  002E08  0EFF               	movlw	255
  4395  002E0A  140C               	andwf	___lltoft@c+3,w,c
  4396  002E0C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4397  002E0E  500D               	movf	??___lltoft,w,c
  4398  002E10  100E               	iorwf	??___lltoft+1,w,c
  4399  002E12  100F               	iorwf	??___lltoft+2,w,c
  4400  002E14  1010               	iorwf	??___lltoft+3,w,c
  4401  002E16  A4D8               	btfss	status,2,c
  4402  002E18  D7E8               	goto	l768
  4403  002E1A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4404  002E1E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4405  002E22  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4406  002E26  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4407  002E2A  0E00               	movlw	0
  4408  002E2C  6E05               	movwf	___ftpack@sign,c
  4409  002E2E  EC89  F014         	call	___ftpack	;wreg free
  4410  002E32  C001  F009         	movff	?___ftpack,?___lltoft
  4411  002E36  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4412  002E3A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4413  002E3E  0012               	return	
  4414  002E40                     __end_of___lltoft:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           postinc0	equ	0xFEE
  4424                           wreg	equ	0xFE8
  4425                           indf1	equ	0xFE7
  4426                           postdec1	equ	0xFE5
  4427                           fsr1h	equ	0xFE2
  4428                           fsr1l	equ	0xFE1
  4429                           indf2	equ	0xFDF
  4430                           postinc2	equ	0xFDE
  4431                           postdec2	equ	0xFDD
  4432                           fsr2h	equ	0xFDA
  4433                           fsr2l	equ	0xFD9
  4434                           status	equ	0xFD8
  4435                           
  4436 ;; *************** function ___llmod *****************
  4437 ;; Defined at:
  4438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  dividend        4    0[COMRAM] unsigned long 
  4441 ;;  divisor         4    4[COMRAM] unsigned long 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  counter         1    8[COMRAM] unsigned char 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  4    0[COMRAM] unsigned long 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4453 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;Total ram usage:        9 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_sprintf
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text10
  4467  002C54                     __ptext10:
  4468                           	opt stack 0
  4469  002C54                     ___llmod:
  4470                           	opt stack 29
  4471                           
  4472                           ;incstack = 0
  4473  002C54  5005               	movf	___llmod@divisor,w,c
  4474  002C56  1006               	iorwf	___llmod@divisor+1,w,c
  4475  002C58  1007               	iorwf	___llmod@divisor+2,w,c
  4476  002C5A  1008               	iorwf	___llmod@divisor+3,w,c
  4477  002C5C  B4D8               	btfsc	status,2,c
  4478  002C5E  D024               	goto	l761
  4479  002C60  0E01               	movlw	1
  4480  002C62  6E09               	movwf	___llmod@counter,c
  4481  002C64  D006               	goto	l756
  4482  002C66  90D8               	bcf	status,0,c
  4483  002C68  3605               	rlcf	___llmod@divisor,f,c
  4484  002C6A  3606               	rlcf	___llmod@divisor+1,f,c
  4485  002C6C  3607               	rlcf	___llmod@divisor+2,f,c
  4486  002C6E  3608               	rlcf	___llmod@divisor+3,f,c
  4487  002C70  2A09               	incf	___llmod@counter,f,c
  4488  002C72                     l756:
  4489  002C72  AE08               	btfss	___llmod@divisor+3,7,c
  4490  002C74  D7F8               	goto	l757
  4491  002C76                     u2770:
  4492  002C76  5005               	movf	___llmod@divisor,w,c
  4493  002C78  5C01               	subwf	___llmod@dividend,w,c
  4494  002C7A  5006               	movf	___llmod@divisor+1,w,c
  4495  002C7C  5802               	subwfb	___llmod@dividend+1,w,c
  4496  002C7E  5007               	movf	___llmod@divisor+2,w,c
  4497  002C80  5803               	subwfb	___llmod@dividend+2,w,c
  4498  002C82  5008               	movf	___llmod@divisor+3,w,c
  4499  002C84  5804               	subwfb	___llmod@dividend+3,w,c
  4500  002C86  A0D8               	btfss	status,0,c
  4501  002C88  D008               	goto	l760
  4502  002C8A  5005               	movf	___llmod@divisor,w,c
  4503  002C8C  5E01               	subwf	___llmod@dividend,f,c
  4504  002C8E  5006               	movf	___llmod@divisor+1,w,c
  4505  002C90  5A02               	subwfb	___llmod@dividend+1,f,c
  4506  002C92  5007               	movf	___llmod@divisor+2,w,c
  4507  002C94  5A03               	subwfb	___llmod@dividend+2,f,c
  4508  002C96  5008               	movf	___llmod@divisor+3,w,c
  4509  002C98  5A04               	subwfb	___llmod@dividend+3,f,c
  4510  002C9A                     l760:
  4511  002C9A  90D8               	bcf	status,0,c
  4512  002C9C  3208               	rrcf	___llmod@divisor+3,f,c
  4513  002C9E  3207               	rrcf	___llmod@divisor+2,f,c
  4514  002CA0  3206               	rrcf	___llmod@divisor+1,f,c
  4515  002CA2  3205               	rrcf	___llmod@divisor,f,c
  4516  002CA4  2E09               	decfsz	___llmod@counter,f,c
  4517  002CA6  D7E7               	goto	u2770
  4518  002CA8                     l761:
  4519  002CA8  C001  F001         	movff	___llmod@dividend,?___llmod
  4520  002CAC  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4521  002CB0  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4522  002CB4  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4523  002CB8  0012               	return		;funcret
  4524  002CBA                     __end_of___llmod:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           postinc0	equ	0xFEE
  4534                           wreg	equ	0xFE8
  4535                           indf1	equ	0xFE7
  4536                           postdec1	equ	0xFE5
  4537                           fsr1h	equ	0xFE2
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function ___lldiv *****************
  4547 ;; Defined at:
  4548 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  dividend        4    0[COMRAM] unsigned long 
  4551 ;;  divisor         4    4[COMRAM] unsigned long 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  quotient        4    8[COMRAM] unsigned long 
  4554 ;;  counter         1   12[COMRAM] unsigned char 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  4    0[COMRAM] unsigned long 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4564 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;Total ram usage:       13 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_sprintf
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text11
  4578  002B62                     __ptext11:
  4579                           	opt stack 0
  4580  002B62                     ___lldiv:
  4581                           	opt stack 29
  4582                           
  4583                           ;incstack = 0
  4584  002B62  0E00               	movlw	0
  4585  002B64  6E09               	movwf	___lldiv@quotient,c
  4586  002B66  0E00               	movlw	0
  4587  002B68  6E0A               	movwf	___lldiv@quotient+1,c
  4588  002B6A  0E00               	movlw	0
  4589  002B6C  6E0B               	movwf	___lldiv@quotient+2,c
  4590  002B6E  0E00               	movlw	0
  4591  002B70  6E0C               	movwf	___lldiv@quotient+3,c
  4592  002B72  5005               	movf	___lldiv@divisor,w,c
  4593  002B74  1006               	iorwf	___lldiv@divisor+1,w,c
  4594  002B76  1007               	iorwf	___lldiv@divisor+2,w,c
  4595  002B78  1008               	iorwf	___lldiv@divisor+3,w,c
  4596  002B7A  B4D8               	btfsc	status,2,c
  4597  002B7C  D02A               	goto	l751
  4598  002B7E  0E01               	movlw	1
  4599  002B80  6E0D               	movwf	___lldiv@counter,c
  4600  002B82  D006               	goto	l746
  4601  002B84  90D8               	bcf	status,0,c
  4602  002B86  3605               	rlcf	___lldiv@divisor,f,c
  4603  002B88  3606               	rlcf	___lldiv@divisor+1,f,c
  4604  002B8A  3607               	rlcf	___lldiv@divisor+2,f,c
  4605  002B8C  3608               	rlcf	___lldiv@divisor+3,f,c
  4606  002B8E  2A0D               	incf	___lldiv@counter,f,c
  4607  002B90                     l746:
  4608  002B90  AE08               	btfss	___lldiv@divisor+3,7,c
  4609  002B92  D7F8               	goto	l747
  4610  002B94                     u2740:
  4611  002B94  90D8               	bcf	status,0,c
  4612  002B96  3609               	rlcf	___lldiv@quotient,f,c
  4613  002B98  360A               	rlcf	___lldiv@quotient+1,f,c
  4614  002B9A  360B               	rlcf	___lldiv@quotient+2,f,c
  4615  002B9C  360C               	rlcf	___lldiv@quotient+3,f,c
  4616  002B9E  5005               	movf	___lldiv@divisor,w,c
  4617  002BA0  5C01               	subwf	___lldiv@dividend,w,c
  4618  002BA2  5006               	movf	___lldiv@divisor+1,w,c
  4619  002BA4  5802               	subwfb	___lldiv@dividend+1,w,c
  4620  002BA6  5007               	movf	___lldiv@divisor+2,w,c
  4621  002BA8  5803               	subwfb	___lldiv@dividend+2,w,c
  4622  002BAA  5008               	movf	___lldiv@divisor+3,w,c
  4623  002BAC  5804               	subwfb	___lldiv@dividend+3,w,c
  4624  002BAE  A0D8               	btfss	status,0,c
  4625  002BB0  D009               	goto	l750
  4626  002BB2  5005               	movf	___lldiv@divisor,w,c
  4627  002BB4  5E01               	subwf	___lldiv@dividend,f,c
  4628  002BB6  5006               	movf	___lldiv@divisor+1,w,c
  4629  002BB8  5A02               	subwfb	___lldiv@dividend+1,f,c
  4630  002BBA  5007               	movf	___lldiv@divisor+2,w,c
  4631  002BBC  5A03               	subwfb	___lldiv@dividend+2,f,c
  4632  002BBE  5008               	movf	___lldiv@divisor+3,w,c
  4633  002BC0  5A04               	subwfb	___lldiv@dividend+3,f,c
  4634  002BC2  8009               	bsf	___lldiv@quotient,0,c
  4635  002BC4                     l750:
  4636  002BC4  90D8               	bcf	status,0,c
  4637  002BC6  3208               	rrcf	___lldiv@divisor+3,f,c
  4638  002BC8  3207               	rrcf	___lldiv@divisor+2,f,c
  4639  002BCA  3206               	rrcf	___lldiv@divisor+1,f,c
  4640  002BCC  3205               	rrcf	___lldiv@divisor,f,c
  4641  002BCE  2E0D               	decfsz	___lldiv@counter,f,c
  4642  002BD0  D7E1               	goto	u2740
  4643  002BD2                     l751:
  4644  002BD2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4645  002BD6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4646  002BDA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4647  002BDE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4648  002BE2  0012               	return		;funcret
  4649  002BE4                     __end_of___lldiv:
  4650                           	opt stack 0
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           prodh	equ	0xFF4
  4656                           prodl	equ	0xFF3
  4657                           intcon	equ	0xFF2
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           indf1	equ	0xFE7
  4661                           postdec1	equ	0xFE5
  4662                           fsr1h	equ	0xFE2
  4663                           fsr1l	equ	0xFE1
  4664                           indf2	equ	0xFDF
  4665                           postinc2	equ	0xFDE
  4666                           postdec2	equ	0xFDD
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function ___fttol *****************
  4672 ;; Defined at:
  4673 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  f1              3   42[COMRAM] float 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  lval            4   52[COMRAM] unsigned long 
  4678 ;;  exp1            1   56[COMRAM] unsigned char 
  4679 ;;  sign1           1   51[COMRAM] unsigned char 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  4   42[COMRAM] long 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:       15 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_sprintf
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text12
  4703  002644                     __ptext12:
  4704                           	opt stack 0
  4705  002644                     ___fttol:
  4706                           	opt stack 29
  4707                           
  4708                           ;incstack = 0
  4709  002644  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4710  002648  6A30               	clrf	(??___fttol+1)& (0+255),c
  4711  00264A  6A31               	clrf	(??___fttol+2)& (0+255),c
  4712  00264C  342C               	rlcf	___fttol@f1+1,w,c
  4713  00264E  362F               	rlcf	??___fttol& (0+255),f,c
  4714  002650  E301               	bnc	u2651
  4715  002652  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4716  002654                     u2651:
  4717  002654  502F               	movf	??___fttol,w,c
  4718  002656  6E39               	movwf	___fttol@exp1,c
  4719  002658  5039               	movf	___fttol@exp1,w,c
  4720  00265A  A4D8               	btfss	status,2,c
  4721  00265C  D009               	goto	l705
  4722  00265E  0E00               	movlw	0
  4723  002660  6E2B               	movwf	?___fttol,c
  4724  002662  0E00               	movlw	0
  4725  002664  6E2C               	movwf	?___fttol+1,c
  4726  002666  0E00               	movlw	0
  4727  002668  6E2D               	movwf	?___fttol+2,c
  4728  00266A  0E00               	movlw	0
  4729  00266C  6E2E               	movwf	?___fttol+3,c
  4730  00266E  0012               	return	
  4731  002670                     l705:
  4732  002670  0E17               	movlw	23
  4733  002672  6E2F               	movwf	??___fttol& (0+255),c
  4734  002674  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4735  002678  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4736  00267C  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4737  002680  282F               	incf	??___fttol,w,c
  4738  002682  6E33               	movwf	(??___fttol+4)& (0+255),c
  4739  002684  D004               	goto	u2670
  4740  002686                     u2675:
  4741  002686  90D8               	bcf	status,0,c
  4742  002688  3232               	rrcf	??___fttol+3,f,c
  4743  00268A  3231               	rrcf	??___fttol+2,f,c
  4744  00268C  3230               	rrcf	??___fttol+1,f,c
  4745  00268E                     u2670:
  4746  00268E  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4747  002690  D7FA               	goto	u2675
  4748  002692  5030               	movf	??___fttol+1,w,c
  4749  002694  6E34               	movwf	___fttol@sign1,c
  4750  002696  8E2C               	bsf	___fttol@f1+1,7,c
  4751  002698  0EFF               	movlw	255
  4752  00269A  162B               	andwf	___fttol@f1,f,c
  4753  00269C  0EFF               	movlw	255
  4754  00269E  162C               	andwf	___fttol@f1+1,f,c
  4755  0026A0  0E00               	movlw	0
  4756  0026A2  162D               	andwf	___fttol@f1+2,f,c
  4757  0026A4  502B               	movf	___fttol@f1,w,c
  4758  0026A6  6E35               	movwf	___fttol@lval,c
  4759  0026A8  502C               	movf	___fttol@f1+1,w,c
  4760  0026AA  6E36               	movwf	___fttol@lval+1,c
  4761  0026AC  502D               	movf	___fttol@f1+2,w,c
  4762  0026AE  6E37               	movwf	___fttol@lval+2,c
  4763  0026B0  6A38               	clrf	___fttol@lval+3,c
  4764  0026B2  0E8E               	movlw	142
  4765  0026B4  5E39               	subwf	___fttol@exp1,f,c
  4766  0026B6  AE39               	btfss	___fttol@exp1,7,c
  4767  0026B8  D016               	goto	l707
  4768  0026BA  5039               	movf	___fttol@exp1,w,c
  4769  0026BC  0A80               	xorlw	128
  4770  0026BE  0F8F               	addlw	143
  4771  0026C0  B0D8               	btfsc	status,0,c
  4772  0026C2  D009               	goto	l708
  4773  0026C4  0E00               	movlw	0
  4774  0026C6  6E2B               	movwf	?___fttol,c
  4775  0026C8  0E00               	movlw	0
  4776  0026CA  6E2C               	movwf	?___fttol+1,c
  4777  0026CC  0E00               	movlw	0
  4778  0026CE  6E2D               	movwf	?___fttol+2,c
  4779  0026D0  0E00               	movlw	0
  4780  0026D2  6E2E               	movwf	?___fttol+3,c
  4781  0026D4  0012               	return	
  4782  0026D6                     l708:
  4783  0026D6  90D8               	bcf	status,0,c
  4784  0026D8  3238               	rrcf	___fttol@lval+3,f,c
  4785  0026DA  3237               	rrcf	___fttol@lval+2,f,c
  4786  0026DC  3236               	rrcf	___fttol@lval+1,f,c
  4787  0026DE  3235               	rrcf	___fttol@lval,f,c
  4788  0026E0  3E39               	incfsz	___fttol@exp1,f,c
  4789  0026E2  D7F9               	goto	l708
  4790  0026E4  D015               	goto	u2710
  4791  0026E6                     l707:
  4792  0026E6  0E17               	movlw	23
  4793  0026E8  6439               	cpfsgt	___fttol@exp1,c
  4794  0026EA  D00F               	goto	l713
  4795  0026EC  0E00               	movlw	0
  4796  0026EE  6E2B               	movwf	?___fttol,c
  4797  0026F0  0E00               	movlw	0
  4798  0026F2  6E2C               	movwf	?___fttol+1,c
  4799  0026F4  0E00               	movlw	0
  4800  0026F6  6E2D               	movwf	?___fttol+2,c
  4801  0026F8  0E00               	movlw	0
  4802  0026FA  6E2E               	movwf	?___fttol+3,c
  4803  0026FC  0012               	return	
  4804  0026FE  90D8               	bcf	status,0,c
  4805  002700  3635               	rlcf	___fttol@lval,f,c
  4806  002702  3636               	rlcf	___fttol@lval+1,f,c
  4807  002704  3637               	rlcf	___fttol@lval+2,f,c
  4808  002706  3638               	rlcf	___fttol@lval+3,f,c
  4809  002708  0639               	decf	___fttol@exp1,f,c
  4810  00270A                     l713:
  4811  00270A  5039               	movf	___fttol@exp1,w,c
  4812  00270C  A4D8               	btfss	status,2,c
  4813  00270E  D7F7               	goto	l714
  4814  002710                     u2710:
  4815  002710  5034               	movf	___fttol@sign1,w,c
  4816  002712  B4D8               	btfsc	status,2,c
  4817  002714  D008               	goto	l716
  4818  002716  1E38               	comf	___fttol@lval+3,f,c
  4819  002718  1E37               	comf	___fttol@lval+2,f,c
  4820  00271A  1E36               	comf	___fttol@lval+1,f,c
  4821  00271C  6C35               	negf	___fttol@lval,c
  4822  00271E  0E00               	movlw	0
  4823  002720  2236               	addwfc	___fttol@lval+1,f,c
  4824  002722  2237               	addwfc	___fttol@lval+2,f,c
  4825  002724  2238               	addwfc	___fttol@lval+3,f,c
  4826  002726                     l716:
  4827  002726  C035  F02B         	movff	___fttol@lval,?___fttol
  4828  00272A  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4829  00272E  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4830  002732  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4831  002736  0012               	return	
  4832  002738                     __end_of___fttol:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           postinc0	equ	0xFEE
  4842                           wreg	equ	0xFE8
  4843                           indf1	equ	0xFE7
  4844                           postdec1	equ	0xFE5
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function ___ftsub *****************
  4855 ;; Defined at:
  4856 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  f1              3   57[COMRAM] float 
  4859 ;;  f2              3   60[COMRAM] float 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  3   57[COMRAM] float 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4871 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;Total ram usage:        6 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    2
  4878 ;; This function calls:
  4879 ;;		___ftadd
  4880 ;; This function is called by:
  4881 ;;		_sprintf
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text13
  4886  002F20                     __ptext13:
  4887                           	opt stack 0
  4888  002F20                     ___ftsub:
  4889                           	opt stack 27
  4890                           
  4891                           ;incstack = 0
  4892  002F20  503D               	movf	___ftsub@f2,w,c
  4893  002F22  103E               	iorwf	___ftsub@f2+1,w,c
  4894  002F24  103F               	iorwf	___ftsub@f2+2,w,c
  4895  002F26  B4D8               	btfsc	status,2,c
  4896  002F28  D006               	goto	l701
  4897  002F2A  0E00               	movlw	0
  4898  002F2C  1A3D               	xorwf	___ftsub@f2,f,c
  4899  002F2E  0E00               	movlw	0
  4900  002F30  1A3E               	xorwf	___ftsub@f2+1,f,c
  4901  002F32  0E80               	movlw	128
  4902  002F34  1A3F               	xorwf	___ftsub@f2+2,f,c
  4903  002F36                     l701:
  4904  002F36  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4905  002F3A  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4906  002F3E  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4907  002F42  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4908  002F46  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4909  002F4A  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4910  002F4E  EC1F  F011         	call	___ftadd	;wreg free
  4911  002F52  C02E  F03A         	movff	?___ftadd,?___ftsub
  4912  002F56  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4913  002F5A  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4914  002F5E  0012               	return	
  4915  002F60                     __end_of___ftsub:
  4916                           	opt stack 0
  4917                           tblptru	equ	0xFF8
  4918                           tblptrh	equ	0xFF7
  4919                           tblptrl	equ	0xFF6
  4920                           tablat	equ	0xFF5
  4921                           prodh	equ	0xFF4
  4922                           prodl	equ	0xFF3
  4923                           intcon	equ	0xFF2
  4924                           postinc0	equ	0xFEE
  4925                           wreg	equ	0xFE8
  4926                           indf1	equ	0xFE7
  4927                           postdec1	equ	0xFE5
  4928                           fsr1h	equ	0xFE2
  4929                           fsr1l	equ	0xFE1
  4930                           indf2	equ	0xFDF
  4931                           postinc2	equ	0xFDE
  4932                           postdec2	equ	0xFDD
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function ___ftadd *****************
  4938 ;; Defined at:
  4939 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  f1              3   45[COMRAM] float 
  4942 ;;  f2              3   48[COMRAM] float 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  exp1            1   56[COMRAM] unsigned char 
  4945 ;;  exp2            1   55[COMRAM] unsigned char 
  4946 ;;  sign            1   54[COMRAM] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  3   45[COMRAM] float 
  4949 ;; Registers used:
  4950 ;;		wreg, status,2, status,0, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4956 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;Total ram usage:       12 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    1
  4963 ;; This function calls:
  4964 ;;		___ftpack
  4965 ;; This function is called by:
  4966 ;;		_sprintf
  4967 ;;		___ftsub
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text14
  4972  00223E                     __ptext14:
  4973                           	opt stack 0
  4974  00223E                     ___ftadd:
  4975                           	opt stack 27
  4976                           
  4977                           ;incstack = 0
  4978  00223E  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4979  002242  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4980  002244  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4981  002246  342F               	rlcf	___ftadd@f1+1,w,c
  4982  002248  3634               	rlcf	??___ftadd& (0+255),f,c
  4983  00224A  E301               	bnc	u1881
  4984  00224C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4985  00224E                     u1881:
  4986  00224E  5034               	movf	??___ftadd,w,c
  4987  002250  6E39               	movwf	___ftadd@exp1,c
  4988  002252  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4989  002256  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4990  002258  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4991  00225A  3432               	rlcf	___ftadd@f2+1,w,c
  4992  00225C  3634               	rlcf	??___ftadd& (0+255),f,c
  4993  00225E  E301               	bnc	u1891
  4994  002260  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4995  002262                     u1891:
  4996  002262  5034               	movf	??___ftadd,w,c
  4997  002264  6E38               	movwf	___ftadd@exp2,c
  4998  002266  5039               	movf	___ftadd@exp1,w,c
  4999  002268  B4D8               	btfsc	status,2,c
  5000  00226A  D00B               	goto	u1920
  5001  00226C  5038               	movf	___ftadd@exp2,w,c
  5002  00226E  5C39               	subwf	___ftadd@exp1,w,c
  5003  002270  B0D8               	btfsc	status,0,c
  5004  002272  D00E               	goto	l619
  5005  002274  5039               	movf	___ftadd@exp1,w,c
  5006  002276  0800               	sublw	0
  5007  002278  2438               	addwf	___ftadd@exp2,w,c
  5008  00227A  6E34               	movwf	??___ftadd& (0+255),c
  5009  00227C  0E18               	movlw	24
  5010  00227E  6434               	cpfsgt	??___ftadd,c
  5011  002280  D007               	goto	l619
  5012  002282                     u1920:
  5013  002282  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5014  002286  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5015  00228A  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5016  00228E  0012               	return	
  5017  002290                     l619:
  5018  002290  5038               	movf	___ftadd@exp2,w,c
  5019  002292  B4D8               	btfsc	status,2,c
  5020  002294  D00B               	goto	u1950
  5021  002296  5039               	movf	___ftadd@exp1,w,c
  5022  002298  5C38               	subwf	___ftadd@exp2,w,c
  5023  00229A  B0D8               	btfsc	status,0,c
  5024  00229C  D00E               	goto	l623
  5025  00229E  5038               	movf	___ftadd@exp2,w,c
  5026  0022A0  0800               	sublw	0
  5027  0022A2  2439               	addwf	___ftadd@exp1,w,c
  5028  0022A4  6E34               	movwf	??___ftadd& (0+255),c
  5029  0022A6  0E18               	movlw	24
  5030  0022A8  6434               	cpfsgt	??___ftadd,c
  5031  0022AA  D007               	goto	l623
  5032  0022AC                     u1950:
  5033  0022AC  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5034  0022B0  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5035  0022B4  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5036  0022B8  0012               	return	
  5037  0022BA                     l623:
  5038  0022BA  0E06               	movlw	6
  5039  0022BC  6E37               	movwf	___ftadd@sign,c
  5040  0022BE  BE30               	btfsc	___ftadd@f1+2,7,c
  5041  0022C0  8E37               	bsf	___ftadd@sign,7,c
  5042  0022C2  BE33               	btfsc	___ftadd@f2+2,7,c
  5043  0022C4  8C37               	bsf	___ftadd@sign,6,c
  5044  0022C6  8E2F               	bsf	___ftadd@f1+1,7,c
  5045  0022C8  0EFF               	movlw	255
  5046  0022CA  162E               	andwf	___ftadd@f1,f,c
  5047  0022CC  0EFF               	movlw	255
  5048  0022CE  162F               	andwf	___ftadd@f1+1,f,c
  5049  0022D0  0E00               	movlw	0
  5050  0022D2  1630               	andwf	___ftadd@f1+2,f,c
  5051  0022D4  8E32               	bsf	___ftadd@f2+1,7,c
  5052  0022D6  0EFF               	movlw	255
  5053  0022D8  1631               	andwf	___ftadd@f2,f,c
  5054  0022DA  0EFF               	movlw	255
  5055  0022DC  1632               	andwf	___ftadd@f2+1,f,c
  5056  0022DE  0E00               	movlw	0
  5057  0022E0  1633               	andwf	___ftadd@f2+2,f,c
  5058  0022E2  5038               	movf	___ftadd@exp2,w,c
  5059  0022E4  5C39               	subwf	___ftadd@exp1,w,c
  5060  0022E6  B0D8               	btfsc	status,0,c
  5061  0022E8  D01B               	goto	l628
  5062  0022EA                     u1980:
  5063  0022EA  90D8               	bcf	status,0,c
  5064  0022EC  3631               	rlcf	___ftadd@f2,f,c
  5065  0022EE  3632               	rlcf	___ftadd@f2+1,f,c
  5066  0022F0  3633               	rlcf	___ftadd@f2+2,f,c
  5067  0022F2  0638               	decf	___ftadd@exp2,f,c
  5068  0022F4  5039               	movf	___ftadd@exp1,w,c
  5069  0022F6  1838               	xorwf	___ftadd@exp2,w,c
  5070  0022F8  B4D8               	btfsc	status,2,c
  5071  0022FA  D00D               	goto	l633
  5072  0022FC  0637               	decf	___ftadd@sign,f,c
  5073  0022FE  C037  F034         	movff	___ftadd@sign,??___ftadd
  5074  002302  0E07               	movlw	7
  5075  002304  1634               	andwf	??___ftadd,f,c
  5076  002306  B4D8               	btfsc	status,2,c
  5077  002308  D006               	goto	l633
  5078  00230A  D7EF               	goto	u1980
  5079  00230C  90D8               	bcf	status,0,c
  5080  00230E  3230               	rrcf	___ftadd@f1+2,f,c
  5081  002310  322F               	rrcf	___ftadd@f1+1,f,c
  5082  002312  322E               	rrcf	___ftadd@f1,f,c
  5083  002314  2A39               	incf	___ftadd@exp1,f,c
  5084  002316                     l633:
  5085  002316  5038               	movf	___ftadd@exp2,w,c
  5086  002318  1839               	xorwf	___ftadd@exp1,w,c
  5087  00231A  B4D8               	btfsc	status,2,c
  5088  00231C  D01F               	goto	u2050
  5089  00231E  D7F6               	goto	l634
  5090  002320                     l628:
  5091  002320  5039               	movf	___ftadd@exp1,w,c
  5092  002322  5C38               	subwf	___ftadd@exp2,w,c
  5093  002324  B0D8               	btfsc	status,0,c
  5094  002326  D01A               	goto	u2050
  5095  002328                     u2020:
  5096  002328  90D8               	bcf	status,0,c
  5097  00232A  362E               	rlcf	___ftadd@f1,f,c
  5098  00232C  362F               	rlcf	___ftadd@f1+1,f,c
  5099  00232E  3630               	rlcf	___ftadd@f1+2,f,c
  5100  002330  0639               	decf	___ftadd@exp1,f,c
  5101  002332  5039               	movf	___ftadd@exp1,w,c
  5102  002334  1838               	xorwf	___ftadd@exp2,w,c
  5103  002336  B4D8               	btfsc	status,2,c
  5104  002338  D00D               	goto	l642
  5105  00233A  0637               	decf	___ftadd@sign,f,c
  5106  00233C  C037  F034         	movff	___ftadd@sign,??___ftadd
  5107  002340  0E07               	movlw	7
  5108  002342  1634               	andwf	??___ftadd,f,c
  5109  002344  B4D8               	btfsc	status,2,c
  5110  002346  D006               	goto	l642
  5111  002348  D7EF               	goto	u2020
  5112  00234A  90D8               	bcf	status,0,c
  5113  00234C  3233               	rrcf	___ftadd@f2+2,f,c
  5114  00234E  3232               	rrcf	___ftadd@f2+1,f,c
  5115  002350  3231               	rrcf	___ftadd@f2,f,c
  5116  002352  2A38               	incf	___ftadd@exp2,f,c
  5117  002354                     l642:
  5118  002354  5038               	movf	___ftadd@exp2,w,c
  5119  002356  1839               	xorwf	___ftadd@exp1,w,c
  5120  002358  A4D8               	btfss	status,2,c
  5121  00235A  D7F7               	goto	l643
  5122  00235C                     u2050:
  5123  00235C  AE37               	btfss	___ftadd@sign,7,c
  5124  00235E  D00C               	goto	l645
  5125  002360  0EFF               	movlw	255
  5126  002362  1A2E               	xorwf	___ftadd@f1,f,c
  5127  002364  0EFF               	movlw	255
  5128  002366  1A2F               	xorwf	___ftadd@f1+1,f,c
  5129  002368  0EFF               	movlw	255
  5130  00236A  1A30               	xorwf	___ftadd@f1+2,f,c
  5131  00236C  0E01               	movlw	1
  5132  00236E  262E               	addwf	___ftadd@f1,f,c
  5133  002370  0E00               	movlw	0
  5134  002372  222F               	addwfc	___ftadd@f1+1,f,c
  5135  002374  0E00               	movlw	0
  5136  002376  2230               	addwfc	___ftadd@f1+2,f,c
  5137  002378                     l645:
  5138  002378  AC37               	btfss	___ftadd@sign,6,c
  5139  00237A  D00C               	goto	l646
  5140  00237C  0EFF               	movlw	255
  5141  00237E  1A31               	xorwf	___ftadd@f2,f,c
  5142  002380  0EFF               	movlw	255
  5143  002382  1A32               	xorwf	___ftadd@f2+1,f,c
  5144  002384  0EFF               	movlw	255
  5145  002386  1A33               	xorwf	___ftadd@f2+2,f,c
  5146  002388  0E01               	movlw	1
  5147  00238A  2631               	addwf	___ftadd@f2,f,c
  5148  00238C  0E00               	movlw	0
  5149  00238E  2232               	addwfc	___ftadd@f2+1,f,c
  5150  002390  0E00               	movlw	0
  5151  002392  2233               	addwfc	___ftadd@f2+2,f,c
  5152  002394                     l646:
  5153  002394  0E00               	movlw	0
  5154  002396  6E37               	movwf	___ftadd@sign,c
  5155  002398  502E               	movf	___ftadd@f1,w,c
  5156  00239A  2631               	addwf	___ftadd@f2,f,c
  5157  00239C  502F               	movf	___ftadd@f1+1,w,c
  5158  00239E  2232               	addwfc	___ftadd@f2+1,f,c
  5159  0023A0  5030               	movf	___ftadd@f1+2,w,c
  5160  0023A2  2233               	addwfc	___ftadd@f2+2,f,c
  5161  0023A4  AE33               	btfss	___ftadd@f2+2,7,c
  5162  0023A6  D00E               	goto	l647
  5163  0023A8  0EFF               	movlw	255
  5164  0023AA  1A31               	xorwf	___ftadd@f2,f,c
  5165  0023AC  0EFF               	movlw	255
  5166  0023AE  1A32               	xorwf	___ftadd@f2+1,f,c
  5167  0023B0  0EFF               	movlw	255
  5168  0023B2  1A33               	xorwf	___ftadd@f2+2,f,c
  5169  0023B4  0E01               	movlw	1
  5170  0023B6  2631               	addwf	___ftadd@f2,f,c
  5171  0023B8  0E00               	movlw	0
  5172  0023BA  2232               	addwfc	___ftadd@f2+1,f,c
  5173  0023BC  0E00               	movlw	0
  5174  0023BE  2233               	addwfc	___ftadd@f2+2,f,c
  5175  0023C0  0E01               	movlw	1
  5176  0023C2  6E37               	movwf	___ftadd@sign,c
  5177  0023C4                     l647:
  5178  0023C4  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5179  0023C8  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5180  0023CC  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5181  0023D0  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5182  0023D4  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5183  0023D8  EC89  F014         	call	___ftpack	;wreg free
  5184  0023DC  C001  F02E         	movff	?___ftpack,?___ftadd
  5185  0023E0  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5186  0023E4  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5187  0023E8  0012               	return	
  5188  0023EA                     __end_of___ftadd:
  5189                           	opt stack 0
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf1	equ	0xFE7
  5200                           postdec1	equ	0xFE5
  5201                           fsr1h	equ	0xFE2
  5202                           fsr1l	equ	0xFE1
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           postdec2	equ	0xFDD
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function ___ftneg *****************
  5211 ;; Defined at:
  5212 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  f1              3    0[COMRAM] float 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  3    0[COMRAM] float 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:        3 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_sprintf
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text15
  5240  003076                     __ptext15:
  5241                           	opt stack 0
  5242  003076                     ___ftneg:
  5243                           	opt stack 29
  5244                           
  5245                           ;incstack = 0
  5246  003076  5001               	movf	___ftneg@f1,w,c
  5247  003078  1002               	iorwf	___ftneg@f1+1,w,c
  5248  00307A  1003               	iorwf	___ftneg@f1+2,w,c
  5249  00307C  B4D8               	btfsc	status,2,c
  5250  00307E  D006               	goto	l695
  5251  003080  0E00               	movlw	0
  5252  003082  1A01               	xorwf	___ftneg@f1,f,c
  5253  003084  0E00               	movlw	0
  5254  003086  1A02               	xorwf	___ftneg@f1+1,f,c
  5255  003088  0E80               	movlw	128
  5256  00308A  1A03               	xorwf	___ftneg@f1+2,f,c
  5257  00308C                     l695:
  5258  00308C  C001  F001         	movff	___ftneg@f1,?___ftneg
  5259  003090  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5260  003094  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5261  003098  0012               	return		;funcret
  5262  00309A                     __end_of___ftneg:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           postinc0	equ	0xFEE
  5272                           wreg	equ	0xFE8
  5273                           indf1	equ	0xFE7
  5274                           postdec1	equ	0xFE5
  5275                           fsr1h	equ	0xFE2
  5276                           fsr1l	equ	0xFE1
  5277                           indf2	equ	0xFDF
  5278                           postinc2	equ	0xFDE
  5279                           postdec2	equ	0xFDD
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function ___ftge *****************
  5285 ;; Defined at:
  5286 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  ff1             3    0[COMRAM] float 
  5289 ;;  ff2             3    3[COMRAM] float 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;		None               void
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:        9 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_sprintf
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text16
  5315  0029C0                     __ptext16:
  5316                           	opt stack 0
  5317  0029C0                     ___ftge:
  5318                           	opt stack 29
  5319                           
  5320                           ;incstack = 0
  5321  0029C0  AE03               	btfss	___ftge@ff1+2,7,c
  5322  0029C2  D016               	goto	l677
  5323  0029C4  C001  F007         	movff	___ftge@ff1,??___ftge
  5324  0029C8  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5325  0029CC  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5326  0029D0  1E07               	comf	??___ftge,f,c
  5327  0029D2  1E08               	comf	??___ftge+1,f,c
  5328  0029D4  1E09               	comf	??___ftge+2,f,c
  5329  0029D6  2A07               	incf	??___ftge,f,c
  5330  0029D8  0E00               	movlw	0
  5331  0029DA  2208               	addwfc	??___ftge+1,f,c
  5332  0029DC  2209               	addwfc	??___ftge+2,f,c
  5333  0029DE  0E00               	movlw	0
  5334  0029E0  2407               	addwf	??___ftge,w,c
  5335  0029E2  6E01               	movwf	___ftge@ff1,c
  5336  0029E4  0E00               	movlw	0
  5337  0029E6  2008               	addwfc	??___ftge+1,w,c
  5338  0029E8  6E02               	movwf	___ftge@ff1+1,c
  5339  0029EA  0E80               	movlw	128
  5340  0029EC  2009               	addwfc	??___ftge+2,w,c
  5341  0029EE  6E03               	movwf	___ftge@ff1+2,c
  5342  0029F0                     l677:
  5343  0029F0  AE06               	btfss	___ftge@ff2+2,7,c
  5344  0029F2  D016               	goto	l678
  5345  0029F4  C004  F007         	movff	___ftge@ff2,??___ftge
  5346  0029F8  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5347  0029FC  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5348  002A00  1E07               	comf	??___ftge,f,c
  5349  002A02  1E08               	comf	??___ftge+1,f,c
  5350  002A04  1E09               	comf	??___ftge+2,f,c
  5351  002A06  2A07               	incf	??___ftge,f,c
  5352  002A08  0E00               	movlw	0
  5353  002A0A  2208               	addwfc	??___ftge+1,f,c
  5354  002A0C  2209               	addwfc	??___ftge+2,f,c
  5355  002A0E  0E00               	movlw	0
  5356  002A10  2407               	addwf	??___ftge,w,c
  5357  002A12  6E04               	movwf	___ftge@ff2,c
  5358  002A14  0E00               	movlw	0
  5359  002A16  2008               	addwfc	??___ftge+1,w,c
  5360  002A18  6E05               	movwf	___ftge@ff2+1,c
  5361  002A1A  0E80               	movlw	128
  5362  002A1C  2009               	addwfc	??___ftge+2,w,c
  5363  002A1E  6E06               	movwf	___ftge@ff2+2,c
  5364  002A20                     l678:
  5365  002A20  0E00               	movlw	0
  5366  002A22  1A01               	xorwf	___ftge@ff1,f,c
  5367  002A24  0E00               	movlw	0
  5368  002A26  1A02               	xorwf	___ftge@ff1+1,f,c
  5369  002A28  0E80               	movlw	128
  5370  002A2A  1A03               	xorwf	___ftge@ff1+2,f,c
  5371  002A2C  0E00               	movlw	0
  5372  002A2E  1A04               	xorwf	___ftge@ff2,f,c
  5373  002A30  0E00               	movlw	0
  5374  002A32  1A05               	xorwf	___ftge@ff2+1,f,c
  5375  002A34  0E80               	movlw	128
  5376  002A36  1A06               	xorwf	___ftge@ff2+2,f,c
  5377  002A38  5004               	movf	___ftge@ff2,w,c
  5378  002A3A  5C01               	subwf	___ftge@ff1,w,c
  5379  002A3C  5005               	movf	___ftge@ff2+1,w,c
  5380  002A3E  5802               	subwfb	___ftge@ff1+1,w,c
  5381  002A40  5006               	movf	___ftge@ff2+2,w,c
  5382  002A42  5803               	subwfb	___ftge@ff1+2,w,c
  5383  002A44  B0D8               	btfsc	status,0,c
  5384  002A46  D002               	goto	l2229
  5385  002A48  90D8               	bcf	status,0,c
  5386  002A4A  0012               	return	
  5387  002A4C                     l2229:
  5388  002A4C  80D8               	bsf	status,0,c
  5389  002A4E  0012               	return	
  5390  002A50                     __end_of___ftge:
  5391                           	opt stack 0
  5392                           tblptru	equ	0xFF8
  5393                           tblptrh	equ	0xFF7
  5394                           tblptrl	equ	0xFF6
  5395                           tablat	equ	0xFF5
  5396                           prodh	equ	0xFF4
  5397                           prodl	equ	0xFF3
  5398                           intcon	equ	0xFF2
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           indf1	equ	0xFE7
  5402                           postdec1	equ	0xFE5
  5403                           fsr1h	equ	0xFE2
  5404                           fsr1l	equ	0xFE1
  5405                           indf2	equ	0xFDF
  5406                           postinc2	equ	0xFDE
  5407                           postdec2	equ	0xFDD
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function _setupSerial *****************
  5413 ;; Defined at:
  5414 ;;		line 176 in file "mainBasicCircuit.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  dummy           1    0[COMRAM] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  1    wreg      void 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        1 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_main
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text17
  5442  00309A                     __ptext17:
  5443                           	opt stack 0
  5444  00309A                     _setupSerial:
  5445                           	opt stack 30
  5446                           
  5447                           ;mainBasicCircuit.c: 177: unsigned char dummy;
  5448                           ;mainBasicCircuit.c: 178: BAUDCONbits.BRG16 = 0;
  5449                           
  5450                           ;incstack = 0
  5451  00309A  96B8               	bcf	4024,3,c	;volatile
  5452                           
  5453                           ;mainBasicCircuit.c: 179: TXSTA = 0;
  5454  00309C  0E00               	movlw	0
  5455  00309E  6EAC               	movwf	4012,c	;volatile
  5456                           
  5457                           ;mainBasicCircuit.c: 180: SPBRG = 25;
  5458  0030A0  0E19               	movlw	25
  5459  0030A2  6EAF               	movwf	4015,c	;volatile
  5460                           
  5461                           ;mainBasicCircuit.c: 181: SPBRGH = 0;
  5462  0030A4  0E00               	movlw	0
  5463  0030A6  6EB0               	movwf	4016,c	;volatile
  5464                           
  5465                           ;mainBasicCircuit.c: 182: TXSTAbits.BRGH = 1;
  5466  0030A8  84AC               	bsf	4012,2,c	;volatile
  5467                           
  5468                           ;mainBasicCircuit.c: 183: TXSTAbits.TXEN = 1;
  5469  0030AA  8AAC               	bsf	4012,5,c	;volatile
  5470                           
  5471                           ;mainBasicCircuit.c: 186: RCSTA = 0;
  5472  0030AC  0E00               	movlw	0
  5473  0030AE  6EAB               	movwf	4011,c	;volatile
  5474                           
  5475                           ;mainBasicCircuit.c: 187: RCSTAbits.CREN = 1;
  5476  0030B0  88AB               	bsf	4011,4,c	;volatile
  5477                           
  5478                           ;mainBasicCircuit.c: 188: RCSTAbits.SPEN = 1;
  5479  0030B2  8EAB               	bsf	4011,7,c	;volatile
  5480                           
  5481                           ;mainBasicCircuit.c: 189: ;
  5482                           ;mainBasicCircuit.c: 190: dummy = RCREG;
  5483  0030B4  CFAE F001          	movff	4014,setupSerial@dummy	;volatile
  5484                           
  5485                           ;mainBasicCircuit.c: 191: dummy = RCREG;
  5486  0030B8  CFAE F001          	movff	4014,setupSerial@dummy	;volatile
  5487  0030BC  0012               	return	
  5488  0030BE                     __end_of_setupSerial:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           intcon	equ	0xFF2
  5497                           postinc0	equ	0xFEE
  5498                           wreg	equ	0xFE8
  5499                           indf1	equ	0xFE7
  5500                           postdec1	equ	0xFE5
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _send_string_no_lib *****************
  5511 ;; Defined at:
  5512 ;;		line 220 in file "mainBasicCircuit.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  p               2    1[COMRAM] PTR unsigned char 
  5515 ;;		 -> buffer(32), 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;Total ram usage:        2 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		_send_byte_no_lib
  5536 ;; This function is called by:
  5537 ;;		_main
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text18
  5542  0030BE                     __ptext18:
  5543                           	opt stack 0
  5544  0030BE                     _send_string_no_lib:
  5545                           	opt stack 29
  5546                           
  5547                           ;mainBasicCircuit.c: 221: while (*p) {
  5548                           
  5549                           ;incstack = 0
  5550  0030BE  D009               	goto	l193
  5551  0030C0                     
  5552                           ;mainBasicCircuit.c: 222: send_byte_no_lib(*p);
  5553  0030C0  C002  FFD9         	movff	send_string_no_lib@p,fsr2l
  5554  0030C4  C003  FFDA         	movff	send_string_no_lib@p+1,fsr2h
  5555  0030C8  50DF               	movf	indf2,w,c
  5556  0030CA  ECBD  F018         	call	_send_byte_no_lib
  5557                           
  5558                           ;mainBasicCircuit.c: 223: p++;
  5559  0030CE  4A02               	infsnz	send_string_no_lib@p,f,c
  5560  0030D0  2A03               	incf	send_string_no_lib@p+1,f,c
  5561  0030D2                     l193:
  5562  0030D2  C002  FFD9         	movff	send_string_no_lib@p,fsr2l
  5563  0030D6  C003  FFDA         	movff	send_string_no_lib@p+1,fsr2h
  5564  0030DA  50DF               	movf	indf2,w,c
  5565  0030DC  B4D8               	btfsc	status,2,c
  5566  0030DE  0012               	return	
  5567  0030E0  D7EF               	goto	l194
  5568  0030E2                     __end_of_send_string_no_lib:
  5569                           	opt stack 0
  5570                           tblptru	equ	0xFF8
  5571                           tblptrh	equ	0xFF7
  5572                           tblptrl	equ	0xFF6
  5573                           tablat	equ	0xFF5
  5574                           prodh	equ	0xFF4
  5575                           prodl	equ	0xFF3
  5576                           intcon	equ	0xFF2
  5577                           postinc0	equ	0xFEE
  5578                           wreg	equ	0xFE8
  5579                           indf1	equ	0xFE7
  5580                           postdec1	equ	0xFE5
  5581                           fsr1h	equ	0xFE2
  5582                           fsr1l	equ	0xFE1
  5583                           indf2	equ	0xFDF
  5584                           postinc2	equ	0xFDE
  5585                           postdec2	equ	0xFDD
  5586                           fsr2h	equ	0xFDA
  5587                           fsr2l	equ	0xFD9
  5588                           status	equ	0xFD8
  5589                           
  5590 ;; *************** function _send_byte_no_lib *****************
  5591 ;; Defined at:
  5592 ;;		line 212 in file "mainBasicCircuit.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  c               1    wreg     unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  c               1    0[COMRAM] unsigned char 
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      void 
  5599 ;; Registers used:
  5600 ;;		wreg
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;Total ram usage:        1 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_send_string_no_lib
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text19
  5620  00317A                     __ptext19:
  5621                           	opt stack 0
  5622  00317A                     _send_byte_no_lib:
  5623                           	opt stack 29
  5624                           
  5625                           ;incstack = 0
  5626                           ;send_byte_no_lib@c stored from wreg
  5627  00317A  6E01               	movwf	send_byte_no_lib@c,c
  5628                           
  5629                           ;mainBasicCircuit.c: 213: while (!TXSTAbits.TRMT)
  5630  00317C  D001               	goto	l187
  5631  00317E                     l188:
  5632  00317E  0004               	clrwdt		;# 
  5633  003180                     l187:
  5634  003180  A2AC               	btfss	4012,1,c	;volatile
  5635  003182  D7FD               	goto	l188
  5636                           
  5637                           ;mainBasicCircuit.c: 216: }
  5638                           ;mainBasicCircuit.c: 217: TXREG = c;
  5639  003184  C001  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  5640  003188  0012               	return		;funcret
  5641  00318A                     __end_of_send_byte_no_lib:
  5642                           	opt stack 0
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           postinc0	equ	0xFEE
  5651                           wreg	equ	0xFE8
  5652                           indf1	equ	0xFE7
  5653                           postdec1	equ	0xFE5
  5654                           fsr1h	equ	0xFE2
  5655                           fsr1l	equ	0xFE1
  5656                           indf2	equ	0xFDF
  5657                           postinc2	equ	0xFDE
  5658                           postdec2	equ	0xFDD
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function _read_byte_no_lib *****************
  5664 ;; Defined at:
  5665 ;;		line 195 in file "mainBasicCircuit.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;		None
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  c               1    0[COMRAM] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      unsigned char 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;Total ram usage:        1 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; This function calls:
  5686 ;;		Nothing
  5687 ;; This function is called by:
  5688 ;;		_main
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text20
  5693  003146                     __ptext20:
  5694                           	opt stack 0
  5695  003146                     _read_byte_no_lib:
  5696                           	opt stack 30
  5697                           
  5698                           ;mainBasicCircuit.c: 196: unsigned char c;
  5699                           ;mainBasicCircuit.c: 198: if (RCSTAbits.FERR || RCSTAbits.OERR)
  5700                           
  5701                           ;incstack = 0
  5702  003146  B4AB               	btfsc	4011,2,c	;volatile
  5703  003148  D002               	goto	u3400
  5704  00314A  A2AB               	btfss	4011,1,c	;volatile
  5705  00314C  D004               	goto	l181
  5706  00314E                     u3400:
  5707                           
  5708                           ;mainBasicCircuit.c: 199: {
  5709                           ;mainBasicCircuit.c: 200: RCSTAbits.CREN = 0;
  5710  00314E  98AB               	bcf	4011,4,c	;volatile
  5711                           
  5712                           ;mainBasicCircuit.c: 201: RCSTAbits.CREN = 1;
  5713  003150  88AB               	bsf	4011,4,c	;volatile
  5714                           
  5715                           ;mainBasicCircuit.c: 202: }
  5716                           ;mainBasicCircuit.c: 205: while (!(PIR1bits.RCIF)) {
  5717  003152  D001               	goto	l181
  5718  003154                     l182:
  5719  003154  0004               	clrwdt		;# 
  5720  003156                     l181:
  5721  003156  AA9E               	btfss	3998,5,c	;volatile
  5722  003158  D7FD               	goto	l182
  5723                           
  5724                           ;mainBasicCircuit.c: 207: }
  5725                           ;mainBasicCircuit.c: 208: c = RCREG;
  5726  00315A  CFAE F001          	movff	4014,read_byte_no_lib@c	;volatile
  5727                           
  5728                           ;mainBasicCircuit.c: 209: return c;
  5729  00315E  5001               	movf	read_byte_no_lib@c,w,c
  5730  003160  0012               	return	
  5731  003162                     __end_of_read_byte_no_lib:
  5732                           	opt stack 0
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           indf1	equ	0xFE7
  5743                           postdec1	equ	0xFE5
  5744                           fsr1h	equ	0xFE2
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _read_adc_voltage *****************
  5754 ;; Defined at:
  5755 ;;		line 244 in file "mainBasicCircuit.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  channel         1    wreg     unsigned char 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  channel         1   47[COMRAM] unsigned char 
  5760 ;;  voltage         3   42[COMRAM] float 
  5761 ;;  raw_value       2   45[COMRAM] int 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  3   39[COMRAM] float 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5771 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;Total ram usage:        9 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    2
  5778 ;; This function calls:
  5779 ;;		___awtoft
  5780 ;;		___ftdiv
  5781 ;;		___wmul
  5782 ;;		_read_adc_raw_no_lib
  5783 ;; This function is called by:
  5784 ;;		_main
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text21
  5789  002CBA                     __ptext21:
  5790                           	opt stack 0
  5791  002CBA                     _read_adc_voltage:
  5792                           	opt stack 28
  5793                           
  5794                           ;incstack = 0
  5795                           ;read_adc_voltage@channel stored from wreg
  5796  002CBA  6E30               	movwf	read_adc_voltage@channel,c
  5797                           
  5798                           ;mainBasicCircuit.c: 245: int raw_value;
  5799                           ;mainBasicCircuit.c: 246: float voltage;
  5800                           ;mainBasicCircuit.c: 247: raw_value = read_adc_raw_no_lib(channel);
  5801  002CBC  5030               	movf	read_adc_voltage@channel,w,c
  5802  002CBE  ECB0  F017         	call	_read_adc_raw_no_lib
  5803  002CC2  C001  F02E         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  5804  002CC6  C002  F02F         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  5805                           
  5806                           ;mainBasicCircuit.c: 248: voltage = (raw_value * 5) / 1023.0;
  5807  002CCA  C02E  F00F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  5808  002CCE  C02F  F010         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  5809  002CD2  0E00               	movlw	0
  5810  002CD4  6E12               	movwf	___wmul@multiplicand+1,c
  5811  002CD6  0E05               	movlw	5
  5812  002CD8  6E11               	movwf	___wmul@multiplicand,c
  5813  002CDA  EC15  F018         	call	___wmul	;wreg free
  5814  002CDE  C00F  F015         	movff	?___wmul,___awtoft@c
  5815  002CE2  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5816  002CE6  ECCD  F017         	call	___awtoft	;wreg free
  5817  002CEA  C015  F019         	movff	?___awtoft,___ftdiv@f1
  5818  002CEE  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  5819  002CF2  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  5820  002CF6  0EC0               	movlw	192
  5821  002CF8  6E1C               	movwf	___ftdiv@f2,c
  5822  002CFA  0E7F               	movlw	127
  5823  002CFC  6E1D               	movwf	___ftdiv@f2+1,c
  5824  002CFE  0E44               	movlw	68
  5825  002D00  6E1E               	movwf	___ftdiv@f2+2,c
  5826  002D02  EC16  F014         	call	___ftdiv	;wreg free
  5827  002D06  C019  F02B         	movff	?___ftdiv,read_adc_voltage@voltage
  5828  002D0A  C01A  F02C         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  5829  002D0E  C01B  F02D         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  5830                           
  5831                           ;mainBasicCircuit.c: 249: return voltage;
  5832  002D12  C02B  F028         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  5833  002D16  C02C  F029         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  5834  002D1A  C02D  F02A         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  5835  002D1E  0012               	return	
  5836  002D20                     __end_of_read_adc_voltage:
  5837                           	opt stack 0
  5838                           tblptru	equ	0xFF8
  5839                           tblptrh	equ	0xFF7
  5840                           tblptrl	equ	0xFF6
  5841                           tablat	equ	0xFF5
  5842                           prodh	equ	0xFF4
  5843                           prodl	equ	0xFF3
  5844                           intcon	equ	0xFF2
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           indf1	equ	0xFE7
  5848                           postdec1	equ	0xFE5
  5849                           fsr1h	equ	0xFE2
  5850                           fsr1l	equ	0xFE1
  5851                           indf2	equ	0xFDF
  5852                           postinc2	equ	0xFDE
  5853                           postdec2	equ	0xFDD
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function _read_adc_temp *****************
  5859 ;; Defined at:
  5860 ;;		line 45 in file "my_adc.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  channel         1    wreg     unsigned char 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  channel         1   50[COMRAM] unsigned char 
  5865 ;;  temp            3   45[COMRAM] float 
  5866 ;;  voltage         3   42[COMRAM] float 
  5867 ;;  raw_value       2   48[COMRAM] int 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  3   39[COMRAM] float 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5877 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;Total ram usage:       12 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    2
  5884 ;; This function calls:
  5885 ;;		___awtoft
  5886 ;;		___ftdiv
  5887 ;;		___ftmul
  5888 ;;		___wmul
  5889 ;;		_read_adc_raw_no_lib
  5890 ;; This function is called by:
  5891 ;;		_main
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text22
  5896  002A50                     __ptext22:
  5897                           	opt stack 0
  5898  002A50                     _read_adc_temp:
  5899                           	opt stack 28
  5900                           
  5901                           ;incstack = 0
  5902                           ;read_adc_temp@channel stored from wreg
  5903  002A50  6E33               	movwf	read_adc_temp@channel,c
  5904                           
  5905                           ;my_adc.c: 46: int raw_value;
  5906                           ;my_adc.c: 47: float voltage;
  5907                           ;my_adc.c: 48: raw_value = read_adc_raw_no_lib(channel);
  5908  002A52  5033               	movf	read_adc_temp@channel,w,c
  5909  002A54  ECB0  F017         	call	_read_adc_raw_no_lib
  5910  002A58  C001  F031         	movff	?_read_adc_raw_no_lib,read_adc_temp@raw_value
  5911  002A5C  C002  F032         	movff	?_read_adc_raw_no_lib+1,read_adc_temp@raw_value+1
  5912                           
  5913                           ;my_adc.c: 49: voltage = (raw_value * 5) / 1023.0;
  5914  002A60  C031  F00F         	movff	read_adc_temp@raw_value,___wmul@multiplier
  5915  002A64  C032  F010         	movff	read_adc_temp@raw_value+1,___wmul@multiplier+1
  5916  002A68  0E00               	movlw	0
  5917  002A6A  6E12               	movwf	___wmul@multiplicand+1,c
  5918  002A6C  0E05               	movlw	5
  5919  002A6E  6E11               	movwf	___wmul@multiplicand,c
  5920  002A70  EC15  F018         	call	___wmul	;wreg free
  5921  002A74  C00F  F015         	movff	?___wmul,___awtoft@c
  5922  002A78  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5923  002A7C  ECCD  F017         	call	___awtoft	;wreg free
  5924  002A80  C015  F019         	movff	?___awtoft,___ftdiv@f1
  5925  002A84  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  5926  002A88  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  5927  002A8C  0EC0               	movlw	192
  5928  002A8E  6E1C               	movwf	___ftdiv@f2,c
  5929  002A90  0E7F               	movlw	127
  5930  002A92  6E1D               	movwf	___ftdiv@f2+1,c
  5931  002A94  0E44               	movlw	68
  5932  002A96  6E1E               	movwf	___ftdiv@f2+2,c
  5933  002A98  EC16  F014         	call	___ftdiv	;wreg free
  5934  002A9C  C019  F02B         	movff	?___ftdiv,read_adc_temp@voltage
  5935  002AA0  C01A  F02C         	movff	?___ftdiv+1,read_adc_temp@voltage+1
  5936  002AA4  C01B  F02D         	movff	?___ftdiv+2,read_adc_temp@voltage+2
  5937                           
  5938                           ;my_adc.c: 55: float temp ;
  5939                           ;my_adc.c: 57: temp= voltage*100;
  5940  002AA8  C02B  F015         	movff	read_adc_temp@voltage,___ftmul@f1
  5941  002AAC  C02C  F016         	movff	read_adc_temp@voltage+1,___ftmul@f1+1
  5942  002AB0  C02D  F017         	movff	read_adc_temp@voltage+2,___ftmul@f1+2
  5943  002AB4  0E00               	movlw	0
  5944  002AB6  6E18               	movwf	___ftmul@f2,c
  5945  002AB8  0EC8               	movlw	200
  5946  002ABA  6E19               	movwf	___ftmul@f2+1,c
  5947  002ABC  0E42               	movlw	66
  5948  002ABE  6E1A               	movwf	___ftmul@f2+2,c
  5949  002AC0  EC9C  F013         	call	___ftmul	;wreg free
  5950  002AC4  C015  F02E         	movff	?___ftmul,read_adc_temp@temp
  5951  002AC8  C016  F02F         	movff	?___ftmul+1,read_adc_temp@temp+1
  5952  002ACC  C017  F030         	movff	?___ftmul+2,read_adc_temp@temp+2
  5953                           
  5954                           ;my_adc.c: 58: return temp;
  5955  002AD0  C02E  F028         	movff	read_adc_temp@temp,?_read_adc_temp
  5956  002AD4  C02F  F029         	movff	read_adc_temp@temp+1,?_read_adc_temp+1
  5957  002AD8  C030  F02A         	movff	read_adc_temp@temp+2,?_read_adc_temp+2
  5958  002ADC  0012               	return	
  5959  002ADE                     __end_of_read_adc_temp:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           intcon	equ	0xFF2
  5968                           postinc0	equ	0xFEE
  5969                           wreg	equ	0xFE8
  5970                           indf1	equ	0xFE7
  5971                           postdec1	equ	0xFE5
  5972                           fsr1h	equ	0xFE2
  5973                           fsr1l	equ	0xFE1
  5974                           indf2	equ	0xFDF
  5975                           postinc2	equ	0xFDE
  5976                           postdec2	equ	0xFDD
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function _read_adc_raw_no_lib *****************
  5982 ;; Defined at:
  5983 ;;		line 29 in file "my_adc.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  channel         1    wreg     unsigned char 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  channel         1    6[COMRAM] unsigned char 
  5988 ;;  raw_value       2    4[COMRAM] int 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  2    0[COMRAM] int 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;Total ram usage:        7 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_read_adc_voltage
  6008 ;;		_read_adc_temp
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text23
  6013  002F60                     __ptext23:
  6014                           	opt stack 0
  6015  002F60                     _read_adc_raw_no_lib:
  6016                           	opt stack 29
  6017                           
  6018                           ;incstack = 0
  6019                           ;read_adc_raw_no_lib@channel stored from wreg
  6020  002F60  6E07               	movwf	read_adc_raw_no_lib@channel,c
  6021                           
  6022                           ;my_adc.c: 30: int raw_value;
  6023                           ;my_adc.c: 32: ADCON0bits.CHS = channel ;
  6024  002F62  C007  F003         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  6025  002F66  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  6026  002F68  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  6027  002F6A  50C2               	movf	4034,w,c	;volatile
  6028  002F6C  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  6029  002F6E  0BC3               	andlw	-61
  6030  002F70  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  6031  002F72  6EC2               	movwf	4034,c	;volatile
  6032                           
  6033                           ;my_adc.c: 35: ADCON0bits.GO = 1;
  6034  002F74  82C2               	bsf	4034,1,c	;volatile
  6035  002F76  B2C2               	btfsc	4034,1,c	;volatile
  6036  002F78  D7FE               	goto	l230
  6037                           
  6038                           ;my_adc.c: 37: raw_value = ADRESH << 8 | ADRESL;
  6039  002F7A  50C3               	movf	4035,w,c	;volatile
  6040  002F7C  CFC4 F003          	movff	4036,??_read_adc_raw_no_lib	;volatile
  6041  002F80  6A04               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  6042  002F82  C003  F004         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  6043  002F86  6A03               	clrf	??_read_adc_raw_no_lib,c
  6044  002F88  1003               	iorwf	??_read_adc_raw_no_lib,w,c
  6045  002F8A  6E05               	movwf	read_adc_raw_no_lib@raw_value,c
  6046  002F8C  5004               	movf	??_read_adc_raw_no_lib+1,w,c
  6047  002F8E  6E06               	movwf	read_adc_raw_no_lib@raw_value+1,c
  6048                           
  6049                           ;my_adc.c: 42: return raw_value;
  6050  002F90  C005  F001         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  6051  002F94  C006  F002         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  6052  002F98  0012               	return	
  6053  002F9A                     __end_of_read_adc_raw_no_lib:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           indf1	equ	0xFE7
  6065                           postdec1	equ	0xFE5
  6066                           fsr1h	equ	0xFE2
  6067                           fsr1l	equ	0xFE1
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function ___wmul *****************
  6076 ;; Defined at:
  6077 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  multiplier      2   14[COMRAM] unsigned int 
  6080 ;;  multiplicand    2   16[COMRAM] unsigned int 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  product         2   18[COMRAM] unsigned int 
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  2   14[COMRAM] unsigned int 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0, prodl, prodh
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;Total ram usage:        6 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_read_adc_voltage
  6102 ;;		_read_adc_temp
  6103 ;;		_fround
  6104 ;;		_scale
  6105 ;;		_sprintf
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text24
  6110  00302A                     __ptext24:
  6111                           	opt stack 0
  6112  00302A                     ___wmul:
  6113                           	opt stack 28
  6114                           
  6115                           ;incstack = 0
  6116  00302A  500F               	movf	___wmul@multiplier,w,c
  6117  00302C  0211               	mulwf	___wmul@multiplicand,c
  6118  00302E  CFF3 F013          	movff	prodl,___wmul@product
  6119  003032  CFF4 F014          	movff	prodh,___wmul@product+1
  6120  003036  500F               	movf	___wmul@multiplier,w,c
  6121  003038  0212               	mulwf	___wmul@multiplicand+1,c
  6122  00303A  50F3               	movf	prodl,w,c
  6123  00303C  2614               	addwf	___wmul@product+1,f,c
  6124  00303E  5010               	movf	___wmul@multiplier+1,w,c
  6125  003040  0211               	mulwf	___wmul@multiplicand,c
  6126  003042  50F3               	movf	prodl,w,c
  6127  003044  2614               	addwf	___wmul@product+1,f,c
  6128  003046  C013  F00F         	movff	___wmul@product,?___wmul
  6129  00304A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  6130  00304E  0012               	return	
  6131  003050                     __end_of___wmul:
  6132                           	opt stack 0
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           postinc0	equ	0xFEE
  6141                           wreg	equ	0xFE8
  6142                           indf1	equ	0xFE7
  6143                           postdec1	equ	0xFE5
  6144                           fsr1h	equ	0xFE2
  6145                           fsr1l	equ	0xFE1
  6146                           indf2	equ	0xFDF
  6147                           postinc2	equ	0xFDE
  6148                           postdec2	equ	0xFDD
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function ___ftmul *****************
  6154 ;; Defined at:
  6155 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;  f1              3   20[COMRAM] float 
  6158 ;;  f2              3   23[COMRAM] float 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  6161 ;;  sign            1   34[COMRAM] unsigned char 
  6162 ;;  cntr            1   33[COMRAM] unsigned char 
  6163 ;;  exp             1   29[COMRAM] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  3   20[COMRAM] float 
  6166 ;; Registers used:
  6167 ;;		wreg, status,2, status,0, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6173 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;Total ram usage:       15 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    1
  6180 ;; This function calls:
  6181 ;;		___ftpack
  6182 ;; This function is called by:
  6183 ;;		_read_adc_temp
  6184 ;;		_fround
  6185 ;;		_scale
  6186 ;;		_sprintf
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text25
  6191  002738                     __ptext25:
  6192                           	opt stack 0
  6193  002738                     ___ftmul:
  6194                           	opt stack 27
  6195                           
  6196                           ;incstack = 0
  6197  002738  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  6198  00273C  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  6199  00273E  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  6200  002740  3416               	rlcf	___ftmul@f1+1,w,c
  6201  002742  361B               	rlcf	??___ftmul& (0+255),f,c
  6202  002744  E301               	bnc	u2091
  6203  002746  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  6204  002748                     u2091:
  6205  002748  501B               	movf	??___ftmul,w,c
  6206  00274A  6E1E               	movwf	___ftmul@exp,c
  6207  00274C  501E               	movf	___ftmul@exp,w,c
  6208  00274E  A4D8               	btfss	status,2,c
  6209  002750  D007               	goto	l684
  6210  002752  0E00               	movlw	0
  6211  002754  6E15               	movwf	?___ftmul,c
  6212  002756  0E00               	movlw	0
  6213  002758  6E16               	movwf	?___ftmul+1,c
  6214  00275A  0E00               	movlw	0
  6215  00275C  6E17               	movwf	?___ftmul+2,c
  6216  00275E  0012               	return	
  6217  002760                     l684:
  6218  002760  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  6219  002764  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  6220  002766  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  6221  002768  3419               	rlcf	___ftmul@f2+1,w,c
  6222  00276A  361B               	rlcf	??___ftmul& (0+255),f,c
  6223  00276C  E301               	bnc	u2111
  6224  00276E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  6225  002770                     u2111:
  6226  002770  501B               	movf	??___ftmul,w,c
  6227  002772  6E23               	movwf	___ftmul@sign,c
  6228  002774  5023               	movf	___ftmul@sign,w,c
  6229  002776  A4D8               	btfss	status,2,c
  6230  002778  D007               	goto	l686
  6231  00277A  0E00               	movlw	0
  6232  00277C  6E15               	movwf	?___ftmul,c
  6233  00277E  0E00               	movlw	0
  6234  002780  6E16               	movwf	?___ftmul+1,c
  6235  002782  0E00               	movlw	0
  6236  002784  6E17               	movwf	?___ftmul+2,c
  6237  002786  0012               	return	
  6238  002788                     l686:
  6239  002788  5023               	movf	___ftmul@sign,w,c
  6240  00278A  0F7B               	addlw	123
  6241  00278C  261E               	addwf	___ftmul@exp,f,c
  6242  00278E  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  6243  002792  501A               	movf	___ftmul@f2+2,w,c
  6244  002794  1A23               	xorwf	___ftmul@sign,f,c
  6245  002796  0E80               	movlw	128
  6246  002798  1623               	andwf	___ftmul@sign,f,c
  6247  00279A  8E16               	bsf	___ftmul@f1+1,7,c
  6248  00279C  8E19               	bsf	___ftmul@f2+1,7,c
  6249  00279E  0EFF               	movlw	255
  6250  0027A0  1618               	andwf	___ftmul@f2,f,c
  6251  0027A2  0EFF               	movlw	255
  6252  0027A4  1619               	andwf	___ftmul@f2+1,f,c
  6253  0027A6  0E00               	movlw	0
  6254  0027A8  161A               	andwf	___ftmul@f2+2,f,c
  6255  0027AA  0E00               	movlw	0
  6256  0027AC  6E1F               	movwf	___ftmul@f3_as_product,c
  6257  0027AE  0E00               	movlw	0
  6258  0027B0  6E20               	movwf	___ftmul@f3_as_product+1,c
  6259  0027B2  0E00               	movlw	0
  6260  0027B4  6E21               	movwf	___ftmul@f3_as_product+2,c
  6261  0027B6  0E07               	movlw	7
  6262  0027B8  6E22               	movwf	___ftmul@cntr,c
  6263  0027BA  A015               	btfss	___ftmul@f1,0,c
  6264  0027BC  D006               	goto	l688
  6265  0027BE  5018               	movf	___ftmul@f2,w,c
  6266  0027C0  261F               	addwf	___ftmul@f3_as_product,f,c
  6267  0027C2  5019               	movf	___ftmul@f2+1,w,c
  6268  0027C4  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  6269  0027C6  501A               	movf	___ftmul@f2+2,w,c
  6270  0027C8  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6271  0027CA                     l688:
  6272  0027CA  90D8               	bcf	status,0,c
  6273  0027CC  3217               	rrcf	___ftmul@f1+2,f,c
  6274  0027CE  3216               	rrcf	___ftmul@f1+1,f,c
  6275  0027D0  3215               	rrcf	___ftmul@f1,f,c
  6276  0027D2  90D8               	bcf	status,0,c
  6277  0027D4  3618               	rlcf	___ftmul@f2,f,c
  6278  0027D6  3619               	rlcf	___ftmul@f2+1,f,c
  6279  0027D8  361A               	rlcf	___ftmul@f2+2,f,c
  6280  0027DA  2E22               	decfsz	___ftmul@cntr,f,c
  6281  0027DC  D7EE               	goto	l687
  6282  0027DE  0E09               	movlw	9
  6283  0027E0  6E22               	movwf	___ftmul@cntr,c
  6284  0027E2  A015               	btfss	___ftmul@f1,0,c
  6285  0027E4  D006               	goto	l691
  6286  0027E6  5018               	movf	___ftmul@f2,w,c
  6287  0027E8  261F               	addwf	___ftmul@f3_as_product,f,c
  6288  0027EA  5019               	movf	___ftmul@f2+1,w,c
  6289  0027EC  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  6290  0027EE  501A               	movf	___ftmul@f2+2,w,c
  6291  0027F0  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  6292  0027F2                     l691:
  6293  0027F2  90D8               	bcf	status,0,c
  6294  0027F4  3217               	rrcf	___ftmul@f1+2,f,c
  6295  0027F6  3216               	rrcf	___ftmul@f1+1,f,c
  6296  0027F8  3215               	rrcf	___ftmul@f1,f,c
  6297  0027FA  90D8               	bcf	status,0,c
  6298  0027FC  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  6299  0027FE  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  6300  002800  321F               	rrcf	___ftmul@f3_as_product,f,c
  6301  002802  2E22               	decfsz	___ftmul@cntr,f,c
  6302  002804  D7EE               	goto	l690
  6303  002806  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6304  00280A  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6305  00280E  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6306  002812  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  6307  002816  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  6308  00281A  EC89  F014         	call	___ftpack	;wreg free
  6309  00281E  C001  F015         	movff	?___ftpack,?___ftmul
  6310  002822  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  6311  002826  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  6312  00282A  0012               	return	
  6313  00282C                     __end_of___ftmul:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           postinc0	equ	0xFEE
  6323                           wreg	equ	0xFE8
  6324                           indf1	equ	0xFE7
  6325                           postdec1	equ	0xFE5
  6326                           fsr1h	equ	0xFE2
  6327                           fsr1l	equ	0xFE1
  6328                           indf2	equ	0xFDF
  6329                           postinc2	equ	0xFDE
  6330                           postdec2	equ	0xFDD
  6331                           fsr2h	equ	0xFDA
  6332                           fsr2l	equ	0xFD9
  6333                           status	equ	0xFD8
  6334                           
  6335 ;; *************** function ___ftdiv *****************
  6336 ;; Defined at:
  6337 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;  f1              3   24[COMRAM] float 
  6340 ;;  f2              3   27[COMRAM] float 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  f3              3   34[COMRAM] float 
  6343 ;;  sign            1   38[COMRAM] unsigned char 
  6344 ;;  exp             1   37[COMRAM] unsigned char 
  6345 ;;  cntr            1   33[COMRAM] unsigned char 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  3   24[COMRAM] float 
  6348 ;; Registers used:
  6349 ;;		wreg, status,2, status,0, cstack
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6355 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;Total ram usage:       15 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    1
  6362 ;; This function calls:
  6363 ;;		___ftpack
  6364 ;; This function is called by:
  6365 ;;		_read_adc_voltage
  6366 ;;		_read_adc_temp
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text26
  6371  00282C                     __ptext26:
  6372                           	opt stack 0
  6373  00282C                     ___ftdiv:
  6374                           	opt stack 28
  6375                           
  6376                           ;incstack = 0
  6377  00282C  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
  6378  002830  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  6379  002832  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  6380  002834  341A               	rlcf	___ftdiv@f1+1,w,c
  6381  002836  361F               	rlcf	??___ftdiv& (0+255),f,c
  6382  002838  E301               	bnc	u2541
  6383  00283A  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  6384  00283C                     u2541:
  6385  00283C  501F               	movf	??___ftdiv,w,c
  6386  00283E  6E26               	movwf	___ftdiv@exp,c
  6387  002840  5026               	movf	___ftdiv@exp,w,c
  6388  002842  A4D8               	btfss	status,2,c
  6389  002844  D007               	goto	l652
  6390  002846  0E00               	movlw	0
  6391  002848  6E19               	movwf	?___ftdiv,c
  6392  00284A  0E00               	movlw	0
  6393  00284C  6E1A               	movwf	?___ftdiv+1,c
  6394  00284E  0E00               	movlw	0
  6395  002850  6E1B               	movwf	?___ftdiv+2,c
  6396  002852  0012               	return	
  6397  002854                     l652:
  6398  002854  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
  6399  002858  6A20               	clrf	(??___ftdiv+1)& (0+255),c
  6400  00285A  6A21               	clrf	(??___ftdiv+2)& (0+255),c
  6401  00285C  341D               	rlcf	___ftdiv@f2+1,w,c
  6402  00285E  361F               	rlcf	??___ftdiv& (0+255),f,c
  6403  002860  E301               	bnc	u2561
  6404  002862  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
  6405  002864                     u2561:
  6406  002864  501F               	movf	??___ftdiv,w,c
  6407  002866  6E27               	movwf	___ftdiv@sign,c
  6408  002868  5027               	movf	___ftdiv@sign,w,c
  6409  00286A  A4D8               	btfss	status,2,c
  6410  00286C  D007               	goto	l654
  6411  00286E  0E00               	movlw	0
  6412  002870  6E19               	movwf	?___ftdiv,c
  6413  002872  0E00               	movlw	0
  6414  002874  6E1A               	movwf	?___ftdiv+1,c
  6415  002876  0E00               	movlw	0
  6416  002878  6E1B               	movwf	?___ftdiv+2,c
  6417  00287A  0012               	return	
  6418  00287C                     l654:
  6419  00287C  0E00               	movlw	0
  6420  00287E  6E23               	movwf	___ftdiv@f3,c
  6421  002880  0E00               	movlw	0
  6422  002882  6E24               	movwf	___ftdiv@f3+1,c
  6423  002884  0E00               	movlw	0
  6424  002886  6E25               	movwf	___ftdiv@f3+2,c
  6425  002888  5027               	movf	___ftdiv@sign,w,c
  6426  00288A  0F89               	addlw	137
  6427  00288C  5E26               	subwf	___ftdiv@exp,f,c
  6428  00288E  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
  6429  002892  501E               	movf	___ftdiv@f2+2,w,c
  6430  002894  1A27               	xorwf	___ftdiv@sign,f,c
  6431  002896  0E80               	movlw	128
  6432  002898  1627               	andwf	___ftdiv@sign,f,c
  6433  00289A  8E1A               	bsf	___ftdiv@f1+1,7,c
  6434  00289C  0EFF               	movlw	255
  6435  00289E  1619               	andwf	___ftdiv@f1,f,c
  6436  0028A0  0EFF               	movlw	255
  6437  0028A2  161A               	andwf	___ftdiv@f1+1,f,c
  6438  0028A4  0E00               	movlw	0
  6439  0028A6  161B               	andwf	___ftdiv@f1+2,f,c
  6440  0028A8  8E1D               	bsf	___ftdiv@f2+1,7,c
  6441  0028AA  0EFF               	movlw	255
  6442  0028AC  161C               	andwf	___ftdiv@f2,f,c
  6443  0028AE  0EFF               	movlw	255
  6444  0028B0  161D               	andwf	___ftdiv@f2+1,f,c
  6445  0028B2  0E00               	movlw	0
  6446  0028B4  161E               	andwf	___ftdiv@f2+2,f,c
  6447  0028B6  0E18               	movlw	24
  6448  0028B8  6E22               	movwf	___ftdiv@cntr,c
  6449  0028BA  90D8               	bcf	status,0,c
  6450  0028BC  3623               	rlcf	___ftdiv@f3,f,c
  6451  0028BE  3624               	rlcf	___ftdiv@f3+1,f,c
  6452  0028C0  3625               	rlcf	___ftdiv@f3+2,f,c
  6453  0028C2  501C               	movf	___ftdiv@f2,w,c
  6454  0028C4  5C19               	subwf	___ftdiv@f1,w,c
  6455  0028C6  501D               	movf	___ftdiv@f2+1,w,c
  6456  0028C8  581A               	subwfb	___ftdiv@f1+1,w,c
  6457  0028CA  501E               	movf	___ftdiv@f2+2,w,c
  6458  0028CC  581B               	subwfb	___ftdiv@f1+2,w,c
  6459  0028CE  A0D8               	btfss	status,0,c
  6460  0028D0  D007               	goto	l656
  6461  0028D2  501C               	movf	___ftdiv@f2,w,c
  6462  0028D4  5E19               	subwf	___ftdiv@f1,f,c
  6463  0028D6  501D               	movf	___ftdiv@f2+1,w,c
  6464  0028D8  5A1A               	subwfb	___ftdiv@f1+1,f,c
  6465  0028DA  501E               	movf	___ftdiv@f2+2,w,c
  6466  0028DC  5A1B               	subwfb	___ftdiv@f1+2,f,c
  6467  0028DE  8023               	bsf	___ftdiv@f3,0,c
  6468  0028E0                     l656:
  6469  0028E0  90D8               	bcf	status,0,c
  6470  0028E2  3619               	rlcf	___ftdiv@f1,f,c
  6471  0028E4  361A               	rlcf	___ftdiv@f1+1,f,c
  6472  0028E6  361B               	rlcf	___ftdiv@f1+2,f,c
  6473  0028E8  2E22               	decfsz	___ftdiv@cntr,f,c
  6474  0028EA  D7E7               	goto	l655
  6475  0028EC  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
  6476  0028F0  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6477  0028F4  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6478  0028F8  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
  6479  0028FC  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
  6480  002900  EC89  F014         	call	___ftpack	;wreg free
  6481  002904  C001  F019         	movff	?___ftpack,?___ftdiv
  6482  002908  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
  6483  00290C  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
  6484  002910  0012               	return	
  6485  002912                     __end_of___ftdiv:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodh	equ	0xFF4
  6492                           prodl	equ	0xFF3
  6493                           intcon	equ	0xFF2
  6494                           postinc0	equ	0xFEE
  6495                           wreg	equ	0xFE8
  6496                           indf1	equ	0xFE7
  6497                           postdec1	equ	0xFE5
  6498                           fsr1h	equ	0xFE2
  6499                           fsr1l	equ	0xFE1
  6500                           indf2	equ	0xFDF
  6501                           postinc2	equ	0xFDE
  6502                           postdec2	equ	0xFDD
  6503                           fsr2h	equ	0xFDA
  6504                           fsr2l	equ	0xFD9
  6505                           status	equ	0xFD8
  6506                           
  6507 ;; *************** function ___awtoft *****************
  6508 ;; Defined at:
  6509 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;  c               2   20[COMRAM] int 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  sign            1   23[COMRAM] unsigned char 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  3   20[COMRAM] float 
  6516 ;; Registers used:
  6517 ;;		wreg, status,2, status,0, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6523 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;Total ram usage:        4 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    1
  6530 ;; This function calls:
  6531 ;;		___ftpack
  6532 ;; This function is called by:
  6533 ;;		_read_adc_voltage
  6534 ;;		_read_adc_temp
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text27
  6539  002F9A                     __ptext27:
  6540                           	opt stack 0
  6541  002F9A                     ___awtoft:
  6542                           	opt stack 28
  6543                           
  6544                           ;incstack = 0
  6545  002F9A  0E00               	movlw	0
  6546  002F9C  6E18               	movwf	___awtoft@sign,c
  6547  002F9E  AE16               	btfss	___awtoft@c+1,7,c
  6548  002FA0  D006               	goto	l552
  6549  002FA2  6C15               	negf	___awtoft@c,c
  6550  002FA4  1E16               	comf	___awtoft@c+1,f,c
  6551  002FA6  B0D8               	btfsc	status,0,c
  6552  002FA8  2A16               	incf	___awtoft@c+1,f,c
  6553  002FAA  0E01               	movlw	1
  6554  002FAC  6E18               	movwf	___awtoft@sign,c
  6555  002FAE                     l552:
  6556  002FAE  C015  F001         	movff	___awtoft@c,___ftpack@arg
  6557  002FB2  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6558  002FB6  6A03               	clrf	___ftpack@arg+2,c
  6559  002FB8  0E8E               	movlw	142
  6560  002FBA  6E04               	movwf	___ftpack@exp,c
  6561  002FBC  C018  F005         	movff	___awtoft@sign,___ftpack@sign
  6562  002FC0  EC89  F014         	call	___ftpack	;wreg free
  6563  002FC4  C001  F015         	movff	?___ftpack,?___awtoft
  6564  002FC8  C002  F016         	movff	?___ftpack+1,?___awtoft+1
  6565  002FCC  C003  F017         	movff	?___ftpack+2,?___awtoft+2
  6566  002FD0  0012               	return	
  6567  002FD2                     __end_of___awtoft:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           postinc0	equ	0xFEE
  6577                           wreg	equ	0xFE8
  6578                           indf1	equ	0xFE7
  6579                           postdec1	equ	0xFE5
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function ___ftpack *****************
  6590 ;; Defined at:
  6591 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  arg             3    0[COMRAM] unsigned um
  6594 ;;  exp             1    3[COMRAM] unsigned char 
  6595 ;;  sign            1    4[COMRAM] unsigned char 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  3    0[COMRAM] float 
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6607 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;Total ram usage:        8 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; This function calls:
  6614 ;;		Nothing
  6615 ;; This function is called by:
  6616 ;;		___awtoft
  6617 ;;		___ftadd
  6618 ;;		___ftdiv
  6619 ;;		___ftmul
  6620 ;;		___lltoft
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text28
  6625  002912                     __ptext28:
  6626                           	opt stack 0
  6627  002912                     ___ftpack:
  6628                           	opt stack 27
  6629                           
  6630                           ;incstack = 0
  6631  002912  5004               	movf	___ftpack@exp,w,c
  6632  002914  B4D8               	btfsc	status,2,c
  6633  002916  D005               	goto	u1810
  6634  002918  5001               	movf	___ftpack@arg,w,c
  6635  00291A  1002               	iorwf	___ftpack@arg+1,w,c
  6636  00291C  1003               	iorwf	___ftpack@arg+2,w,c
  6637  00291E  A4D8               	btfss	status,2,c
  6638  002920  D00C               	goto	l588
  6639  002922                     u1810:
  6640  002922  0E00               	movlw	0
  6641  002924  6E01               	movwf	?___ftpack,c
  6642  002926  0E00               	movlw	0
  6643  002928  6E02               	movwf	?___ftpack+1,c
  6644  00292A  0E00               	movlw	0
  6645  00292C  6E03               	movwf	?___ftpack+2,c
  6646  00292E  0012               	return	
  6647  002930  2A04               	incf	___ftpack@exp,f,c
  6648  002932  90D8               	bcf	status,0,c
  6649  002934  3203               	rrcf	___ftpack@arg+2,f,c
  6650  002936  3202               	rrcf	___ftpack@arg+1,f,c
  6651  002938  3201               	rrcf	___ftpack@arg,f,c
  6652  00293A                     l588:
  6653  00293A  0E00               	movlw	0
  6654  00293C  1401               	andwf	___ftpack@arg,w,c
  6655  00293E  6E06               	movwf	??___ftpack& (0+255),c
  6656  002940  0E00               	movlw	0
  6657  002942  1402               	andwf	___ftpack@arg+1,w,c
  6658  002944  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6659  002946  0EFE               	movlw	254
  6660  002948  1403               	andwf	___ftpack@arg+2,w,c
  6661  00294A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6662  00294C  5006               	movf	??___ftpack,w,c
  6663  00294E  1007               	iorwf	??___ftpack+1,w,c
  6664  002950  1008               	iorwf	??___ftpack+2,w,c
  6665  002952  B4D8               	btfsc	status,2,c
  6666  002954  D00C               	goto	l591
  6667  002956  D7EC               	goto	l589
  6668  002958  2A04               	incf	___ftpack@exp,f,c
  6669  00295A  0E01               	movlw	1
  6670  00295C  2601               	addwf	___ftpack@arg,f,c
  6671  00295E  0E00               	movlw	0
  6672  002960  2202               	addwfc	___ftpack@arg+1,f,c
  6673  002962  0E00               	movlw	0
  6674  002964  2203               	addwfc	___ftpack@arg+2,f,c
  6675  002966  90D8               	bcf	status,0,c
  6676  002968  3203               	rrcf	___ftpack@arg+2,f,c
  6677  00296A  3202               	rrcf	___ftpack@arg+1,f,c
  6678  00296C  3201               	rrcf	___ftpack@arg,f,c
  6679  00296E                     l591:
  6680  00296E  0E00               	movlw	0
  6681  002970  1401               	andwf	___ftpack@arg,w,c
  6682  002972  6E06               	movwf	??___ftpack& (0+255),c
  6683  002974  0E00               	movlw	0
  6684  002976  1402               	andwf	___ftpack@arg+1,w,c
  6685  002978  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6686  00297A  0EFF               	movlw	255
  6687  00297C  1403               	andwf	___ftpack@arg+2,w,c
  6688  00297E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6689  002980  5006               	movf	??___ftpack,w,c
  6690  002982  1007               	iorwf	??___ftpack+1,w,c
  6691  002984  1008               	iorwf	??___ftpack+2,w,c
  6692  002986  B4D8               	btfsc	status,2,c
  6693  002988  D006               	goto	l594
  6694  00298A  D7E6               	goto	l592
  6695  00298C  0604               	decf	___ftpack@exp,f,c
  6696  00298E  90D8               	bcf	status,0,c
  6697  002990  3601               	rlcf	___ftpack@arg,f,c
  6698  002992  3602               	rlcf	___ftpack@arg+1,f,c
  6699  002994  3603               	rlcf	___ftpack@arg+2,f,c
  6700  002996                     l594:
  6701  002996  BE02               	btfsc	___ftpack@arg+1,7,c
  6702  002998  D003               	goto	u1850
  6703  00299A  0E02               	movlw	2
  6704  00299C  6004               	cpfslt	___ftpack@exp,c
  6705  00299E  D7F6               	goto	l595
  6706  0029A0                     u1850:
  6707  0029A0  A004               	btfss	___ftpack@exp,0,c
  6708  0029A2  9E02               	bcf	___ftpack@arg+1,7,c
  6709  0029A4  90D8               	bcf	status,0,c
  6710  0029A6  3204               	rrcf	___ftpack@exp,f,c
  6711  0029A8  5004               	movf	___ftpack@exp,w,c
  6712  0029AA  1203               	iorwf	___ftpack@arg+2,f,c
  6713  0029AC  5005               	movf	___ftpack@sign,w,c
  6714  0029AE  A4D8               	btfss	status,2,c
  6715  0029B0  8E03               	bsf	___ftpack@arg+2,7,c
  6716  0029B2  C001  F001         	movff	___ftpack@arg,?___ftpack
  6717  0029B6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6718  0029BA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6719  0029BE  0012               	return	
  6720  0029C0                     __end_of___ftpack:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           postdec1	equ	0xFE5
  6733                           fsr1h	equ	0xFE2
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _lcd_puts *****************
  6743 ;; Defined at:
  6744 ;;		line 120 in file "lcd_x8.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  s               2   14[COMRAM] PTR unsigned char 
  6747 ;;		 -> buffer(32), 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      void 
  6752 ;; Registers used:
  6753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;Total ram usage:        2 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    5
  6766 ;; This function calls:
  6767 ;;		_lcd_putc
  6768 ;; This function is called by:
  6769 ;;		_main
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text29
  6774  0030E2                     __ptext29:
  6775                           	opt stack 0
  6776  0030E2                     _lcd_puts:
  6777                           	opt stack 25
  6778                           
  6779                           ;lcd_x8.c: 121: while (*s) {
  6780                           
  6781                           ;incstack = 0
  6782  0030E2  D009               	goto	l50
  6783  0030E4                     
  6784                           ;lcd_x8.c: 122: lcd_putc(*s);
  6785  0030E4  C00F  FFD9         	movff	lcd_puts@s,fsr2l
  6786  0030E8  C010  FFDA         	movff	lcd_puts@s+1,fsr2h
  6787  0030EC  50DF               	movf	indf2,w,c
  6788  0030EE  EC20  F017         	call	_lcd_putc
  6789                           
  6790                           ;lcd_x8.c: 123: s++;
  6791  0030F2  4A0F               	infsnz	lcd_puts@s,f,c
  6792  0030F4  2A10               	incf	lcd_puts@s+1,f,c
  6793  0030F6                     l50:
  6794  0030F6  C00F  FFD9         	movff	lcd_puts@s,fsr2l
  6795  0030FA  C010  FFDA         	movff	lcd_puts@s+1,fsr2h
  6796  0030FE  50DF               	movf	indf2,w,c
  6797  003100  B4D8               	btfsc	status,2,c
  6798  003102  0012               	return	
  6799  003104  D7EF               	goto	l51
  6800  003106                     __end_of_lcd_puts:
  6801                           	opt stack 0
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           postinc0	equ	0xFEE
  6810                           wreg	equ	0xFE8
  6811                           indf1	equ	0xFE7
  6812                           postdec1	equ	0xFE5
  6813                           fsr1h	equ	0xFE2
  6814                           fsr1l	equ	0xFE1
  6815                           indf2	equ	0xFDF
  6816                           postinc2	equ	0xFDE
  6817                           postdec2	equ	0xFDD
  6818                           fsr2h	equ	0xFDA
  6819                           fsr2l	equ	0xFD9
  6820                           status	equ	0xFD8
  6821                           
  6822 ;; *************** function _lcd_putc *****************
  6823 ;; Defined at:
  6824 ;;		line 106 in file "lcd_x8.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  c               1    wreg     unsigned char 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  c               1   13[COMRAM] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      void 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;Total ram usage:        1 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    4
  6845 ;; This function calls:
  6846 ;;		_delay_ms
  6847 ;;		_lcd_gotoxy
  6848 ;;		_lcd_send_byte
  6849 ;; This function is called by:
  6850 ;;		_lcd_puts
  6851 ;;		_main
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text30
  6856  002E40                     __ptext30:
  6857                           	opt stack 0
  6858  002E40                     _lcd_putc:
  6859                           	opt stack 25
  6860                           
  6861                           ;incstack = 0
  6862                           ;lcd_putc@c stored from wreg
  6863  002E40  6E0E               	movwf	lcd_putc@c,c
  6864                           
  6865                           ;lcd_x8.c: 107: switch (c) {
  6866  002E42  D01E               	goto	l41
  6867  002E44  0E01               	movlw	1
  6868  002E46  6E09               	movwf	lcd_send_byte@n,c
  6869  002E48  0E00               	movlw	0
  6870  002E4A  EC4B  F017         	call	_lcd_send_byte
  6871                           
  6872                           ;lcd_x8.c: 109: delay_ms(2);
  6873  002E4E  0E00               	movlw	0
  6874  002E50  6E02               	movwf	delay_ms@n+1,c
  6875  002E52  0E02               	movlw	2
  6876  002E54  6E01               	movwf	delay_ms@n,c
  6877  002E56  EC28  F018         	call	_delay_ms	;wreg free
  6878                           
  6879                           ;lcd_x8.c: 110: break;
  6880  002E5A  0012               	return	
  6881  002E5C  0E02               	movlw	2
  6882  002E5E  6E0B               	movwf	lcd_gotoxy@y,c
  6883  002E60  0E01               	movlw	1
  6884  002E62  EC6F  F017         	call	_lcd_gotoxy
  6885                           
  6886                           ;lcd_x8.c: 112: break;
  6887  002E66  0012               	return	
  6888  002E68  0E10               	movlw	16
  6889  002E6A  6E09               	movwf	lcd_send_byte@n,c
  6890  002E6C  0E00               	movlw	0
  6891  002E6E  EC4B  F017         	call	_lcd_send_byte
  6892                           
  6893                           ;lcd_x8.c: 114: break;
  6894  002E72  0012               	return	
  6895  002E74  C00E  F009         	movff	lcd_putc@c,lcd_send_byte@n
  6896  002E78  0E01               	movlw	1
  6897  002E7A  EC4B  F017         	call	_lcd_send_byte
  6898                           
  6899                           ;lcd_x8.c: 117: }
  6900                           
  6901                           ;lcd_x8.c: 116: break;
  6902  002E7E  0012               	return	
  6903  002E80                     l41:
  6904  002E80  500E               	movf	lcd_putc@c,w,c
  6905                           
  6906                           ; Switch size 1, requested type "space"
  6907                           ; Number of cases is 3, Range of values is 8 to 12
  6908                           ; switch strategies available:
  6909                           ; Name         Instructions Cycles
  6910                           ; simple_byte           10     6 (average)
  6911                           ;	Chosen strategy is simple_byte
  6912  002E82  0A08               	xorlw	8	; case 8
  6913  002E84  B4D8               	btfsc	status,2,c
  6914  002E86  D7F0               	goto	l45
  6915  002E88  0A02               	xorlw	2	; case 10
  6916  002E8A  B4D8               	btfsc	status,2,c
  6917  002E8C  D7E7               	goto	l44
  6918  002E8E  0A06               	xorlw	6	; case 12
  6919  002E90  B4D8               	btfsc	status,2,c
  6920  002E92  D7D8               	goto	l42
  6921  002E94  D7EF               	goto	l46
  6922  002E96                     __end_of_lcd_putc:
  6923                           	opt stack 0
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           postinc0	equ	0xFEE
  6932                           wreg	equ	0xFE8
  6933                           indf1	equ	0xFE7
  6934                           postdec1	equ	0xFE5
  6935                           fsr1h	equ	0xFE2
  6936                           fsr1l	equ	0xFE1
  6937                           indf2	equ	0xFDF
  6938                           postinc2	equ	0xFDE
  6939                           postdec2	equ	0xFDD
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _lcd_gotoxy *****************
  6945 ;; Defined at:
  6946 ;;		line 89 in file "lcd_x8.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  x               1    wreg     unsigned char 
  6949 ;;  y               1   10[COMRAM] unsigned char 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;  x               1   11[COMRAM] unsigned char 
  6952 ;;  address         1   12[COMRAM] unsigned char 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, status,2, status,0, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;Total ram usage:        3 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:    3
  6969 ;; This function calls:
  6970 ;;		_lcd_send_byte
  6971 ;; This function is called by:
  6972 ;;		_lcd_putc
  6973 ;;		_main
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	text31
  6978  002EDE                     __ptext31:
  6979                           	opt stack 0
  6980  002EDE                     _lcd_gotoxy:
  6981                           	opt stack 25
  6982                           
  6983                           ;incstack = 0
  6984                           ;lcd_gotoxy@x stored from wreg
  6985  002EDE  6E0C               	movwf	lcd_gotoxy@x,c
  6986                           
  6987                           ;lcd_x8.c: 90: unsigned char address;
  6988                           ;lcd_x8.c: 92: switch (y) {
  6989  002EE0  D009               	goto	l32
  6990  002EE2  0E80               	movlw	128
  6991  002EE4  D005               	goto	L5
  6992  002EE6  0EC0               	movlw	192
  6993  002EE8  D003               	goto	L5
  6994  002EEA  0E90               	movlw	144
  6995  002EEC  D001               	goto	L5
  6996  002EEE  0ED0               	movlw	208
  6997  002EF0                     L5:
  6998  002EF0  6E0D               	movwf	lcd_gotoxy@address,c
  6999                           
  7000                           ;lcd_x8.c: 101: }
  7001                           
  7002                           ;lcd_x8.c: 100: break;
  7003  002EF2  D00D               	goto	l34
  7004  002EF4                     l32:
  7005  002EF4  500B               	movf	lcd_gotoxy@y,w,c
  7006                           
  7007                           ; Switch size 1, requested type "space"
  7008                           ; Number of cases is 4, Range of values is 1 to 4
  7009                           ; switch strategies available:
  7010                           ; Name         Instructions Cycles
  7011                           ; simple_byte           13     7 (average)
  7012                           ;	Chosen strategy is simple_byte
  7013  002EF6  0A01               	xorlw	1	; case 1
  7014  002EF8  B4D8               	btfsc	status,2,c
  7015  002EFA  D7F3               	goto	l33
  7016  002EFC  0A03               	xorlw	3	; case 2
  7017  002EFE  B4D8               	btfsc	status,2,c
  7018  002F00  D7F2               	goto	l35
  7019  002F02  0A01               	xorlw	1	; case 3
  7020  002F04  B4D8               	btfsc	status,2,c
  7021  002F06  D7F1               	goto	l36
  7022  002F08  0A07               	xorlw	7	; case 4
  7023  002F0A  B4D8               	btfsc	status,2,c
  7024  002F0C  D7F0               	goto	l37
  7025  002F0E                     l34:
  7026                           
  7027                           ;lcd_x8.c: 102: address += x - 1;
  7028  002F0E  040C               	decf	lcd_gotoxy@x,w,c
  7029  002F10  260D               	addwf	lcd_gotoxy@address,f,c
  7030                           
  7031                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  7032  002F12  500D               	movf	lcd_gotoxy@address,w,c
  7033  002F14  0980               	iorlw	128
  7034  002F16  6E09               	movwf	lcd_send_byte@n,c
  7035  002F18  0E00               	movlw	0
  7036  002F1A  EC4B  F017         	call	_lcd_send_byte
  7037  002F1E  0012               	return		;funcret
  7038  002F20                     __end_of_lcd_gotoxy:
  7039                           	opt stack 0
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           prodh	equ	0xFF4
  7045                           prodl	equ	0xFF3
  7046                           intcon	equ	0xFF2
  7047                           postinc0	equ	0xFEE
  7048                           wreg	equ	0xFE8
  7049                           indf1	equ	0xFE7
  7050                           postdec1	equ	0xFE5
  7051                           fsr1h	equ	0xFE2
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _lcd_init *****************
  7061 ;; Defined at:
  7062 ;;		line 56 in file "lcd_x8.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;		None
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  i               1   10[COMRAM] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  1    wreg      void 
  7069 ;; Registers used:
  7070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;Total ram usage:        1 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    3
  7083 ;; This function calls:
  7084 ;;		_delay_ms
  7085 ;;		_lcd_send_byte
  7086 ;;		_lcd_send_nibble
  7087 ;; This function is called by:
  7088 ;;		_main
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           	psect	text32
  7093  002D82                     __ptext32:
  7094                           	opt stack 0
  7095  002D82                     _lcd_init:
  7096                           	opt stack 27
  7097                           
  7098                           ;lcd_x8.c: 58: unsigned char i;
  7099                           ;lcd_x8.c: 61: lcd.rs = 0;;
  7100                           
  7101                           ;incstack = 0
  7102  002D82  9283               	bcf	3971,1,c
  7103                           
  7104                           ;lcd_x8.c: 63: lcd.enable = 0;;
  7105  002D84  9683               	bcf	3971,3,c
  7106                           
  7107                           ;lcd_x8.c: 65: delay_ms(25);
  7108  002D86  0E00               	movlw	0
  7109  002D88  6E02               	movwf	delay_ms@n+1,c
  7110  002D8A  0E19               	movlw	25
  7111  002D8C  6E01               	movwf	delay_ms@n,c
  7112  002D8E  EC28  F018         	call	_delay_ms	;wreg free
  7113                           
  7114                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  7115  002D92  0E01               	movlw	1
  7116  002D94  6E0B               	movwf	lcd_init@i,c
  7117  002D96                     l2935:
  7118  002D96  0E03               	movlw	3
  7119  002D98  640B               	cpfsgt	lcd_init@i,c
  7120  002D9A  D001               	goto	l25
  7121  002D9C  D00B               	goto	u2810
  7122  002D9E                     l25:
  7123                           
  7124                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  7125  002D9E  0E03               	movlw	3
  7126  002DA0  EC83  F018         	call	_lcd_send_nibble
  7127                           
  7128                           ;lcd_x8.c: 69: delay_ms(6);
  7129  002DA4  0E00               	movlw	0
  7130  002DA6  6E02               	movwf	delay_ms@n+1,c
  7131  002DA8  0E06               	movlw	6
  7132  002DAA  6E01               	movwf	delay_ms@n,c
  7133  002DAC  EC28  F018         	call	_delay_ms	;wreg free
  7134  002DB0  2A0B               	incf	lcd_init@i,f,c
  7135  002DB2  D7F1               	goto	l2935
  7136  002DB4                     u2810:
  7137                           
  7138                           ;lcd_x8.c: 70: }
  7139                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  7140  002DB4  0E02               	movlw	2
  7141  002DB6  EC83  F018         	call	_lcd_send_nibble
  7142                           
  7143                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  7144  002DBA  0E00               	movlw	0
  7145  002DBC  6E0B               	movwf	lcd_init@i,c
  7146  002DBE                     l2949:
  7147  002DBE  0E03               	movlw	3
  7148  002DC0  640B               	cpfsgt	lcd_init@i,c
  7149  002DC2  D001               	goto	l27
  7150  002DC4  0012               	return	
  7151  002DC6                     l27:
  7152                           
  7153                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  7154  002DC6  500B               	movf	lcd_init@i,w,c
  7155  002DC8  0D01               	mullw	1
  7156  002DCA  0EA0               	movlw	low _LCD_INIT_STRING
  7157  002DCC  24F3               	addwf	prodl,w,c
  7158  002DCE  6ED9               	movwf	fsr2l,c
  7159  002DD0  0E00               	movlw	high _LCD_INIT_STRING
  7160  002DD2  20F4               	addwfc	prodh,w,c
  7161  002DD4  6EDA               	movwf	fsr2h,c
  7162  002DD6  50DF               	movf	indf2,w,c
  7163  002DD8  6E09               	movwf	lcd_send_byte@n,c
  7164  002DDA  0E00               	movlw	0
  7165  002DDC  EC4B  F017         	call	_lcd_send_byte
  7166  002DE0  2A0B               	incf	lcd_init@i,f,c
  7167  002DE2  D7ED               	goto	l2949
  7168  002DE4                     __end_of_lcd_init:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           postinc0	equ	0xFEE
  7178                           wreg	equ	0xFE8
  7179                           indf1	equ	0xFE7
  7180                           postdec1	equ	0xFE5
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _lcd_send_byte *****************
  7191 ;; Defined at:
  7192 ;;		line 39 in file "lcd_x8.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  cm_data         1    wreg     unsigned char 
  7195 ;;  n               1    8[COMRAM] unsigned char 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  cm_data         1    9[COMRAM] unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, status,2, status,0, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7207 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;Total ram usage:        2 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    2
  7214 ;; This function calls:
  7215 ;;		_delay_cycles
  7216 ;;		_delay_ms
  7217 ;;		_lcd_send_nibble
  7218 ;; This function is called by:
  7219 ;;		_lcd_init
  7220 ;;		_lcd_gotoxy
  7221 ;;		_lcd_putc
  7222 ;;		_Lcd_Shift_Right
  7223 ;;		_Lcd_Shift_Left
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	text33
  7228  002E96                     __ptext33:
  7229                           	opt stack 0
  7230  002E96                     _lcd_send_byte:
  7231                           	opt stack 26
  7232                           
  7233                           ;incstack = 0
  7234                           ;lcd_send_byte@cm_data stored from wreg
  7235  002E96  6E0A               	movwf	lcd_send_byte@cm_data,c
  7236                           
  7237                           ;lcd_x8.c: 43: lcd.rs = cm_data;;
  7238  002E98  B00A               	btfsc	lcd_send_byte@cm_data,0,c
  7239  002E9A  D002               	bra	u1785
  7240  002E9C  9283               	bcf	3971,1,c
  7241  002E9E  D001               	bra	u1786
  7242  002EA0                     u1785:
  7243  002EA0  8283               	bsf	3971,1,c
  7244  002EA2                     u1786:
  7245                           
  7246                           ;lcd_x8.c: 44: delay_cycles(1);
  7247  002EA2  0E01               	movlw	1
  7248  002EA4  ECE9  F017         	call	_delay_cycles
  7249                           
  7250                           ;lcd_x8.c: 46: delay_cycles(1);
  7251  002EA8  0E01               	movlw	1
  7252  002EAA  ECE9  F017         	call	_delay_cycles
  7253                           
  7254                           ;lcd_x8.c: 47: lcd.enable = 0;;
  7255  002EAE  9683               	bcf	3971,3,c
  7256                           
  7257                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  7258  002EB0  3809               	swapf	lcd_send_byte@n,w,c
  7259  002EB2  0B0F               	andlw	15
  7260  002EB4  EC83  F018         	call	_lcd_send_nibble
  7261                           
  7262                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  7263  002EB8  5009               	movf	lcd_send_byte@n,w,c
  7264  002EBA  0B0F               	andlw	15
  7265  002EBC  EC83  F018         	call	_lcd_send_nibble
  7266                           
  7267                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  7268  002EC0  500A               	movf	lcd_send_byte@cm_data,w,c
  7269  002EC2  B4D8               	btfsc	status,2,c
  7270  002EC4  D005               	goto	l20
  7271  002EC6  0E32               	movlw	50
  7272  002EC8                     u3517:
  7273  002EC8  0004               	clrwdt	
  7274  002ECA  2EE8               	decfsz	wreg,f,c
  7275  002ECC  D7FD               	bra	u3517
  7276  002ECE  0012               	return	
  7277  002ED0                     l20:
  7278                           
  7279                           ;lcd_x8.c: 51: else
  7280                           ;lcd_x8.c: 52: delay_ms(2);
  7281  002ED0  0E00               	movlw	0
  7282  002ED2  6E02               	movwf	delay_ms@n+1,c
  7283  002ED4  0E02               	movlw	2
  7284  002ED6  6E01               	movwf	delay_ms@n,c
  7285  002ED8  EC28  F018         	call	_delay_ms	;wreg free
  7286  002EDC  0012               	return	
  7287  002EDE                     __end_of_lcd_send_byte:
  7288                           	opt stack 0
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           prodh	equ	0xFF4
  7294                           prodl	equ	0xFF3
  7295                           intcon	equ	0xFF2
  7296                           postinc0	equ	0xFEE
  7297                           wreg	equ	0xFE8
  7298                           indf1	equ	0xFE7
  7299                           postdec1	equ	0xFE5
  7300                           fsr1h	equ	0xFE2
  7301                           fsr1l	equ	0xFE1
  7302                           indf2	equ	0xFDF
  7303                           postinc2	equ	0xFDE
  7304                           postdec2	equ	0xFDD
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8
  7308                           
  7309 ;; *************** function _lcd_send_nibble *****************
  7310 ;; Defined at:
  7311 ;;		line 29 in file "lcd_x8.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;  n               1    wreg     unsigned char 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  n               1    7[COMRAM] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;Total ram usage:        2 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    1
  7332 ;; This function calls:
  7333 ;;		_delay_cycles
  7334 ;; This function is called by:
  7335 ;;		_lcd_send_byte
  7336 ;;		_lcd_init
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           	psect	text34
  7341  003106                     __ptext34:
  7342                           	opt stack 0
  7343  003106                     _lcd_send_nibble:
  7344                           	opt stack 26
  7345                           
  7346                           ;incstack = 0
  7347                           ;lcd_send_nibble@n stored from wreg
  7348  003106  6E08               	movwf	lcd_send_nibble@n,c
  7349                           
  7350                           ;lcd_x8.c: 31: lcd.data = n;
  7351  003108  C008  F007         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  7352  00310C  3A07               	swapf	??_lcd_send_nibble,f,c
  7353  00310E  5083               	movf	3971,w,c
  7354  003110  1807               	xorwf	??_lcd_send_nibble,w,c
  7355  003112  0B0F               	andlw	-241
  7356  003114  1807               	xorwf	??_lcd_send_nibble,w,c
  7357  003116  6E83               	movwf	3971,c
  7358                           
  7359                           ;lcd_x8.c: 33: delay_cycles(1);
  7360  003118  0E01               	movlw	1
  7361  00311A  ECE9  F017         	call	_delay_cycles
  7362                           
  7363                           ;lcd_x8.c: 34: lcd.enable = 1;;
  7364  00311E  8683               	bsf	3971,3,c
  7365                           
  7366                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  7367  003120  0004               	clrwdt	
  7368  003122  F000               	nop		;2 cycle nop
  7369                           
  7370                           ;lcd_x8.c: 36: lcd.enable = 0;;
  7371  003124  9683               	bcf	3971,3,c
  7372  003126  0012               	return		;funcret
  7373  003128                     __end_of_lcd_send_nibble:
  7374                           	opt stack 0
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           prodh	equ	0xFF4
  7380                           prodl	equ	0xFF3
  7381                           intcon	equ	0xFF2
  7382                           postinc0	equ	0xFEE
  7383                           wreg	equ	0xFE8
  7384                           indf1	equ	0xFE7
  7385                           postdec1	equ	0xFE5
  7386                           fsr1h	equ	0xFE2
  7387                           fsr1l	equ	0xFE1
  7388                           indf2	equ	0xFDF
  7389                           postinc2	equ	0xFDE
  7390                           postdec2	equ	0xFDD
  7391                           fsr2h	equ	0xFDA
  7392                           fsr2l	equ	0xFD9
  7393                           status	equ	0xFD8
  7394                           
  7395 ;; *************** function _delay_cycles *****************
  7396 ;; Defined at:
  7397 ;;		line 20 in file "lcd_x8.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  n               1    wreg     unsigned char 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  n               1    3[COMRAM] unsigned char 
  7402 ;;  x               2    4[COMRAM] int 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      void 
  7405 ;; Registers used:
  7406 ;;		wreg, status,2, status,0
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;Total ram usage:        6 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_lcd_send_nibble
  7422 ;;		_lcd_send_byte
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text35
  7427  002FD2                     __ptext35:
  7428                           	opt stack 0
  7429  002FD2                     _delay_cycles:
  7430                           	opt stack 26
  7431                           
  7432                           ;incstack = 0
  7433                           ;delay_cycles@n stored from wreg
  7434  002FD2  6E04               	movwf	delay_cycles@n,c
  7435                           
  7436                           ;lcd_x8.c: 21: int x;
  7437                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  7438  002FD4  0E00               	movlw	0
  7439  002FD6  6E06               	movwf	delay_cycles@x+1,c
  7440  002FD8  0E00               	movlw	0
  7441  002FDA  6E05               	movwf	delay_cycles@x,c
  7442  002FDC  D003               	goto	l11
  7443  002FDE                     l12:
  7444  002FDE  0004               	clrwdt		;# 
  7445  002FE0  4A05               	infsnz	delay_cycles@x,f,c
  7446  002FE2  2A06               	incf	delay_cycles@x+1,f,c
  7447  002FE4                     l11:
  7448  002FE4  5004               	movf	delay_cycles@n,w,c
  7449  002FE6  6E01               	movwf	??_delay_cycles& (0+255),c
  7450  002FE8  6A02               	clrf	(??_delay_cycles+1)& (0+255),c
  7451  002FEA  5005               	movf	delay_cycles@x,w,c
  7452  002FEC  5C01               	subwf	??_delay_cycles,w,c
  7453  002FEE  5002               	movf	??_delay_cycles+1,w,c
  7454  002FF0  0A80               	xorlw	128
  7455  002FF2  6E03               	movwf	(??_delay_cycles+2)& (0+255),c
  7456  002FF4  5006               	movf	delay_cycles@x+1,w,c
  7457  002FF6  0A80               	xorlw	128
  7458  002FF8  5803               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  7459  002FFA  A0D8               	btfss	status,0,c
  7460  002FFC  0012               	return	
  7461  002FFE  D7EF               	goto	l12
  7462  003000                     __end_of_delay_cycles:
  7463                           	opt stack 0
  7464                           tblptru	equ	0xFF8
  7465                           tblptrh	equ	0xFF7
  7466                           tblptrl	equ	0xFF6
  7467                           tablat	equ	0xFF5
  7468                           prodh	equ	0xFF4
  7469                           prodl	equ	0xFF3
  7470                           intcon	equ	0xFF2
  7471                           postinc0	equ	0xFEE
  7472                           wreg	equ	0xFE8
  7473                           indf1	equ	0xFE7
  7474                           postdec1	equ	0xFE5
  7475                           fsr1h	equ	0xFE2
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           
  7484 ;; *************** function _delay_ms *****************
  7485 ;; Defined at:
  7486 ;;		line 236 in file "mainBasicCircuit.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  n               2    0[COMRAM] unsigned int 
  7489 ;; Auto vars:     Size  Location     Type
  7490 ;;  i               2    2[COMRAM] int 
  7491 ;; Return value:  Size  Location     Type
  7492 ;;                  1    wreg      void 
  7493 ;; Registers used:
  7494 ;;		wreg, status,2, status,0
  7495 ;; Tracked objects:
  7496 ;;		On entry : 0/0
  7497 ;;		On exit  : 0/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7500 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7504 ;;Total ram usage:        4 bytes
  7505 ;; Hardware stack levels used:    1
  7506 ;; This function calls:
  7507 ;;		Nothing
  7508 ;; This function is called by:
  7509 ;;		_lcd_send_byte
  7510 ;;		_lcd_init
  7511 ;;		_lcd_putc
  7512 ;;		_main
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           	psect	text36
  7517  003050                     __ptext36:
  7518                           	opt stack 0
  7519  003050                     _delay_ms:
  7520                           	opt stack 27
  7521                           
  7522                           ;mainBasicCircuit.c: 238: int i;
  7523                           ;mainBasicCircuit.c: 239: for (i=0; i < n; i++){
  7524                           
  7525                           ;incstack = 0
  7526  003050  0E00               	movlw	0
  7527  003052  6E04               	movwf	delay_ms@i+1,c
  7528  003054  0E00               	movlw	0
  7529  003056  6E03               	movwf	delay_ms@i,c
  7530  003058  D007               	goto	l207
  7531  00305A                     
  7532                           ;mainBasicCircuit.c: 240: _delaywdt((unsigned long)((1)*(4000000UL/4000.0))) ;
  7533  00305A  0EC8               	movlw	200
  7534  00305C                     u3527:
  7535  00305C  0004               	clrwdt	
  7536  00305E  0004               	clrwdt	
  7537  003060  2EE8               	decfsz	wreg,f,c
  7538  003062  D7FC               	bra	u3527
  7539  003064  4A03               	infsnz	delay_ms@i,f,c
  7540  003066  2A04               	incf	delay_ms@i+1,f,c
  7541  003068                     l207:
  7542  003068  5001               	movf	delay_ms@n,w,c
  7543  00306A  5C03               	subwf	delay_ms@i,w,c
  7544  00306C  5002               	movf	delay_ms@n+1,w,c
  7545  00306E  5804               	subwfb	delay_ms@i+1,w,c
  7546  003070  B0D8               	btfsc	status,0,c
  7547  003072  0012               	return	
  7548  003074  D7F2               	goto	l208
  7549  003076                     __end_of_delay_ms:
  7550                           	opt stack 0
  7551                           tblptru	equ	0xFF8
  7552                           tblptrh	equ	0xFF7
  7553                           tblptrl	equ	0xFF6
  7554                           tablat	equ	0xFF5
  7555                           prodh	equ	0xFF4
  7556                           prodl	equ	0xFF3
  7557                           intcon	equ	0xFF2
  7558                           postinc0	equ	0xFEE
  7559                           wreg	equ	0xFE8
  7560                           indf1	equ	0xFE7
  7561                           postdec1	equ	0xFE5
  7562                           fsr1h	equ	0xFE2
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _is_byte_available *****************
  7572 ;; Defined at:
  7573 ;;		line 226 in file "mainBasicCircuit.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      unsigned char 
  7580 ;; Registers used:
  7581 ;;		wreg
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;Total ram usage:        0 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_main
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text37
  7601  003162                     __ptext37:
  7602                           	opt stack 0
  7603  003162                     _is_byte_available:
  7604                           	opt stack 30
  7605                           
  7606                           ;mainBasicCircuit.c: 227: if (RCSTAbits.FERR || RCSTAbits.OERR) {
  7607                           
  7608                           ;incstack = 0
  7609  003162  B4AB               	btfsc	4011,2,c	;volatile
  7610  003164  D002               	goto	u3370
  7611  003166  A2AB               	btfss	4011,1,c	;volatile
  7612  003168  D002               	goto	l199
  7613  00316A                     u3370:
  7614                           
  7615                           ;mainBasicCircuit.c: 228: RCSTAbits.CREN = 0;
  7616  00316A  98AB               	bcf	4011,4,c	;volatile
  7617                           
  7618                           ;mainBasicCircuit.c: 229: RCSTAbits.CREN = 1;
  7619  00316C  88AB               	bsf	4011,4,c	;volatile
  7620  00316E                     l199:
  7621                           
  7622                           ;mainBasicCircuit.c: 230: }
  7623                           ;mainBasicCircuit.c: 231: if (PIR1bits.RCIF) return 1;
  7624  00316E  AA9E               	btfss	3998,5,c	;volatile
  7625  003170  D002               	goto	l202
  7626  003172  0E01               	movlw	1
  7627  003174  0012               	return	
  7628  003176                     l202:
  7629                           
  7630                           ;mainBasicCircuit.c: 232: else return 0;
  7631  003176  0E00               	movlw	0
  7632  003178  0012               	return	
  7633  00317A                     __end_of_is_byte_available:
  7634                           	opt stack 0
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           postinc0	equ	0xFEE
  7643                           wreg	equ	0xFE8
  7644                           indf1	equ	0xFE7
  7645                           postdec1	equ	0xFE5
  7646                           fsr1h	equ	0xFE2
  7647                           fsr1l	equ	0xFE1
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function _init_adc_no_lib *****************
  7656 ;; Defined at:
  7657 ;;		line 10 in file "my_adc.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      void 
  7664 ;; Registers used:
  7665 ;;		wreg, status,2
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; This function calls:
  7678 ;;		Nothing
  7679 ;; This function is called by:
  7680 ;;		_main
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           	psect	text38
  7685  00318A                     __ptext38:
  7686                           	opt stack 0
  7687  00318A                     _init_adc_no_lib:
  7688                           	opt stack 30
  7689                           
  7690                           ;my_adc.c: 12: ADCON0 = 0;
  7691                           
  7692                           ;incstack = 0
  7693  00318A  0E00               	movlw	0
  7694  00318C  6EC2               	movwf	4034,c	;volatile
  7695                           
  7696                           ;my_adc.c: 13: ADCON0bits.ADON = 1;
  7697  00318E  80C2               	bsf	4034,0,c	;volatile
  7698                           
  7699                           ;my_adc.c: 15: ADCON2 = 0b10001001;
  7700  003190  0E89               	movlw	137
  7701  003192  6EC0               	movwf	4032,c	;volatile
  7702  003194  0012               	return		;funcret
  7703  003196                     __end_of_init_adc_no_lib:
  7704                           	opt stack 0
  7705                           tblptru	equ	0xFF8
  7706                           tblptrh	equ	0xFF7
  7707                           tblptrl	equ	0xFF6
  7708                           tablat	equ	0xFF5
  7709                           prodh	equ	0xFF4
  7710                           prodl	equ	0xFF3
  7711                           intcon	equ	0xFF2
  7712                           postinc0	equ	0xFEE
  7713                           wreg	equ	0xFE8
  7714                           indf1	equ	0xFE7
  7715                           postdec1	equ	0xFE5
  7716                           fsr1h	equ	0xFE2
  7717                           fsr1l	equ	0xFE1
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           fsr2h	equ	0xFDA
  7722                           fsr2l	equ	0xFD9
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function _initPorts *****************
  7726 ;; Defined at:
  7727 ;;		line 166 in file "mainBasicCircuit.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; This function calls:
  7748 ;;		Nothing
  7749 ;; This function is called by:
  7750 ;;		_main
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           	psect	text39
  7755  003000                     __ptext39:
  7756                           	opt stack 0
  7757  003000                     _initPorts:
  7758                           	opt stack 30
  7759                           
  7760                           ;mainBasicCircuit.c: 168: ADCON1 = 0xC;
  7761                           
  7762                           ;incstack = 0
  7763  003000  0E0C               	movlw	12
  7764  003002  6EC1               	movwf	4033,c	;volatile
  7765                           
  7766                           ;mainBasicCircuit.c: 169: LATA = LATB = LATC = LATD = LATE =0;
  7767  003004  0E00               	movlw	0
  7768  003006  6E8D               	movwf	3981,c	;volatile
  7769  003008  CF8D FF8C          	movff	3981,3980	;volatile
  7770  00300C  CF8C FF8B          	movff	3980,3979	;volatile
  7771  003010  CF8B FF8A          	movff	3979,3978	;volatile
  7772  003014  CF8A FF89          	movff	3978,3977	;volatile
  7773                           
  7774                           ;mainBasicCircuit.c: 170: TRISA = 0xFF;
  7775  003018  6892               	setf	3986,c	;volatile
  7776                           
  7777                           ;mainBasicCircuit.c: 171: TRISB = 0xFF;
  7778  00301A  6893               	setf	3987,c	;volatile
  7779                           
  7780                           ;mainBasicCircuit.c: 172: TRISD = TRISE =0;
  7781  00301C  0E00               	movlw	0
  7782  00301E  6E96               	movwf	3990,c	;volatile
  7783  003020  CF96 FF95          	movff	3990,3989	;volatile
  7784                           
  7785                           ;mainBasicCircuit.c: 173: TRISC = 0b10000000;
  7786  003024  0E80               	movlw	128
  7787  003026  6E94               	movwf	3988,c	;volatile
  7788  003028  0012               	return		;funcret
  7789  00302A                     __end_of_initPorts:
  7790                           	opt stack 0
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           postinc0	equ	0xFEE
  7799                           wreg	equ	0xFE8
  7800                           indf1	equ	0xFE7
  7801                           postdec1	equ	0xFE5
  7802                           fsr1h	equ	0xFE2
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           intcon	equ	0xFF2
  7817                           postinc0	equ	0xFEE
  7818                           wreg	equ	0xFE8
  7819                           indf1	equ	0xFE7
  7820                           postdec1	equ	0xFE5
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830                           	psect	rparam
  7831  0000                     tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           intcon	equ	0xFF2
  7838                           postinc0	equ	0xFEE
  7839                           wreg	equ	0xFE8
  7840                           indf1	equ	0xFE7
  7841                           postdec1	equ	0xFE5
  7842                           fsr1h	equ	0xFE2
  7843                           fsr1l	equ	0xFE1
  7844                           indf2	equ	0xFDF
  7845                           postinc2	equ	0xFDE
  7846                           postdec2	equ	0xFDD
  7847                           fsr2h	equ	0xFDA
  7848                           fsr2l	equ	0xFD9
  7849                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    118
    Data        8
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     127
    BANK0           128      0      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(COMRAM[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_4(CODE[3]), STR_3(CODE[18]), STR_2(CODE[19]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> buffer(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___ftdiv
    _read_adc_temp->___ftdiv
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   89716
                                            108 COMRAM     1     1      0
                           _delay_ms
                          _initPorts
                    _init_adc_no_lib
                  _is_byte_available
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                      _read_adc_temp
                   _read_adc_voltage
                   _read_byte_no_lib
                 _send_string_no_lib
                        _setupSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   52062
                                             63 COMRAM    45    35     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12363
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12165
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     219
                                              1 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3    9275
                                             39 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _read_adc_temp                                       12     9      3   14535
                                             39 COMRAM    12     9      3
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3199
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3215
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2748
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    4426
                                             14 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    4153
                                             13 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1915
                                             10 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2376
                                             10 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1464
                                              8 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                              6 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     730
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _initPorts
   _init_adc_no_lib
   _is_byte_available
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_temp
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _setupSerial
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      24       5       28.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      34        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Nov 28 12:47:11 2023

           ?_read_adc_voltage 0028                             _x 007A            ??_read_adc_voltage 002B  
                          l11 2FE4                            l12 2FDE                            l20 2ED0  
                          l32 2EF4                            l25 2D9E                            l33 2EE2  
                          l41 2E80                            l34 2F0E                            l42 2E44  
                          l50 30F6                            l27 2DC6                            l35 2EE6  
                          l51 30E4                            l36 2EEA                            l44 2E5C  
                          _AN 006E                            l37 2EEE                            l45 2E68  
                          l46 2E74                ?_lcd_send_byte 0009                  ___awdiv@sign 000C  
         ___wmul@multiplicand 0011                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$XT 000000                  ___ftadd@exp1 0039                  ___ftadd@exp2 0038  
                 __CFG_LVP$ON 000000                  ___ftadd@sign 0037                   __CFG_WDT$ON 000000  
                         l202 3176                           l300 1308                           l230 2F76  
                         l310 14C6                           l302 1398                           l207 3068  
                         l303 13FC                           l208 305A                           l320 15EA  
                         l305 1420                           l161 2104                           l330 16E0  
                         l322 1616                           l306 145E                           l162 2132  
                         l323 1600                           l307 151A                           l260 1BDE  
                         l332 171A                           l316 157E                           l164 2204  
                         l181 3156                           l261 1B0A                           l341 18B0  
                         l333 171E                           l165 2208                           l182 3154  
                         l254 1F24                           l350 1964                           l342 18CC  
                         l334 1740                           l326 16D6                           l166 2230  
                         l158 20CA                           l335 186E                           l327 1644  
                         l271 10BC                           l159 20D8                           l264 1BBA  
                         l344 18EC                           l336 1790                           l272 10D4  
                         l193 30D2                           l257 1FF0                           l265 1D0A  
                         l345 190E                           l329 16F6                           l281 128C  
                         l194 30C0                           l354 19AE                           l338 188E  
                         l290 1226                           l274 1100                           l187 3180  
                         l531 2B40                           l267 1DBA                           l347 1930  
                         l339 1878                           l291 1216                           l188 317E  
                         l532 2B4A                           l524 2AF2                           l540 2C1A  
                         l348 1938                           l284 11D6                           l276 11CA  
                         l701 2F36                           l533 2B58                           l525 2B02  
                         l541 2C12                           l349 195C                           l285 12B4  
                         l293 1254                           l277 11B4                           l294 1238  
                         l286 11DA                           l278 117E                           l199 316E  
                         l623 22BA                           l527 2B20                           l287 11F6  
                         l552 2FAE                           l560 25CA                           l528 2B18  
                         l544 2C32                           l720 313E                           l296 1266  
                         l288 120C                           l633 2316                           l713 270A  
                         l705 2670                           l545 2C3C                           l537 2BF8  
                         l297 127A                           l642 2354                           l634 230C  
                         l714 26FE                           l562 2608                           l546 2C4A  
                         l538 2C04                           l298 1898                           l643 234A  
                         l619 2290                           l707 26E6                           l563 25F8  
                         l299 12C8                           l652 2854                           l628 2320  
                         l716 2726                           l708 26D6                           l556 253A  
                         l660 2416                           l645 2378                           l654 287C  
                         l646 2394                           l750 2BC4                           l558 2558  
                         l662 2442                           l591 296E                           l655 28BA  
                         l647 23C4                           l751 2BD2                           l559 259A  
                         l663 247C                           l592 2958                           l656 28E0  
                         l760 2C9A                           l568 262C                           l672 2504  
                         l664 24A4                           l761 2CA8                           l569 2620  
                         l673 24F8                           l594 2996                           l690 27E2  
                         l746 2B90                           l666 24E0                           l595 298C  
                         l691 27F2                           l747 2B84                           l667 24D0  
                         l588 293A                           l684 2760                           l756 2C72  
                         l589 2930                           l677 29F0                           l757 2C66  
                         l686 2788                           l678 2A20                           l687 27BA  
                         l695 308C                           l767 2DF6                           l688 27CA  
                         l768 2DEA                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         _lcd 000F83                  ___awmod@sign 0006                           prod 000FF3  
   read_adc_voltage@raw_value 002E                           wreg 000FE8                   lcd_gotoxy@x 000C  
                 lcd_gotoxy@y 000B                  ___ftdiv@cntr 0022                  ___ftdiv@sign 0027  
                        l3121 145E                          l2229 2A4C                          l3053 1238  
                        l3047 1216                          l3129 14A2                          l3173 1610  
                        l3149 1582                          l3193 16E0                          l3169 1600  
                        l3283 19AA                          l3377 20D0                          l2935 2D96  
                        l2949 2DBE                          STR_1 109C                          STR_2 1077  
                        STR_3 108A                          STR_4 10AC                          u2020 2328  
                        u2111 2770                          u2050 235C                          _LATA 000F89  
                        u3110 15BA                          u3030 1430                          _LATB 000F8A  
                        _LATC 000F8B                          u2240 2C1E                          u3040 146E  
                        _LATD 000F8C                          u2401 2426                          _LATE 000F8D  
                        u2091 2748                          u2180 2B24                          u3140 1624  
                        u3310 196C                          u3070 14A2                          u3400 314E  
                        u3320 198A                          u1810 2922                          u2530 2632  
                        u3170 1704                          u2460 250A                          u3340 19C8  
                        u3180 1714                          u2541 283C                          u2381 23FA  
                        u2710 2710                          u1920 2282                          u3440 2136  
                        u2561 2864                          u3370 316A                          u2810 2DB4  
                        u1850 29A0                          u2651 2654                          u2740 2B94  
                        u3460 2192                          u3517 2EC8                          u1950 22AC  
                        u2670 268E                          u3527 305C                          u1785 2EA0  
                        u1881 224E                          u1786 2EA2                          u2770 2C76  
                        u1891 2262                          u2675 2686                          u1980 22EA  
                        u2870 115C                          u3478 2194                          u2990 1340  
                        u2995 1336              ?_lcd_send_nibble 0001                          _Line 007C  
                        _main 2030                  ___ftpack@arg 0001              _send_byte_no_lib 317A  
                ___ftpack@exp 0004                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0300                 __CFG_IESO$OFF 000000                  _sprintf$1179 0050  
               __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0022                  ___param_bank 000000  
                ___ftmul@sign 0023                  ___fttol@exp1 0039                  ___fttol@lval 0035  
        __end_of_delay_cycles 3000                         ?_main 0001               __end_of___awdiv 2B62  
             __end_of___ftadd 23EA               __end_of___awmod 2C54               __end_of___ftdiv 2912  
             __end_of___ftneg 309A               __end_of___lldiv 2BE4               __end_of___ftmul 282C  
             ___awdiv@divisor 0009               __end_of___llmod 2CBA               __end_of___ftsub 2F60  
             __end_of___fttol 2738               ___awdiv@counter 000B                         _RCREG 000FAE  
                       _RCSTA 000FAB                         _SPBRG 000FAF       read_adc_voltage@channel 0030  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                         _TXREG 000FAD  
                       _TXSTA 000FAC                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
                ___lltoft@exp 0011                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                 ___awtoft@sign 0018               __end_of_dpowers 1029  
                       _scale 19D6               __end_of_isdigit 3146               _init_adc_no_lib 318A  
               ___ftpack@sign 0005                         tablat 000FF5                         status 000FD8  
     read_adc_voltage@voltage 002B               __end_of_sprintf 19D6                __CFG_PBADEN$ON 000000  
             __initialization 2D20                  __end_of_main 223E               ??_lcd_send_byte 000A  
                      ??_main 006D                 ___fttol@sign1 0034                 __activetblptr 000002  
        __size_of__tdiv_to_l_ 0132                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0              ___llmod@dividend 0001                        ?_scale 0024  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0007  
            __end_of___awtoft 2FD2              __end_of___ftpack 29C0              __end_of___lltoft 2E40  
                      _INTCON 000FF2                        _SPBRGH 000FB0              __end_of_delay_ms 3076  
                      _Column 007E                __CFG_XINST$OFF 000000              __end_of__powers_ 1050  
            __end_of_lcd_init 2DE4              __end_of_lcd_putc 2E96              __end_of_lcd_puts 3106  
                      ___ftge 29C0          read_adc_temp@channel 0033                        ___wmul 302A  
                   ??___awdiv 000B                     ??___ftadd 0034                __CFG_STVREN$ON 000000  
                   ??___awmod 0005                     ??___ftdiv 001F                     ??___ftneg 0004  
                   ??___lldiv 0009                     ??___ftmul 001B                     ??___llmod 0009  
                   ??___ftsub 0040                     ??___fttol 002F                        _buffer 0080  
      __size_of_read_adc_temp 008E                        _fround 1DDE                        clear_0 2D66  
                      clear_1 2D72              ___awdiv@quotient 000D               ___awmod@divisor 0003  
             ___awmod@counter 0005         ___ftmul@f3_as_product 001F       __end_of_init_adc_no_lib 3196  
                __pdataCOMRAM 007C                     ??_isdigit 0001          read_adc_temp@voltage 002B  
                __mediumconst 0000           send_string_no_lib@p 0002                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8            _send_string_no_lib 30BE  
                ?_setupSerial 0001                     ??_sprintf 004A                    __accesstop 0080  
     __end_of__initialization 2D78           ?_send_string_no_lib 0002                    ___ftadd@f1 002E  
                  ___ftadd@f2 0031                    ___ftge@ff1 0001                    ___ftge@ff2 0004  
           ?_read_byte_no_lib 0001                 ___rparam_used 000001                    ___ftdiv@f1 0019  
                  ___ftdiv@f2 001C                    ___ftdiv@f3 0023                    ___ftneg@f1 0001  
                  ___awtoft@c 0015            ??_read_byte_no_lib 0001                    ___ftmul@f1 0015  
                  ___ftmul@f2 0018                    ___ftsub@f1 003A                    ___ftsub@f2 003D  
                  ___fttol@f1 002B                __pcstackCOMRAM 0001         __size_of_delay_cycles 002E  
                __pidataBANK0 319A                    ___lltoft@c 0009                 __end_of_scale 1DDE  
           read_adc_temp@temp 002E          ??_send_string_no_lib 0004      __end_of_send_byte_no_lib 318A  
                  __div_to_l_ 251C     __size_of_read_adc_voltage 0066             lcd_gotoxy@address 000D  
             __div_to_l_@exp1 000C               __div_to_l_@cntr 000B                       ??_scale 0027  
             __div_to_l_@quot 0007                  sprintf@width 0065                 _read_adc_temp 2A50  
                  __pbssBANK0 0080   __end_of_read_adc_raw_no_lib 2F9A                  _delay_cycles 2FD2  
          __size_of_initPorts 002A                 __div_to_l_@f1 0001                 __div_to_l_@f2 0004  
           read_byte_no_lib@c 0001                lcd_send_byte@n 0009                       ?___ftge 0001  
                     ?___wmul 000F              lcd_send_nibble@n 0008                       ?_fround 0024  
                   ?___awtoft 0015                     ?___ftpack 0001                     ?___lltoft 0009  
            ?_init_adc_no_lib 0001                     ?_delay_ms 0001                    _lcd_gotoxy 2EDE  
              ?_read_adc_temp 0028                     ?_lcd_init 0001                     ?_lcd_putc 0001  
                   ?_lcd_puts 000F             _is_byte_available 3162             __end_of__npowers_ 1077  
                     __Hparam 0000                    _scale$1178 0027                       __Lparam 0000  
    __size_of_lcd_send_nibble 0022            ?_is_byte_available 0001               __size_of___ftge 0090  
                     ___awdiv 2ADE                       ___ftadd 223E                       ___awmod 2BE4  
                     ___ftdiv 282C                       ___ftneg 3076                       ___lldiv 2B62  
             __size_of___wmul 0026                       ___ftmul 2738                       ___llmod 2C54  
                     ___ftsub 2F20                       ___fttol 2644                  __psmallconst 1000  
                     __pcinit 2D20                    ??___awtoft 0018                    ??___ftpack 0006  
             __size_of_fround 0252                       __ramtop 1000           ??_is_byte_available 0001  
                  ??___lltoft 000D                       __ptext0 2030                       __ptext1 10B0  
                     __ptext2 19D6                       __ptext3 3128                       __ptext4 1DDE  
                     __ptext5 2BE4                       __ptext6 2ADE                       __ptext7 23EA  
                     __ptext8 251C                       __ptext9 2DE4                   ?__div_to_l_ 0001  
           __end_of_initPorts 302A                       _dpowers 1001                       _isdigit 3128  
            ___awmod@dividend 0001                    ??_delay_ms 0003                       _sprintf 10B0  
                  ??_lcd_init 000B                       _voltage 0077                    ??_lcd_putc 000E  
                  ??_lcd_puts 0011          end_of_initialization 2D78          __size_of_setupSerial 0024  
               __Lmediumconst 0000     __end_of_is_byte_available 317A          lcd_send_byte@cm_data 000A  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                     _RCSTAbits 000FAB  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                __tdiv_to_l_@f1 0001                __tdiv_to_l_@f2 0004  
       __end_of_lcd_send_byte 2EDE              setupSerial@dummy 0001                 ??__tdiv_to_l_ 0007  
                   _PORTDbits 000F83              _read_adc_voltage 2CBA                   ?_lcd_gotoxy 000B  
             ??_read_adc_temp 002B               _LCD_INIT_STRING 00A0                   ___ftdiv@exp 0026  
                   _TXSTAbits 000FAC           __size_of__div_to_l_ 0128                   ___ftmul@exp 001E  
           send_byte_no_lib@c 0001                __end_of___ftge 2A50                __end_of___wmul 3050  
                 _BAUDCONbits 000FB8                 __pidataCOMRAM 3196                 delay_cycles@n 0004  
               delay_cycles@x 0005             ??_lcd_send_nibble 0007     __size_of_read_byte_no_lib 001C  
              __end_of_fround 2030             ?_send_byte_no_lib 0001           start_initialization 2D20  
          ??_send_byte_no_lib 0001           __end_of__tdiv_to_l_ 251C    __size_of_is_byte_available 0018  
             ___llmod@divisor 0005               ___llmod@counter 0009                      ??___ftge 0007  
         __size_of_lcd_gotoxy 0042                      ??___wmul 0013                   __pdataBANK0 00A0  
read_adc_raw_no_lib@raw_value 0005              __CFG_LPT1OSC$OFF 000000                      ??_fround 0027  
               sprintf@tmpval 005F   __size_of_send_string_no_lib 0024                    fround@prec 002D  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
                 __pbssCOMRAM 006E                   _channelRead 007B             __size_of_delay_ms 0026  
           __size_of_lcd_init 0062                   sprintf@flag 005D             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0024                   sprintf@fval 0067                   sprintf@prec 006A  
           __CFG_CCP2MX$PORTC 000000  __size_of_read_adc_raw_no_lib 003A                      ?___awdiv 0007  
                    ?___ftadd 002E                      ?___awmod 0001                      ?___ftdiv 0019  
                    ?___ftneg 0001                      ?___lldiv 0001                      ?___ftmul 0015  
                    ?___llmod 0001                      ?___ftsub 003A                     __npowers_ 1050  
                    ?___fttol 002B                   __tdiv_to_l_ 23EA                  ??__div_to_l_ 0007  
                 __smallconst 1000                      ?_isdigit 0001                     _initPorts 3000  
                    ?_sprintf 0040                __size_of_scale 0408      __size_of_init_adc_no_lib 000C  
              ___wmul@product 0013                     delay_ms@i 0003                     delay_ms@n 0001  
                    _PIR1bits 000F9E            __end_of__div_to_l_ 2644      __end_of_read_adc_voltage 2D20  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 0007              _read_byte_no_lib 3146  
                  _ADCON0bits 000FC2             ___wmul@multiplier 000F                     lcd_init@i 000B  
                   lcd_putc@c 000E                     lcd_puts@s 000F                  ??_lcd_gotoxy 000C  
                  ?_initPorts 0001                 ??_setupSerial 0001                     copy_data0 2D34  
                   copy_data1 2D54               _lcd_send_nibble 3106                      __Hrparam 0000  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000            __end_of_lcd_gotoxy 2F20  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___awmod 0070  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024              __size_of___lldiv 0082  
            __size_of___ftmul 00F4              __size_of___llmod 0066              __size_of___ftsub 0040  
            __size_of___fttol 00F4                      ___awtoft 2F9A                      ___ftpack 2912  
                 _fround$1176 002A                   _fround$1177 0027                      ___lltoft 2DE4  
                 _isdigit$827 0002                    sprintf@len 0057                    sprintf@exp 0063  
                  sprintf@val 0059              __size_of_isdigit 001E                      _delay_ms 3050  
                    __ptext10 2C54                      __ptext11 2B62                      __ptext20 3146  
                    __ptext12 2644                      __ptext21 2CBA                      __ptext13 2F20  
                    __ptext30 2E40                      __ptext22 2A50                      __ptext14 223E  
                    __ptext31 2EDE                      __ptext23 2F60                      __ptext15 3076  
                    __ptext32 2D82                      __ptext24 302A                      __ptext16 29C0  
                    __ptext33 2E96                      __ptext25 2738                      __ptext17 309A  
                    __ptext34 3106                      __ptext26 282C                      __ptext18 30BE  
                    __ptext35 2FD2                      __ptext27 2F9A                      __ptext19 317A  
                    __ptext36 3050                      __ptext28 2912                      __ptext37 3162  
                    __ptext29 30E2                      __ptext38 318A                      __ptext39 3000  
                    __powers_ 1029         __end_of_read_adc_temp 2ADE                      _lcd_init 2D82  
                    _lcd_putc 2E40                      _lcd_puts 30E2              __size_of_sprintf 0926  
      __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001                 __size_of_main 020E  
   __size_of_send_byte_no_lib 0010           __end_of_setupSerial 30BE             ??_init_adc_no_lib 0001  
      read_adc_temp@raw_value 0031                      isdigit@c 0003                   ??_initPorts 0001  
         _read_adc_raw_no_lib 2F60                      scale@scl 002A                     sprintf@ap 0055  
                   sprintf@cp 0053       __end_of_lcd_send_nibble 3128              __tdiv_to_l_@exp1 000F  
                   sprintf@sp 0040              __tdiv_to_l_@cntr 000E                ??_delay_cycles 0001  
            __tdiv_to_l_@quot 000A              ___lldiv@dividend 0001          ?_read_adc_raw_no_lib 0001  
  __end_of_send_string_no_lib 30E2                 _lcd_send_byte 2E96                  ?__tdiv_to_l_ 0001  
                    sprintf@c 006C                      sprintf@f 0042              ___lldiv@quotient 0009  
                 _setupSerial 309A      __end_of_read_byte_no_lib 3162         ??_read_adc_raw_no_lib 0003  
